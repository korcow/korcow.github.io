<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[배열과 포인터]]></title>
      <url>/2017/11/14/c-%EB%B0%B0%EC%97%B4/</url>
      <content type="html"><![CDATA[<h3 id="배열과-포인터"><a href="#배열과-포인터" class="headerlink" title="배열과 포인터"></a>배열과 포인터</h3><p>배열은 변수를 편하게 사용하기 위해 만들어 졌습니다.<br>배열의 인덱스는 0부터 시작합니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> iNum0 = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> iNum1 = <span class="number">10</span>;</div><div class="line">	<span class="keyword">int</span> iNum2 = <span class="number">20</span>;</div><div class="line">	<span class="keyword">int</span> iNum3 = <span class="number">30</span>;</div><div class="line">	<span class="keyword">int</span> iNum4 = <span class="number">40</span>;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iNum0 = %d\n"</span>, iNum0);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iNum1 = %d\n"</span>, iNum1);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iNum2 = %d\n"</span>, iNum2);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iNum3 = %d\n"</span>, iNum3);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iNum4 = %d\n"</span>, iNum4);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위에서 변수를 5개를 만들었습니다. 변수의 이름이 틀리니 출력하려면 위와 같이 printf문을 5번을 사용해야 합니다. 변수명 뒤를 변수로 만들어 for 문으로 돌리면 되겠다 생각한 사람도 있을 겁니다. 하지만 그렇게 사용할 수 없습니다. 동적으로 변수명을 사용 하려고 배열을 만든겁니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> inum[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iNum[0] = %d\n"</span>, iNum[<span class="number">0</span>]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iNum[1] = %d\n"</span>, iNum[<span class="number">1</span>]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iNum[2] = %d\n"</span>, iNum[<span class="number">2</span>]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iNum[3] = %d\n"</span>, iNum[<span class="number">3</span>]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iNum[4] = %d\n"</span>, iNum[<span class="number">4</span>]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for문을 사용해 볼까요?<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> inum[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"iNum[%d] = %d\n"</span>, i, iNum[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위처럼 반복문을 사용하면 쉽게 배열을 출력할 수 있습니다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int 4바이트 최대 표시 가능한 수 약 ± 21억</div><div class="line">100번지</div><div class="line">  0123</div><div class="line"> |----|</div><div class="line">2,147,483,647</div></pre></td></tr></table></figure>
<p>정수형 배열은 4바이트씩 저장됩니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> inum[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">		iNum[i] = iNum[i] + <span class="number">10</span>;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"iNum[%d] = %d\n"</span>, i, iNum[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>또한 값을 쉽게 변경 할 수도 있습니다.</p>
<h3 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h3><p>c언어에서는 문자열 자료는 없습니다.<br>배열과 포인터를 이용해서 문자열처럼 사용합니다.</p>
<p>char 자료형은 문자 1자를 저장할 수 있습니다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">char 1바이트 영어1문자 한글은 3바이트가 있어야 한글자 표시 가능.</div><div class="line">100번지</div><div class="line">  0123456789AB</div><div class="line">  |-----------|</div><div class="line">  HELLO WORLD␀</div></pre></td></tr></table></figure>
<p>char 자료형을 배열로 선언 한다면 문자열을 담을 수 있습니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> arrStr[<span class="number">12</span>] = <span class="string">"hello world"</span>;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arrStr);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>배열의 크기를 지정할 때는 마지막에 종료문자<code>\0</code>가 항상 포함되기 때문 사용할 크기 +1을 해주어야 합니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> arrStr[] = <span class="string">"안녕하세요. 배열을 사용해서 출력했습니다."</span>;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arrStr);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>배열의 크기를 지정하지 않고 초기화 하면 자동으로 배열의 크기가 지정됩니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> arrChar[<span class="number">100</span>] = <span class="string">"배열로 문자열 처럼 사용합니다."</span></div><div class="line">	<span class="keyword">char</span> *pChar = <span class="string">"포인터를 이용해서도 문자열 처럼 사용할 수 있습니다."</span></div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arrChar);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, pChar);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="변수의-범위"><a href="#변수의-범위" class="headerlink" title="변수의 범위"></a>변수의 범위</h3><p>변수에는 글로벌변수, 로컬변수, 포인터변수가 있습니다.<br>로컬변수: 지역변수라고도 합니다. 함수 내에서만 유효하고 함수가 종료되면 없어 집니다.<br>글로별 변수: 프로그램 전체 어디서나 사용이 가능합니다. 프로그램이 종료되면 없어집니다.<br>포인터 변수: 메모리 주소를 담을 수 있는 변수이며 메모리의 주소가 유효 하다면 범위 제한을 받지 않습니다. 포인터 변수는 사용 범위 제한을 받지 않지만 함수가 종료되면 사라집니다.</p>
<h3 id="포인터"><a href="#포인터" class="headerlink" title="포인터"></a>포인터</h3><p>포인터는 포인터 변수라고 합니다. 부르기 쉽게 포인터라고 줄여서 말합니다. 변수명 앞에 <code>*</code>을 붙여주면 포인터 변수가 됩니다.<br>포인터 변수는 메모리의 주소를 담는 변수 입니다.<br>포인터 변수는 글로벌 변수와 로컬변수의 장점을 가지고 있습니다.<br>어디서든 사용할 수 있고 함수가 종료되면 없어 집니다. 이런 장점 때문에 포인터 변수를 많이 사용합니다.</p>
<p>함수는 리턴값을 하나만 전달 할 수 있습니다. 여러개를 전달 할 수 없습니다.<br>그래서 변수를 글로벌 변수로 선언해서 함수 안에서 처리를 합니다.<br>글로벌 변수를 쓰지 못할 상황이라면 포인터를 사용할 수 있습니다.<br>함수의 인자로 포인터 변수를 넘겨 줄수 있고, 함수의 리턴값으로 포인터 변수를 사용할 수 있기 때문에 함수안과 밖에서 자유롭게 주소값이 가리키는 상대주소의 데이터를 사용하고 수정할 수 있습니다. c언어에만 있는 특별한 기능입니다. </p>
<blockquote>
<p>글로벌 변수는 작은 단위의 프로그램에서는 문제가 없지만 규모가 큰 프로그램에서는 사용을 자제하는 편입니다.<br>왜냐하면 함수안에 있는 변수는 함수가 종료되면 바로 없어 지지만 글로벌 변수는 프로그램을 종료 할 때까지 남아 있기 때문이고, 수백명의 프로그래머가 프로그램을 작성 하다보면 변경되서는 안될 값이 변경 될수 있기 때문입니다.<br>예를 들어서 물건의 값을 계산하는 프로그램을 만든다 가정해 보죠.<br>새우깡 100 원 수량 2개 합계금액 200원<br>합계금액을 저장해야 하는데, 합계금액이 글로벌 변수 입니다. 혼자서 프로그램을 사용한다면 문제가 없겠지만 편의 점에 있는 포스 프로그램이라고 생각해 보세요. 전국에서 동시에 합계금액을 공유해서 쓴다면 … 어떤 값이 들어 갈지 아무도 모르는 거죠. 그래서 환경변수 이외에는 글로벌 변수를 잘 쓰지 않습니다. 쓰지 말라는 것이 아니라 알고 쓰라는 겁니다.</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> *pSum)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> iNum = <span class="number">10</span>;</div><div class="line">	<span class="keyword">int</span> iNum2 = <span class="number">20</span>;</div><div class="line">	<span class="keyword">int</span> iSum = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// pSum을 선언 iSum의 주소를 pSum에 저장</span></div><div class="line">	<span class="keyword">int</span> *pSum = &amp;iSum;  <span class="comment">// 1: 선언과 정의 </span></div><div class="line"><span class="comment">// iSum 주소를 출력</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"iSum 주소 : %p \n"</span>, &amp;iSum); 	</div><div class="line"><span class="comment">// :2 pSum이 가리키는 주소를 출력 </span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"pSum이 가리키는 주소 : %p \n"</span>, pSum); 	</div><div class="line"><span class="comment">// pSum 주소를 출력</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"pSum의 주소: %p \n"</span>, &amp;pSum); </div><div class="line"><span class="comment">// :3 pSum이 가리키는 주소의 값을 출력 </span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"pSum이 가리키는 주소에 들어있는 값 : %d \n"</span>, *pSum); 	</div><div class="line"></div><div class="line">	iSum = iNum + iNum2;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"프로그램에서 iSum 변수에 값을 저장 : %d\n"</span>, iSum);</div><div class="line"></div><div class="line">	myAdd(pSum); <span class="comment">// 2: 주소를 인자로 전달</span></div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"함수에서 글로벌변수를 지정하지 않고 주소를 사용해 값을 저장 : %d\n"</span>, iSum);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> *pointerVariable)</span></span>&#123; <span class="comment">// 인자를 주소로 받음.</span></div><div class="line">	<span class="keyword">int</span> iNum = <span class="number">40</span>;</div><div class="line">	<span class="keyword">int</span> iNum2 = <span class="number">50</span>;</div><div class="line">	*pointerVariable = iNum + iNum2; <span class="comment">//:4 주소에 값을 저장 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">iSum 주소 : 0x7ffeec95c774</div><div class="line">pSum이 가리키는 주소 : 0x7ffeec95c774</div><div class="line">pSum의 주소: 0x7ffeec95c768</div><div class="line">pSum이 가리키는 주소에 들어있는 값 : 0</div><div class="line">프로그램에서 iSum 변수에 값을 저장 : 30</div><div class="line">함수에서 글로벌변수를 지정하지 않고 주소를 사용해 값을 저장 : 90</div></pre></td></tr></table></figure>
<p>복잡하게 생각하지 마세요.</p>
<ul>
<li>포인터변수를 선언 할때는 변수명 앞에 <code>*</code>붙여서 선언 합니다.<br>  포인터 변수는 주소를 저장하는 변수 이기 때문에 iSum변수의 주소를 대입했습니다. 대입할 때는 주소를 값을 계산해주는 <code>&amp;</code>를 변수명 앞에 붙였습니다. 이렇게 하면 주소가 포인터변수에 저장됩니다.</li>
<li>*pSum 변수는 이제 어디서든지 사용할 수 있습니다.</li>
<li>pSum이라고 사용하면 주소값을 사용하고</li>
<li>*pointerVariable이라고 사용하면 주소가 가리키는 주소의 값을 사용합니다.</li>
<li>실제 같은 말이 반복되기 때문에 헛갈립니다. <ul>
<li>:1 선언하고</li>
<li>:2 주소값을 사용하고</li>
<li>:3 주소가 가리키는 값을 사용합니다.</li>
<li>:4 주소값만으로 어디서든지 주소가 가리키는 값을 사용가능.</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">long 8바이트 최대 표시 가능한 수 약 ± 9백2십경</div><div class="line">100번지</div><div class="line">  01234567</div><div class="line"> |--------|</div><div class="line">9,223,372,036,854,775,807</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 배열 </tag>
            
            <tag> 포인터 </tag>
            
            <tag> 문자열 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASCII 문자]]></title>
      <url>/2017/11/13/c-ascii%EB%AC%B8%EC%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="ASCII-문자"><a href="#ASCII-문자" class="headerlink" title="ASCII 문자"></a>ASCII 문자</h3><p>아스키 문자는 정수 0~127까지의 숫자를 문자로 대체해서 사용하는 약속 기호입니다.<br>0x0~1F 과 0x7F는 제어 문자가 들어있습니다.</p>
<h3 id="제어문자"><a href="#제어문자" class="headerlink" title="제어문자"></a>제어문자</h3><table>
<thead>
<tr>
<th>DEC</th>
<th>HEX</th>
<th>문자</th>
<th>설명</th>
<th>DEC</th>
<th>HEX</th>
<th>문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0x00</td>
<td>NUL</td>
<td>NUl문자</td>
<td>17</td>
<td>0x11</td>
<td>DC1</td>
<td>device control 1 </td>
</tr>
<tr>
<td>1</td>
<td>0x01</td>
<td>SOH</td>
<td>start of header</td>
<td>18</td>
<td>0x12</td>
<td>DC2</td>
<td>device control 2</td>
</tr>
<tr>
<td>2</td>
<td>0x02</td>
<td>STX</td>
<td>start of text</td>
<td>19</td>
<td>0x13</td>
<td>DC3</td>
<td>device control 3</td>
</tr>
<tr>
<td>3</td>
<td>0x03</td>
<td>ETX</td>
<td>end of text</td>
<td>20</td>
<td>0x14</td>
<td>DC4</td>
<td>device control 4</td>
</tr>
<tr>
<td>4</td>
<td>0x04</td>
<td>EOT</td>
<td>end of transmission</td>
<td>21</td>
<td>0x15</td>
<td>NAK</td>
<td>negative ack</td>
</tr>
<tr>
<td>5</td>
<td>0x05</td>
<td>ENQ</td>
<td>enquiry</td>
<td>22</td>
<td>0x16</td>
<td>SYN</td>
<td>synchronous idle</td>
</tr>
<tr>
<td>6</td>
<td>0x06</td>
<td>ACK</td>
<td>acknowlegment</td>
<td>23</td>
<td>0x17</td>
<td>ETB</td>
<td>end of Transmission block</td>
</tr>
<tr>
<td>7</td>
<td>0x07</td>
<td>BEL</td>
<td>bell</td>
<td>24</td>
<td>0x18</td>
<td>CAN</td>
<td>cancle</td>
</tr>
<tr>
<td>8</td>
<td>0x08</td>
<td>BS</td>
<td>backspace</td>
<td>25</td>
<td>0x19</td>
<td>EM</td>
<td>end of medium</td>
</tr>
<tr>
<td>9</td>
<td>0x09</td>
<td>HT</td>
<td>horizontal tab</td>
<td>26</td>
<td>0x1a</td>
<td>SUB</td>
<td>substitute</td>
</tr>
<tr>
<td>10</td>
<td>0x0a</td>
<td>LF</td>
<td>line feed</td>
<td>27</td>
<td>0x1b</td>
<td>ESC</td>
<td>escape</td>
</tr>
<tr>
<td>11</td>
<td>0x0b</td>
<td>VT</td>
<td>vertical tab</td>
<td>28</td>
<td>0x1c</td>
<td>FS</td>
<td>file separator</td>
</tr>
<tr>
<td>12</td>
<td>0x0c</td>
<td>FF</td>
<td>form feed</td>
<td>29</td>
<td>0x1d</td>
<td>GS</td>
<td>group separator</td>
</tr>
<tr>
<td>13</td>
<td>0x0d</td>
<td>CR</td>
<td>carriage return</td>
<td>30</td>
<td>0x1e</td>
<td>RS</td>
<td>record separator</td>
</tr>
<tr>
<td>14</td>
<td>0x0e</td>
<td>SO</td>
<td>shift out</td>
<td>31</td>
<td>0x1f</td>
<td>US</td>
<td>Unit Separator</td>
</tr>
<tr>
<td>15</td>
<td>0x0f</td>
<td>SI</td>
<td>shift in</td>
<td>127</td>
<td>0x7f</td>
<td>DEL</td>
<td>delete</td>
</tr>
<tr>
<td>16</td>
<td>0x10</td>
<td>DLE</td>
<td>data link escape</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>제어문자는 무척 많이 사용합니다. 설명을 영어 그대로 쓴건 검색시 사용하세요.<br>각종 통신시 전문을 주고 받을때, 키보드및 프린터 제어등등..</p>
<ul>
<li>0x30~0x39는 숫자</li>
<li>0x41~0x5A는 대문자</li>
<li>0x61~0x7A는 대문자</li>
<li>나머지는 특수문자가 들어 있습니다.<br>제어 문자는 출력할 수 없지만 나머지는 출력이 가능합니다.<br>참고로 0x20는 스페이스바(공백)이 출력되므로 아무것도 없는것 같이 보입니다.</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> iNum = <span class="number">32</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\t0x%04X\t%c\n"</span>, iNum, iNum, iNum);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 예제는 10진수 32를 10진수, 16진수, 문자로 출력하는 프로그램입니다.<br>공백을 출력하기 때문에 문자는 보지지 않습니다. 반복문을 이용해 126까지 출력해 봅시다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\t0x%04X\t%c\n"</span>, i, i, i);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>제목도 달아 줄까요?</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"        ASCII Table"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"==========================="</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"10진    16진    문자"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"---------------------------"</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\t0x%04X\t%c\n"</span>, i, i, i);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>너무 길게 나오니 한줄에 3개씩 나오게 찍읍시다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"                            ASCII Table"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"====================================================================="</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"10진    16진    문자    10진    16진    문자    10진    16진    문자"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"---------------------------------------------------------------------"</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\t0x%04X\t%c\t"</span>, i, i, i);</div><div class="line">		<span class="keyword">if</span> ((i%<span class="number">3</span>)==<span class="number">1</span>) &#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"                            ASCII Table"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"====================================================================="</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"10진    16진    문자    10진    16진    문자    10진    16진    문자"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"---------------------------------------------------------------------"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i=i+<span class="number">32</span>) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\t0x%04X\t%c\t"</span>, i, i, i);</div><div class="line">		cnt = cnt +<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (cnt == <span class="number">3</span>)&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">			cnt = <span class="number">0</span>;</div><div class="line">			i = i - <span class="number">95</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>요즘은 영문os와 windows를 제외한 한글 os는 unicode를 사용합니다.<br>unicode안에 ascii code도 포함되어 있지만 확장아스키는 사용하는 폰트에 따라 나오지 않을 수 있습니다.<br>unicode를 출력해 보고 싶으면 127을 16777216 로 바꿔 출력해 보세요.<br>스크롤이 많을 테니 꼭 <code>| less</code> 를 이용하세요. <code>Ctrl+c</code></p>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[약수와 배수]]></title>
      <url>/2017/11/13/math-%EC%95%BD%EC%88%98%EC%99%80%EB%B0%B0%EC%88%98/</url>
      <content type="html"><![CDATA[<h3 id="약수"><a href="#약수" class="headerlink" title="약수"></a>약수</h3><h4 id="약수란-나누어-떨어지게-하는-수를-말합니다"><a href="#약수란-나누어-떨어지게-하는-수를-말합니다" class="headerlink" title="약수란 나누어 떨어지게 하는 수를 말합니다."></a>약수란 나누어 떨어지게 하는 수를 말합니다.</h4><p>어떤 수를 나누어 0이 되는 수를 약수라고 합니다.</p>
<ul>
<li>4는 1로 나누어 떨어 집니다.<ul>
<li>1은 4의 약수 입니다.</li>
</ul>
</li>
<li>4는 2로 나누어 떨어 집니다.<ul>
<li>2는 4의 약수 입니다.</li>
</ul>
</li>
<li>4는 3으로 나누어 떨어지지 않습니다.<ul>
<li>3은 4의 약수가 아닙니다.</li>
</ul>
</li>
<li>4는 4로 나누어 떨어 집니다.<ul>
<li>4는 4의 약수입니다. </li>
</ul>
</li>
<li>따라서 1, 2, 4는 4의 약수 입니다. </li>
</ul>
<p>약수는 위와 같이 1부터 약수를 찾는 값까지 나누어 떨어지는지 확인후 나누어 떨어지는 수를 적어 줍니다.<br>원리를 알았으니 컴퓨터에게 시켜 보죠.<br>대충 프로그램 계획을 만들어 봅시다.</p>
<ol>
<li>먼저 값을 입력 받습니다. </li>
<li>나눌값 변수에 저장합니다.</li>
<li>나눌값이 나눌수와 같으면 빠져 나갑니다.</li>
<li>입력받은 수를 1부터 나누어서 몫이 0이면</li>
<li>약수이므로 출력하고 나눌수를 1증가시켜 반복</li>
<li>0이 아니면 입력받은수를 1증가시켜 반복</li>
<li>플로우 차트를 그려서 잘 돌아갈지 확인 합니다.</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">시작</div><div class="line">입력 입력값n, 나눌수i</div><div class="line"></div><div class="line">반복 조건 i=1;&lt;=n i++</div><div class="line">	조건 n % i== 0</div><div class="line">	출력i</div><div class="line">반복</div><div class="line">	출력</div><div class="line">종료</div></pre></td></tr></table></figure>
<p>프로그램 언어로 코딩합니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i,n;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"값을 입력하세요 : "</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		<span class="keyword">if</span>(n%i==<span class="number">0</span>)</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위 프로그램은 모든수를 나누어 약수인지 아닌지 확인을 합니다.</p>
<p>컴퓨터로 계산하기 때문에 엄청 빠릅니다. 1초도 걸리지 않지만 좀더 빠른 알고리즘을 적용할 수도 있습니다.</p>
<ul>
<li>12를 1로 나누어 떨어지면 1을 왼쪽에 몫12를 오른쪽에 적어 줍니다. 왼쪽 값에 1을 더하고 오른쪽 값 중에서 제일 작은 수와 비교해서 오른쪽 값이 크면 계속 진행합니다. 같으면 종료합니다.</li>
<li>12를 2로 나누어 떨어지면 2를 왼쪽에 몫6을 오른쪽에 적어 줍니다.왼쪽 값에 1을 더하고 오른쪽 값 중에서 제일 작은 수와 비교해서 오른쪽 값이 크면 계속 진행합니다.같으면 종료합니다.</li>
<li>12를 3으로 나누어 떨어지면 3을 왼쪽에 몫4를 오른쪽에 적어 줍니다.왼쪽 값에 1을 더하고 오른쪽 값 중에서 제일 작은 수와 비교해서 오른쪽 값이 크면 계속 진행합니다. 같으면 종료합니다. 3+1 = 4 같으니 종료합니다.</li>
<li>왼쪽값과 오른쪽값을 합치고 중복된 수가 있다면 하나만 씁니다. </li>
<li>작은 수 부터 출력합니다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1         12</div><div class="line">2         6</div><div class="line">3         4</div><div class="line"></div><div class="line">[1, 2, 3, 4, 6, 12]</div></pre></td></tr></table></figure>
<p>12번 나누어야 할 것을 3번만에 끝냈습니다.</p>
<p>프로그래밍 계획을 세워 봅시다.</p>
<ol>
<li>먼저 값을 입력을 받습니다.</li>
<li>입력받은 값을 1부터 나누어 떨어지면 나눈값을 배열1에 몫을 배열2에 저장합니다.<ul>
<li>배열은 여러개의 값을 저장할 수 있는 변수입니다. 수학에서 집합과 같습니다.</li>
</ul>
</li>
<li>나눈값에 1을 더해 배열2의 제일 작은값과 비교해서 같거나 배열2의 값이 크면 반복합니다.</li>
<li>그렇지 않으면 배열1 과 배열2 값을 배열3에 합칩니다.</li>
<li>배열3을 정렬합니다.</li>
<li>배열3을 출력합니다.</li>
</ol>
<h3 id="배수"><a href="#배수" class="headerlink" title="배수"></a>배수</h3><p>배수는 한배, 두배할 때 수의 배를 말합니다.</p>
<p>2의 1배는 2입니다.<br>2의 2배는 2가 둘이므로 2 X 2 = 4입니다.<br>2의 3배는 2가 셋이므로 2 X 2 X 2= 8입니다.</p>
<p>3은 3배는 얼마일까요?<br>3 X 3 X 3 = 27입니다.</p>
<p>배수가 많을땐 이렇게 표기 합니다.<br>2 X 2 X 2 X 2 X 2 X 2 = 2의 6승이라 부르고 컴퓨터에서는 <code>2^6</code> 이렇게 쓰고 \( 2^6 \) 으로 표기 합니다.<br><code>^</code>연산자는 지원하는 컴파일러도 있도 지원하지 않는 컴파일러도 있습니다.<br>c언어는 <code>^</code>연산자를 지원하지 않고 pow(밑,지수)함수를 이용합니다.<br>pow() 함수는 math.h라이브러리에 있습니다.<br>또한 밑과, 지수는 자료형이 double이어야 합니다.<br>\(2^{1000} \)은 얼마일까요? c언어로 작성해 보세요. 몇번의 오류를 거쳐야 할 겁니다.<br><code>#include &lt;math.h&gt;</code><br>변수를 선언 할때 double로 자료형을 만들어야 합니다.<br>실수를 정수로 바꾸려면 <code>(int) 실수값</code><br>pow 함수를 쓰지 않고 직접 pow함수처럼 만들어 보세요.<br>for문으로 승수 만큼 반복하면 됩니다. 직접 해보세요. </p>
]]></content>
      
        <categories>
            
            <category> 전산수학기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 약수 </tag>
            
            <tag> 배수 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C언어 목차]]></title>
      <url>/2017/11/12/c-%EB%AA%A9%EC%B0%A8/</url>
      <content type="html"><![CDATA[<h3 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h3><h3 id="c언어-기초"><a href="#c언어-기초" class="headerlink" title="c언어 기초"></a>c언어 기초</h3><p>c언어는 가장 기초가 되는 프로그래밍 언어로 c++, objective c, java, python등의 언어로 접근하기 위한 필수 프로그램입니다.</p>
<p>shell 프로그래밍으로도 프로그램 작성이 가능하지만 c언어가 더 강력하고 빠릅니다. c언어가 빠르고 강력하지만 라이브러리가 많이 부족한 편입니다. 직접 만들어야 하죠. 그래서 python, c++, java를 선호하는 겁니다. 필요하다고 생각되는건 누군가 이미 만들어 놨기 때문이죠.</p>
<p>이번에 진행하는 c언어는 linux에서 gcc, vim, bash shell을 이용해 진행됩니다. 조금 산만 할 수도 있지만 난이도를 낮추고 모두를 설명하는 것이 프로그래밍의 숲을 볼 수 있는 방법인것 같습니다. Terminal이 아닌 윈도우에서 GUI에디터로 프로그래밍을 하면 C언어의 본래 의미를 찾기 힘듭니다. 재미도 없구요. CUI의 못생긴 화면에서 프로그래밍의 재미를 느껴보세요. GUI보다 많은 자유도와 기능을 사용할 수 있습니다.</p>
<h3 id="실습환경-설정"><a href="#실습환경-설정" class="headerlink" title="실습환경 설정"></a>실습환경 설정</h3><p>(맥사용자는 Terminal과 vim을 사용할 수 있다는 전제하에 패스해도 됨.)</p>
<ol>
<li>virtualbox에 centos설치 - Centos참조</li>
<li>gvim 설치및 vimrc 세팅 - vim참조</li>
<li>vim 기본 사용법 - vim참조</li>
</ol>
<h3 id="c언어를-시작하며"><a href="#c언어를-시작하며" class="headerlink" title="c언어를 시작하며"></a>c언어를 시작하며</h3><ol>
<li>기본적으로 알아 두면 좋은 내용들을 정리 했습니다.</li>
</ol>
<h3 id="화면에-글자-출력하기"><a href="#화면에-글자-출력하기" class="headerlink" title="화면에 글자 출력하기"></a>화면에 글자 출력하기</h3><ol>
<li>putchar()</li>
<li>puts()</li>
<li>printf()</li>
</ol>
<h3 id="간단한-계산하기"><a href="#간단한-계산하기" class="headerlink" title="간단한 계산하기"></a>간단한 계산하기</h3><ol>
<li>printf 함수를 이용한 사칙연산</li>
<li>변수와 상수를 사용.</li>
<li>자료형, 연산자</li>
</ol>
<h3 id="for-문"><a href="#for-문" class="headerlink" title="for 문"></a>for 문</h3><ol>
<li>for</li>
</ol>
<h3 id="배열과-포인터"><a href="#배열과-포인터" class="headerlink" title="배열과 포인터"></a>배열과 포인터</h3><ol>
<li>배열</li>
<li>문자열</li>
<li>포인터</li>
</ol>
<h3 id="키보드로-입력-받기"><a href="#키보드로-입력-받기" class="headerlink" title="키보드로 입력 받기"></a>키보드로 입력 받기</h3><ol>
<li>getchar()</li>
<li>gets()</li>
<li>scanf()</li>
<li>getch()</li>
</ol>
<h3 id="if문-사용하기"><a href="#if문-사용하기" class="headerlink" title="if문 사용하기"></a>if문 사용하기</h3><ol>
<li>if</li>
<li>if~else</li>
<li>if~else if</li>
</ol>
<h3 id="while-문"><a href="#while-문" class="headerlink" title="while 문"></a>while 문</h3><ol>
<li>while</li>
<li>do~while</li>
</ol>
<h3 id="do-while-문"><a href="#do-while-문" class="headerlink" title="do while 문"></a>do while 문</h3><h3 id="switch-case-문-사용하기"><a href="#switch-case-문-사용하기" class="headerlink" title="switch case 문 사용하기"></a>switch case 문 사용하기</h3><h3 id="continue-break-goto-label"><a href="#continue-break-goto-label" class="headerlink" title="continue, break, goto, label"></a>continue, break, goto, label</h3><h3 id="인자로-입력-받기"><a href="#인자로-입력-받기" class="headerlink" title="인자로 입력 받기"></a>인자로 입력 받기</h3><ol>
<li>int main(int argc const char *argv[])</li>
</ol>
<h3 id="파일-입출력"><a href="#파일-입출력" class="headerlink" title="파일 입출력"></a>파일 입출력</h3><ol>
<li>fopen, fclose</li>
</ol>
<h3 id="함수-만들기"><a href="#함수-만들기" class="headerlink" title="함수 만들기"></a>함수 만들기</h3><h3 id="표준-라이브러리"><a href="#표준-라이브러리" class="headerlink" title="표준 라이브러리"></a>표준 라이브러리</h3><h3 id="구조체-사용하기"><a href="#구조체-사용하기" class="headerlink" title="구조체 사용하기"></a>구조체 사용하기</h3><h3 id="유니온"><a href="#유니온" class="headerlink" title="유니온"></a>유니온</h3><h3 id="maloc"><a href="#maloc" class="headerlink" title="maloc"></a>maloc</h3><h3 id="curses"><a href="#curses" class="headerlink" title="curses"></a>curses</h3><h3 id="oracle-연결"><a href="#oracle-연결" class="headerlink" title="oracle 연결"></a>oracle 연결</h3><h3 id="주소록-만들기"><a href="#주소록-만들기" class="headerlink" title="주소록 만들기"></a>주소록 만들기</h3><h3 id="학사관리-만들기"><a href="#학사관리-만들기" class="headerlink" title="학사관리 만들기"></a>학사관리 만들기</h3>]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2017/11/11/python-%EC%84%A4%EC%B9%98/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[c언어를 시작하며]]></title>
      <url>/2017/11/11/c-c%EC%96%B8%EC%96%B4%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<p>기본적으로 알아두어야 할 것을 정리 해봤습니다.</p>
<h3 id="C언어의-역사"><a href="#C언어의-역사" class="headerlink" title="C언어의 역사"></a>C언어의 역사</h3><ul>
<li>1963년 - ALGOL 60에서 CPL이 파생</li>
<li>1969년 - BCPL 개발</li>
<li>1970년 - B 언어 개발</li>
<li>1972년 - 벨 연구소 (Bell Laboratories) 에 있는 Dennis Ritchie가 B의 후속으로 C 개발</li>
<li>1983년 - 미국 국가 표준 협회(ANSI, American National Standards Institute) 에서 짐 브로디(Jim Brodie) 주축으로 X3J11 위원회 소집</li>
<li>1983년 12월 14일 - ANSI X3.159-1989 라는 공식명칭으로 C 언어 표준 지정</li>
<li>1999년 - C99 표준안이 ISO/IEC 9899:1999라는 명칭으로 출간됨</li>
<li>2000년 5월 - ANSI의 표준으로 C99가 채택됨</li>
<li>2011년 - 12월 8일 C11 표준안이 ISO/IEC 9899:2011라는 명칭으로 출간됨</li>
</ul>
<h3 id="C언어는-모든-프로그램의-기본"><a href="#C언어는-모든-프로그램의-기본" class="headerlink" title="C언어는 모든 프로그램의 기본"></a>C언어는 모든 프로그램의 기본</h3><ul>
<li>c언어는 Asambler로 뼈대를 만들었습니다.<ul>
<li>만들어진 기본 c언어로 각종 명령과 라이브러리를 만들었습니다.</li>
</ul>
</li>
<li>모든 프로그래밍 언어는 c언어로 만듭니다.<ul>
<li>python은 c언어로 기본 뼈대를 만들고</li>
<li>만들어진 python 프로그램으로 각종 함수 및 라이브러리를 만듭니다.</li>
<li>만들어진 python으로 python을 만듭니다. 이름를 pypy라고 붙였습니다.</li>
<li>c++, java, rube, 모든 언어가 똑같습니다.</li>
</ul>
</li>
<li>모든 os는 Asambler로 뼈대를 만들고 c언어로 만듭니다.</li>
</ul>
<h3 id="저급언어"><a href="#저급언어" class="headerlink" title="저급언어"></a>저급언어</h3><p>기계어<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">7F 45 4C 46 01 01 01 00 00 00 00 00 00 00 00 00 </div><div class="line">02 00 03 00 01 00 00 00 35 40 B3 04 2C 00 00 00 </div><div class="line">00 00 00 00 00 00 00 00 34 00 20 00 01 00 00 00 </div><div class="line">00 00 00 00 00 40 B3 04 B2 0C EB 1C 62 00 00 00 </div><div class="line">62 00 00 00 05 00 00 00 00 10 00 00 48 65 6C 6C </div><div class="line">6F 20 77 6F 72 6C 64 0A B9 4C 40 B3 04 93 CD 80 </div><div class="line">EB FB</div></pre></td></tr></table></figure></p>
<p>위 소스는 리눅스x86 16bit cpu에서 hello world를 찍는 기계어입니다.<br>64bit cpu에서는 코딩 불가 위에처럼 528줄 이나 써야 되네요. ^^;</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/TgKgH5abLfg" frameborder="0" allowfullscreen></iframe></div>
<p>8bit apple computer에서 기계어 코딩하는 동영상 입니다.<br>ascii와 hello world를 힘들게 찍네요.<br>appleII는 롬베이직이 바로 떴었는데…</p>
<p>어셈블리어</p>
<figure class="highlight plain"><figcaption><span>어셈블리어 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">section     .text</div><div class="line">global      _start                 ;must be declared for linker (ld)</div><div class="line"></div><div class="line">_start:                            ;tell linker entry point</div><div class="line"></div><div class="line">    mov     edx,len                ;message length</div><div class="line">    mov     ecx,msg                ;message to write</div><div class="line">    mov     ebx,1                  ;file descriptor (stdout)</div><div class="line">    mov     eax,4                  ;system call number (sys_write)</div><div class="line">    int     0x80                   ;call kernel</div><div class="line"></div><div class="line">    mov     eax,1                  ;system call number (sys_exit)</div><div class="line">    int     0x80                   ;call kernel</div><div class="line"></div><div class="line">section     .data</div><div class="line"></div><div class="line">msg     db  &apos;Hello, world!&apos;,0xa    ;our dear string</div><div class="line">len     equ $ - msg                ;length of our dear string</div></pre></td></tr></table></figure>
<p>위 소스는 hello world를 찍는 어셈블리어 소스 입니다.</p>
<h3 id="고급언어"><a href="#고급언어" class="headerlink" title="고급언어"></a>고급언어</h3><p>algol<br>c<br>perl<br>c++<br>java<br>python</p>
<h3 id="c-언어로-hello-world를-출력하는-소스"><a href="#c-언어로-hello-world를-출력하는-소스" class="headerlink" title="c 언어로 hello world를 출력하는 소스"></a>c 언어로 hello world를 출력하는 소스</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;		//전처리 표준 출력을 위해 호출</span></span></div><div class="line">						<span class="comment">//구조체는 사용안하므로 안썼음.</span></div><div class="line">						<span class="comment">//함수선언 사용자 함수가 없으므로 안썼음.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>			<span class="comment">// 메인함수</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"hello world!\n"</span>);		<span class="comment">//프로그램 작성 </span></div><div class="line">	<span class="comment">// 위 함수도 약속에 의해 작성함.</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;			<span class="comment">// 리턴값</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="python으로-hello-world를-출력하는-소스"><a href="#python으로-hello-world를-출력하는-소스" class="headerlink" title="python으로 hello world를 출력하는 소스"></a>python으로 hello world를 출력하는 소스</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure>
<p><strong>발전된 고급언어 일수록 사용하기가 훨씬 쉽습니다.</strong></p>
<h3 id="컴파일러와-인터프리터"><a href="#컴파일러와-인터프리터" class="headerlink" title="컴파일러와 인터프리터"></a>컴파일러와 인터프리터</h3><p>컴파일러는 소스 전체를 실행 가능한 기계어로 바꾸줍니다.<br>assmbly, c, java, c++ 등</p>
<p>인터프리터는 소스를 실행시 인터프리터가 한줄씩 기계어로 번역하며 실행합니다.<br>perl, python, ruby, html, javascript 등</p>
<h3 id="인간의-언어"><a href="#인간의-언어" class="headerlink" title="인간의 언어"></a>인간의 언어</h3><p>인간의 언어는 단어와 문장이 있습니다.<br>문장을 구성하는 요소도 있고 형식도 있습니다.<br>형식이란 말하는 순서를 뜻하죠.<br>순서를 틀리게 말해도 대부분은 무슨 뜻인지 이해 할 수 있습니다.<br>인간이기 때문에 상황을 파악하고, 오류를 수정해서 듣기 때문입니다. </p>
<h3 id="단어"><a href="#단어" class="headerlink" title="단어"></a>단어</h3><table>
<thead>
<tr>
<th>명사</th>
<th>동사</th>
</tr>
</thead>
<tbody>
<tr>
<td>사과</td>
<td>먹다</td>
</tr>
<tr>
<td>apple</td>
<td>eat </td>
</tr>
<tr>
<td>나</td>
<td>오다</td>
</tr>
<tr>
<td>I</td>
<td>입다</td>
</tr>
</tbody>
</table>
<h3 id="문장의-형식"><a href="#문장의-형식" class="headerlink" title="문장의 형식"></a>문장의 형식</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">한국어	: 주어 + 목적어 + 동사</div><div class="line">형식      나(는)  사과(를) 먹(는)다</div><div class="line">(비형식)  나 먹다 사과</div><div class="line">(비형식)  몸짓으로 전달</div><div class="line"></div><div class="line">영어	: 주어 + 동사 + 목적어 </div><div class="line">형식      I  (am) eat(ing) (a) apple</div><div class="line">(비형식)  I apple eat</div></pre></td></tr></table></figure>
<p>인간은 위와 같이 단어와 형식을 지키지 않은 비형식으로 말해도 이해 할 수 있습니다.</p>
<p>하지만 프로그래밍 언어는 철저하게 형식과 문법을 지키지 않으면 오류가 납니다.</p>
<h3 id="C-언어"><a href="#C-언어" class="headerlink" title="C 언어"></a>C 언어</h3><p>C 언어도 형식과 단어가 있습니다.<br>일반적으로 형식은 스트럭쳐(structure), 단어는 토큰(Token)라고 부릅니다.</p>
<h3 id="형식"><a href="#형식" class="headerlink" title="형식"></a>형식</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">전처리</div><div class="line">구조체</div><div class="line">함수선언</div><div class="line"></div><div class="line">반환형 main(인자)</div><div class="line">&#123;</div><div class="line">	프로그램 기술	</div><div class="line">	반환값;</div><div class="line">&#125;</div><div class="line">반환형 함수명()</div><div class="line">&#123;</div><div class="line">	반환값;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>형식은 위와 같이 쓰자고 약속 했습니다.</li>
<li>처음에 전처리, 구조체, 함수선언, 메인함수, 선언한 함수 본체를 기술하자고 약속한 겁니다.</li>
<li>다른것은 필요 없으면 안써도 되지만 메인함수는 반드시 쓰자. </li>
<li>함수를 쓸때는 함수명 앞에 반환자료형을 꼭 쓰자.</li>
<li>메인함수안에 인자가 필요하면 인자를 쓰고, 없으면 안써도 되지만 void를 넣자. </li>
<li>프로그램은 중괄호 안에 기술하자.</li>
<li>함수가 끝나기 전에 반환값이 있다면 반환값을 쓰자.</li>
<li>명령이 끝나면 반드시 <code>;</code>를 쓰자.</li>
</ul>
<p>이렇게 약속을 했는데 안지키면 안되겠죠.</p>
<p>아래는 약속에 맞춰서 최소한의 코딩을 한겁니다.</p>
<figure class="highlight c"><figcaption><span>c언어</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;		//전처리 표준 출력을 위해 호출</span></span></div><div class="line">						<span class="comment">//구조체는 사용안하므로 안썼음.</span></div><div class="line">						<span class="comment">//함수선언 사용자 함수가 없으므로 안썼음.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>			<span class="comment">// 메인함수</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"hello world!\n"</span>);		<span class="comment">//프로그램 작성 </span></div><div class="line">	<span class="comment">// 위 함수도 약속에 의해 작성함.</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;			<span class="comment">// 리턴값</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="토큰"><a href="#토큰" class="headerlink" title="토큰"></a>토큰</h3><p>토큰은 표식(징표, 표시)이라고 할 수 있습니다.<br>버스, 지하철을 탈때 토큰을 내고 타죠? (현금, 카드찍는 행위, 탑승티켓등…)<br>상품을 구매할때 화패, 카드, 쿠폰을 내고 구매를 합니다. 이렇게 의미(가치)가 표시된 것들을 통틀어 영어로 토큰이라고 부릅니다.</p>
<p>C언어의 토큰은 keyword(예약어), 연산자, 구두점(부호), 식별자, 상수가 있습니다.<br>32개의 예약어, 40여개의 연산자, 10개의 구두점, 여러분이 생성하는 함수명, 변수명, 상수명이 다 입니다.<br>외울 필요도 없습니다. 쓰다 보면 저절로 외워집니다.<br>어떤것이 있는지 한번 훑어 보세요. </p>
<h3 id="예약어"><a href="#예약어" class="headerlink" title="예약어"></a>예약어</h3><table>
<thead>
<tr>
<th>no</th>
<th>keyword</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>auto</td>
<td>기본적인 변수의 저장방식을 나타내는 키워드</td>
</tr>
<tr>
<td>2</td>
<td>break</td>
<td>for, while, switch, do…while문을 조건없이 마치는 명령</td>
</tr>
<tr>
<td>3</td>
<td>case</td>
<td>switch문 내에서 사용되는 명령</td>
</tr>
<tr>
<td>4</td>
<td>char</td>
<td>문자를 저항하는 데이터형</td>
</tr>
<tr>
<td>5</td>
<td>const</td>
<td>상수 지정자</td>
</tr>
<tr>
<td>6</td>
<td>continue</td>
<td>for, while, switch, do…while문을 다음 반복동작으로 진행시키는 명령</td>
</tr>
<tr>
<td>7</td>
<td>default</td>
<td>case문에 일치하지 않는 경우를 처리하기 위해 switch문에서 사용되는 명령</td>
</tr>
<tr>
<td>8</td>
<td>do</td>
<td>while문과 함께 사용되는 순환명령. 순환문은 최소한 한번 실행됨.</td>
</tr>
<tr>
<td>9</td>
<td>double</td>
<td>배정도 부동 소수형값을 저장할 수 있는 데이터형</td>
</tr>
<tr>
<td>10</td>
<td>else</td>
<td>if문이 FALSE 때 실행되는 선택적인 문장을 나타내는 명령</td>
</tr>
<tr>
<td>11</td>
<td>enum</td>
<td>변수가 특정값만을 받아들이도록 해주는 데이터형</td>
</tr>
<tr>
<td>12</td>
<td>extern</td>
<td>변수가 프로그램의 다른 부분에서 선언된다는 것을 알려주는 데이터 지정자</td>
</tr>
<tr>
<td>13</td>
<td>float</td>
<td>부동 소수형 숫자값을 저장하기 위해 사용되는 데이터형</td>
</tr>
<tr>
<td>14</td>
<td>for</td>
<td>초기화,증가,조건 부분을 가지는 순환명령</td>
</tr>
<tr>
<td>15</td>
<td>goto</td>
<td>정의되어 있는 레이블로 이동시키는 명령</td>
</tr>
<tr>
<td>16</td>
<td>if</td>
<td>TRUE/FALSE의 결과에 따라 프로그램의 제어를 변경하는데 사용되는 명령</td>
</tr>
<tr>
<td>17</td>
<td>int</td>
<td>정수형 값을 저장하는 데 사용되는 데이터형</td>
</tr>
<tr>
<td>18</td>
<td>long</td>
<td>int형보다 큰 정수형 값을 저장하는 데 사용되는 데이터형</td>
</tr>
<tr>
<td>19</td>
<td>register</td>
<td>가능하다면 변수를 레지스터에 저장하도록 지정하는 저장형태 지정자</td>
</tr>
<tr>
<td>20</td>
<td>return</td>
<td>함수를 종료후 호출한함수로 프로그램의 제어와 값을 반환 하는 명령. </td>
</tr>
<tr>
<td>21</td>
<td>short</td>
<td>short 정수형 값을 저장하는 데 사용되는 데이터형.</td>
</tr>
<tr>
<td>22</td>
<td>signed</td>
<td>변수가 양수와 음수값을 모두 저장할 수 있음. </td>
</tr>
<tr>
<td>23</td>
<td>sizeof</td>
<td>항목의 크기를 바이트 단위로 알려주는 연산자</td>
</tr>
<tr>
<td>24</td>
<td>static</td>
<td>컴파일러가 변수의 값을 보존해야 한다는 것을 지정하는 지정자</td>
</tr>
<tr>
<td>25</td>
<td>struct</td>
<td>C에서 어떤 데이터형의 변수를 함께 결합시키는 데 사용되는 키워드</td>
</tr>
<tr>
<td>26</td>
<td>switch</td>
<td>여러 조건을 통해서 프로그램의 흐름을 변경하는 데 사용되는 명령. </td>
</tr>
<tr>
<td>27</td>
<td>typedef</td>
<td>이미 존재하는 변수와 함수의 형태를 새로운 변경하는 지정자</td>
</tr>
<tr>
<td>28</td>
<td>union</td>
<td>여러 개의 변수가 동일한 메모리 영역을 공유하도록 해주는 키워드</td>
</tr>
<tr>
<td>29</td>
<td>unsigned</td>
<td>변수가 양수값만 저장할 수 있다는 것을 지정하는 데 사용되는 지정자.</td>
</tr>
<tr>
<td>30</td>
<td>void</td>
<td>함수의 반환값이 없는 것을 지정하는 데 사용되는 키워드</td>
</tr>
<tr>
<td>31</td>
<td>volatile</td>
<td>변수가 변경될 수 없다는 것을 지정하는 지정자.</td>
</tr>
<tr>
<td>32</td>
<td>while</td>
<td>지정된 조건이 TRUE 한 계속해서 포함된 문장을 실행하는 순환문</td>
</tr>
</tbody>
</table>
<h3 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h3><table>
<thead>
<tr>
<th>우선 순위</th>
<th>결합 방향</th>
<th>연산자(기호)</th>
<th>연산자종류/명</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>→</td>
<td>( ), [ ], ., -&gt;</td>
<td>소괄호, 대괄호, 도트, 포인터</td>
</tr>
<tr>
<td>2</td>
<td>←</td>
<td>(형), sizeof, <code>*</code>(참조), <code>&amp;</code> 주소, <code>++</code>, <code>--</code>, <code>+</code>(부호), <code>-</code>(부호),<code>~</code>, <code>!</code></td>
<td>단항연산자</td>
</tr>
<tr>
<td>3</td>
<td>→</td>
<td><code>*</code>(곱셈), <code>/</code>, <code>%</code></td>
<td>산술연산자</td>
</tr>
<tr>
<td>4</td>
<td>→</td>
<td><code>+</code>, <code>-</code></td>
<td>산술연산자</td>
</tr>
<tr>
<td>5</td>
<td>→</td>
<td><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>
<td>shift연산자</td>
</tr>
<tr>
<td>6</td>
<td>→</td>
<td><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></td>
<td>관계연산자</td>
</tr>
<tr>
<td>7</td>
<td>→</td>
<td><code>==</code>, <code>!=</code></td>
<td>관계연산자</td>
</tr>
<tr>
<td>8</td>
<td>→</td>
<td><code>&amp;</code></td>
<td>비트연산자</td>
</tr>
<tr>
<td>9</td>
<td>→</td>
<td><code>^</code></td>
<td>비트연산자</td>
</tr>
<tr>
<td>10</td>
<td>→</td>
<td>&#124;</td>
<td>비트연산자</td>
</tr>
<tr>
<td>11</td>
<td>→</td>
<td><code>&amp;&amp;</code></td>
<td>논리연산자</td>
</tr>
<tr>
<td>12</td>
<td>→</td>
<td>&#124;&#124;</td>
<td>논리연산자</td>
</tr>
<tr>
<td>13</td>
<td>←</td>
<td><code>?:</code></td>
<td>조건연산자</td>
</tr>
<tr>
<td>14</td>
<td>←</td>
<td><code>=</code>, <code>+-</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&lt;&lt;=</code>,<code>&gt;&gt;=</code>,<code>&amp;=</code>,<code>^=</code>,=&#124;</td>
<td>할당/복합 할당연산자</td>
</tr>
<tr>
<td>15</td>
<td>→</td>
<td><code>,</code></td>
<td>콤마연산자</td>
</tr>
</tbody>
</table>
<p>산술연산자, 논리연사자, 대입연산자, 관계연산자, 비트연산자, 조건연산자, cast연산자, 증감연산자, 기타연산자</p>
<h3 id="구두점"><a href="#구두점" class="headerlink" title="구두점"></a>구두점</h3><table>
<thead>
<tr>
<th>구두점</th>
<th>명칭</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[]</code></td>
<td>bracket, 대괄호</td>
</tr>
<tr>
<td><code>{}</code></td>
<td>brace, 중괄호</td>
</tr>
<tr>
<td><code>()</code></td>
<td>parenthesis, 소괄호</td>
</tr>
<tr>
<td><code>*</code></td>
<td>asterisk, 별표</td>
</tr>
<tr>
<td><code>,</code></td>
<td>comma, 쉼표</td>
</tr>
<tr>
<td><code>;</code></td>
<td>semicolon, 세미콜론</td>
</tr>
<tr>
<td><code>=</code></td>
<td>equal sign</td>
</tr>
<tr>
<td><code>:</code></td>
<td>colon, 콜론</td>
</tr>
<tr>
<td><code>...</code></td>
<td>ellipsis, 생략부호</td>
</tr>
<tr>
<td><code>#</code></td>
<td>sharp, 샵</td>
</tr>
</tbody>
</table>
<h3 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h3><p>주석은 프로그램 소스내에 간단한 설명을 적을 수 있습니다. 자신, 또는 타인이 소스를 분석할 때 도움이 되겠죠. 처음에 프로그램의 설명을 적는것은 프로그래머들 간의 약속 입니다.<br>리눅스에서 head 명령어가 있는 이유 이기도 합니다.<br>주석은 실행 되지 않으며 프로그램 중간중간에 넣어서 사용할 수 있습니다.</p>
<h3 id="한줄-주석"><a href="#한줄-주석" class="headerlink" title="한줄 주석"></a>한줄 주석</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 프로그램명: helloworld</span></div><div class="line"><span class="comment">// 작성자    : 홍길동, abc@google.com</span></div><div class="line"><span class="comment">// 작성일    : 2016-11-04</span></div><div class="line"><span class="comment">// 수정일    : 2017-11-04</span></div><div class="line"><span class="comment">// 사용법    : helloworld [옵션] </span></div><div class="line"><span class="comment">// 설명      : 이 프로그램은 hello wrld를 화면에 출력해주는 프로그램입니다.</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// 이곳에 프로그램을 입력</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>한줄 주석은 위와 같이 사용합니다.<br>줄 맨앞에 // 를 붙이면 됩니다.</p>
<h3 id="여러줄주석"><a href="#여러줄주석" class="headerlink" title="여러줄주석"></a>여러줄주석</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*  </span></div><div class="line"><span class="comment">프로그램명: helloworld</span></div><div class="line"><span class="comment">작성자    : 홍길동, abc@google.com</span></div><div class="line"><span class="comment">작성일    : 2016-11-04</span></div><div class="line"><span class="comment">수정일    : 2017-11-04</span></div><div class="line"><span class="comment">사용법    : helloworld [옵션] </span></div><div class="line"><span class="comment">설명      : 이 프로그램은 hello wrld를 화면에 출력해주는 프로그램입니다.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// 이곳에 프로그램을 입력</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>여러줄 주석은 위와 같이 사용합니다.<br>주석의 시작과 종료 부분에 /* 와 */ 을 써주면 됩니다.<br>주석의 중간에 설명을 추가하기는 편합니다만 한줄 주석을 권장합니다.</p>
<p>vim 에디터를 실행합니다.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi print01.c</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 주석 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[함수 만들기]]></title>
      <url>/2017/11/10/c-%ED%95%A8%EC%88%98/</url>
      <content type="html"><![CDATA[<h3 id="함수만들기"><a href="#함수만들기" class="headerlink" title="함수만들기"></a>함수만들기</h3><p>함수는 모듈이라고 생각하면 됩니다.<br>지금 까지 main 함수에서만 코딩을 했는데요. 함수를 만들어 사용하면 메인 함수가 복잡해지는것을 막을 수 있고, 읽기도 쉬워 집니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // exit(), system()</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMenu</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//함수의 선언</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">scoreSearch</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//함수의 선언</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputScore</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//함수의 선언</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> selectMenu = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(<span class="number">1</span>==<span class="number">1</span>)&#123; <span class="comment">// 무한 반복 종료는 exit()로 종료함.</span></div><div class="line"></div><div class="line">		myMenu(); <span class="comment">// 메뉴 출력 함수.</span></div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"실행할 번호를 입력: "</span>);</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;selectMenu);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (selectMenu == <span class="number">1</span>)&#123;</div><div class="line">			scoreSearch(); <span class="comment">// 조회 함수</span></div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(selectMenu == <span class="number">2</span>)&#123;</div><div class="line">			inputScore(); <span class="comment">// 점수 입력 함수</span></div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(selectMenu == <span class="number">3</span>)&#123;</div><div class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"잘못 입력했습니다.\n"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMenu</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">	system(<span class="string">"clear"</span>); <span class="comment">// 외부 명령을 실행(화면 지우기)</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"     성적관리\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"==================\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"1. 성적조회\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"2. 성적입력\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"3. 프로그램종료\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">scoreSearch</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"성적조회\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputScore</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"성적입력\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 프로그램에서 메인함수를 보면 대부분 제어만을 담당하고 있습니다. 조건문을 사용해서 각각의 함수를 호출하고 있죠. 오류가 있다면 해당 함수에서 수정하면 됩니다.</p>
<h3 id="함수의-기본-사용법"><a href="#함수의-기본-사용법" class="headerlink" title="함수의 기본 사용법"></a>함수의 기본 사용법</h3><h4 id="기본-구문"><a href="#기본-구문" class="headerlink" title="기본 구문"></a>기본 구문</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">반환자료형 함수명([인자],...)&#123;</div><div class="line">	명령;</div><div class="line">	리턴값;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="반환자료형"><a href="#반환자료형" class="headerlink" title="반환자료형 :"></a>반환자료형 :</h4><p>함수가 종료할때 결과를 반환 해야 한다면 반환할 값의 자료형을 넣어 줍니다. 반환값이 없다면 void 를 입력합니다.</p>
<h4 id="함수명"><a href="#함수명" class="headerlink" title="함수명 :"></a>함수명 :</h4><p>함수명은 식별자(변수명)를 만드는 규칙과 동일하게 생성 할 수 있습니다.</p>
<h4 id="인자"><a href="#인자" class="headerlink" title="인자 :"></a>인자 :</h4><p>인자는 파라메터, 매개변수, 아규먼트로 불립니다. 함수를 호출하면서 함수에게 전달할 값을 넣어 줄수 있습니다. </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"10 + 20 = %d\n"</span>, mySum(<span class="number">10</span>, <span class="number">20</span>));</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum, <span class="keyword">int</span> iNum2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> mySum;</div><div class="line">	mySum = iNum + myNum2;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> mySum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>myAdd 함수는 2개의 정수를 입력받아 더해서 반환하는 함수 입니다.<br>반환값은 오로지 1개 밖에 반환할 수 없습니다. 여러개의 값을 반환하려면 포인터변수를 이용해야 합니다.<br>main 함수에서 myAdd 함수를 호출하면 결과를 리턴 받습니다. 리턴 받은 값은 변수에 저장하거나 바로 사용하지 않으면 사라집니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	myAdd(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">	myAdd(<span class="number">20</span>, <span class="number">23</span>);</div><div class="line">	myAdd(<span class="number">40</span>, <span class="number">10</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum, <span class="keyword">int</span> iNum2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> mySum;</div><div class="line">	mySum = iNum + iNum2;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d + %d = %d \n"</span>, iNum, iNum2, mySum);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 프로그램은 반환값이 없는 함수를 사용하는 예입니다.<br>myAdd 함수 자체에서 출력을 하고 종료합니다. </p>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 함수 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[변수와 메모리]]></title>
      <url>/2017/11/10/c-%EB%B3%80%EC%88%98%EC%99%80%EB%A9%94%EB%AA%A8%EB%A6%AC/</url>
      <content type="html"><![CDATA[<h3 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h3><p>변수는 메모리에 값을 담아 놓고 가져다 쓰기 위해서 사용합니다.<br>또한 어떤 값을 담을지에 따라 크기를 지정해서 사용합니다.<br>char는 1바이트의 크기를 갖고, int는 4바이트의 크기, long은 4바이트 혹은 8바이트의 크기를 갖습니다.<br>float은 4바이트, double은 8바이트, long double은 시스템마다 틀립니다.</p>
<h3 id="메모리"><a href="#메모리" class="headerlink" title="메모리"></a>메모리</h3><p><img src="/c언어기초/2017-11-09_22-46-34.png" alt="Memory"><br>위 그림은 메모리 그림입니다. 폰노이만 아키텍쳐에서 주변 장치는 걷어내고 메모리만으로 설명하겠습니다. 메모리를 읽고 쓰는 장치는 좌우에 붙어 있다고 생각하세요.<br>RD에 신호를 주면 Read, WD에 신호를 주면 Write를 합니다.<br>A0~A7은 주소 영역이고, D0~D7은 data영역입니다.</p>
<ol>
<li>65를 메모리에 써보겠습니다. 1번핀 부터 다음과 전기 신호를 줍니다. 0 00001000 01000001 1 그럼 메모리 8번지에 65가 써진답니다.</li>
<li>읽어 올땐 1 00001000 00000000 0 이렇게 신호를 주면 8번지의 데이터를 읽어 준답니다.<br>실제 메모리는 더 복잡하게 구동됩니다. </li>
<li>os는 실시간으로 메모리의 사용 유무를 관리하고, 프로그램의 요청에 따라 메모리를 할당해주고 삭제해 줍니다.</li>
</ol>
<p><strong>중요한건 메모리에는 byte 마다 주소가 있다는걸 기억하세요.</strong></p>
<p>메모리를 그림으로 표시할때 아래와 같이 많이 그립니다.<br><img src="/c언어기초/2017-11-09_01-08-34.png" alt="Memory map"><br>int iNum 은 4바이트의 크기로 10001번지 부터 4번지 까지 1이 저장되어 있습니다.<br>char ch 는 1바이트의 크기로 A가 10005번지에 저장되어 있습니다.<br>char ch2 는 1바이트의 크기로 B가 10006번지에 저장되어 있습니다.<br>int iNum2 는 4바이트의 크기로 10007번지 부터 a번지 까지 100이 저장되어 있습니다.<br>double dNum 은 8바이트의 크기로 b번지 부터 12번지 까지 3.14가 저장되어 있습니다.</p>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 변수 </tag>
            
            <tag> 메모리 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[간단한 계산하기]]></title>
      <url>/2017/11/09/c-%EA%B0%84%EB%8B%A8%ED%95%9C-%EA%B3%84%EC%82%B0%ED%95%98%EA%B8%B0/</url>
      <content type="html"><![CDATA[<h3 id="간단한-계산하기"><a href="#간단한-계산하기" class="headerlink" title="간단한 계산하기"></a>간단한 계산하기</h3><div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<p>이번에는 printf 문을 이용해서 간단한 계산을 해보겠습니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 + 3 = %d\n"</span>, <span class="number">10</span> + <span class="number">3</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 - 3 = %d\n"</span>, <span class="number">10</span> - <span class="number">3</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 / 3 = %d\n"</span>, <span class="number">10</span> / <span class="number">3</span>); <span class="comment">// 정수 / 정수 = 정수</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 / 3.0 = %.2f\n"</span>, <span class="number">10</span> / <span class="number">3.0</span>); <span class="comment">// 정수 / 실수 = 실수</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 * 3 = %d\n"</span>, <span class="number">10</span> * <span class="number">3</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 \% 3 = %d\n"</span>, <span class="number">10</span> % <span class="number">3</span>); <span class="comment">//나머지 연산</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"2 + 10 * 3 = %d\n"</span>, <span class="number">2</span> + <span class="number">10</span> * <span class="number">3</span>); <span class="comment">// 우선순위</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"(2 + 10) * 3 = %d\n"</span>, (<span class="number">2</span> + <span class="number">10</span>) * <span class="number">3</span>); <span class="comment">// 우선순위</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>우리가 알고 있는 간단한 수학 계산을 해보았습니다. 3을 2로 고쳐보세요.<br>복붙을 사용해도 됩니다. 불편하지 않나요. 그럼 변수라는 것을 사용해 봅시다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, d; <span class="comment">// 정수형 변수 선언</span></div><div class="line">    <span class="keyword">float</span> c      <span class="comment">// 실수형 변수 선언</span></div><div class="line">    <span class="comment">// 초기값 입력</span></div><div class="line">    a = <span class="number">10</span>;</div><div class="line">    b = <span class="number">3</span>;</div><div class="line">    c = <span class="number">3.0</span>;</div><div class="line">    d = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>, a, b, a + b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d - %d = %d\n"</span>, a, b, a - b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d / %d = %d\n"</span>, a, b, a / b); <span class="comment">// 정수 / 정수 = 정수</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d / %.2f = %.2f\n"</span> a, c, a / c); <span class="comment">// 정수 / 실수 = 실수</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d * %d = %d\n"</span> a, b, a * b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d \% %d = %d\n"</span> a, b, a % b); <span class="comment">//나머지 연산</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d * %d = %d\n"</span> a, b, d + a * b); <span class="comment">// 우선순위</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"(%d + %d) * %d = %d\n"</span> a, b, (d + a) * b); <span class="comment">// 우선순위</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>변수를 이용해서 프로그램을 고쳤습니다. 이제 값을 바꾸어 보세요.<br>값을 바꿀때는 일일히 printf문에서 고치지 않아도 됩니다.<br>초기값 설정한 것을 고치면 됩니다. 훨씬 변경하기가 수월해 졌습니다.</p>
<p>shell에서도 계산을 할 수 있습니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> $((2 + 3))</div><div class="line">$ <span class="built_in">echo</span> $((2 / 3))</div><div class="line">$ <span class="built_in">echo</span> $((2 - 3))</div><div class="line">$ <span class="built_in">echo</span> $((2 * 3))</div></pre></td></tr></table></figure></p>
<p>bc라는 계산기도 있습니다 복잡한 수학, 과학용 계산이 가능합니다.<br>없다면 설치<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Centos</span></div><div class="line">$ sudo yum install bc</div><div class="line"></div><div class="line"><span class="comment">#ubuntu</span></div><div class="line">$ sudo apt-get install bc</div><div class="line"></div><div class="line"><span class="comment">#macos</span></div><div class="line">$ brew install bc</div><div class="line"></div><div class="line">$ <span class="built_in">echo</span> <span class="string">" 1 + 2"</span> | bc</div><div class="line">$ man bc</div></pre></td></tr></table></figure></p>
<p>vim도 인터프리터 입니다. 계산이 가능합니다. bc를 사용할 수도 있습니다.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">echo</span> <span class="number">1</span>+<span class="number">1</span></div><div class="line"></div><div class="line"><span class="number">2</span> + <span class="number">3</span> #계산식에 커서를 두고 </div><div class="line">:.!bc</div></pre></td></tr></table></figure></p>
<h3 id="상수"><a href="#상수" class="headerlink" title="상수"></a>상수</h3><p>일반적인 수를 상수라고 합니다. </p>
<h3 id="변수명-작성"><a href="#변수명-작성" class="headerlink" title="변수명 작성"></a>변수명 작성</h3><p>변수명을 작성하는 규칙이 있습니다.<br><code>_</code>를 제외한 특수문자가 있으면 안됩니다.<br>공백이 있으면 안됩니다.<br>의미 있는 단어로 작성해야 합니다.<br>위와 같이 a, b, c, 이런식으로 작성하면 안됩니다.<br>의미를 부여하기 힘들어도 최소한 iNum 정로로 만들어 줍니다.<br>소문자 i는 int를 의미 합니다. 정수형 숫자라는 것을 알 수 있습니다.<br>aNum은 배열 숫자, dNum은 더블형, fNum은 실수형 이런식으로 작성하면 좋습니다.<br>그럼 변수명을 바꾸어 보세요. iNum1, iNum2, iNum3, fNum1 </p>
<p>프로그램 작성을 편하게 하려고 변수를 사용합니다.<br>변수는 몇가지 종류가 있습니다.</p>
<ul>
<li>문자1자를 담을 수 있는 변수</li>
<li>정수를 담을 수 있는 정수형 변수</li>
<li>실수를 담을 수 있는 실수형 변수</li>
</ul>
<table>
<thead>
<tr>
<th>변수형</th>
<th>설명</th>
<th>크기</th>
</tr>
</thead>
<tbody>
<tr>
<td>문자형</td>
<td>char</td>
<td>1byte</td>
</tr>
<tr>
<td>정수형</td>
<td>boolean</td>
<td>1bit</td>
</tr>
<tr>
<td>정수형</td>
<td>int</td>
<td>4byte</td>
</tr>
<tr>
<td>정수형</td>
<td>long</td>
<td>8byte</td>
</tr>
<tr>
<td>실수형</td>
<td>float</td>
<td>4byte</td>
</tr>
<tr>
<td>실수형</td>
<td>double</td>
<td>8byte</td>
</tr>
</tbody>
</table>
<p>자료형은 각각 다른 크기를 가집니다. 변수를 선언 할때 자료형을 먼저 정하고 변수명을 써줍니다.<br>변수의 크기를 생각해서 자료형을 사용해야 합니다.<br>자주 사용하지 않는 자료형은 제외 했습니다. 배열과 포인터 변수는 뒤에 설명합니다.<br>다음은 정수형 자료가 표현 할 수 있는 크기를 확인 할 수 있는 프로그램입니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;    </span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> cNum = CHAR_MIN;</div><div class="line">    <span class="keyword">short</span> shNum = SHRT_MIN;</div><div class="line">    <span class="keyword">int</span> iNum = INT_MIN;</div><div class="line">    <span class="keyword">long</span> lNum = LONG_MIN;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> llNum5 = LLONG_MIN;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d %ld %lld\n"</span>, cNum, shNum, iNum, lNum, llNum);</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span>(cNum));</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span>(shNum));</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span>(iNum));</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span>(lNum));</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span>(llNum));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>다음은 실수형 자료가 표현 할 수 있는 크기를 확인하는 프로그램입니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;float.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">float</span> fNum1 = FLT_MIN;</div><div class="line">    <span class="keyword">float</span> fNum2 = FLT_MAX;</div><div class="line">    <span class="keyword">double</span> dNum3 = DBL_MIN;</div><div class="line">    <span class="keyword">double</span> dNum4 = DBL_MAX;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">double</span> ldNum5 = LDBL_MIN;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">double</span> ldNum6 = LDBL_MAX;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.40f %.2f\n"</span>, fNum1);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.40f %.2f\n"</span>, fNum2);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%e %e\n"</span>, dNum3, dNum4);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%Le %Le\n"</span>, ldNum5, ldNum6);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>자료형은 시스템과 운영체제에 따라 크기가 다를 수 있습니다.<br>꼭 사용할 수 있는 크기를 확인하고 사용해야 합니다.</p>
<h3 id="오버플로우-언더플로우"><a href="#오버플로우-언더플로우" class="headerlink" title="오버플로우/언더플로우"></a>오버플로우/언더플로우</h3><p>정수형 int 자료형은 -2,147,483,648 ~ 2,147,483,647 까지 표현가능 했습니다.<br>2,147,483,647 에 1을 더하면 어떻게 될까요. 반대로 -2,147,483,648에서 -1을 하면 어떻게 되는지 확인해 보세요.</p>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> 사칙연산 </tag>
            
            <tag> 자료형 </tag>
            
            <tag> 변수 </tag>
            
            <tag> 상수 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[while 문]]></title>
      <url>/2017/11/09/c-while/</url>
      <content type="html"><![CDATA[<h3 id="while문"><a href="#while문" class="headerlink" title="while문"></a>while문</h3><h4 id="기본구문"><a href="#기본구문" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(조건)&#123;</div><div class="line">	반복할 문장; <span class="comment">//조건이 참이면 수행</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//조건이 거짓이면 수행</span></div></pre></td></tr></table></figure>
<p><img src="/c언어기초/2017-11-08_00-15-50.png" alt="while 반복문"><br>while문은 조건이 참인동안 계반 반복합니다.<br>반복문에 조건이 거짓되는 수식을 만들지 않으면 무한 반복됩니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> iNum = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (iNum &lt; <span class="number">10</span>)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d line\n"</span>, iNum);</div><div class="line">		iNum = inum + <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 예제에서 참인 조건은 inum이 10보다 작으면 됩니다.<br>초깃값으로 0을 주었으니 inum이 10이 되면 거짓이 되므로 0부터 9까지 10번 출력을 하게됩니다.</p>
<h3 id="do-while문"><a href="#do-while문" class="headerlink" title="do~while문"></a>do~while문</h3><h4 id="기본구문-1"><a href="#기본구문-1" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">	반복할 문장; <span class="comment">//최초 1번은 무조건 실행, 이후 조건이 참이면 수행</span></div><div class="line">&#125; <span class="keyword">while</span>(조건);</div></pre></td></tr></table></figure>
<p><img src="/c언어기초/2017-11-08_00-16-03.png" alt="do~while 반복문"></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> iNum = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">do</span> &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d line\n"</span>, iNum); <span class="comment">// 반복할 명령</span></div><div class="line">		iNum = inum + <span class="number">1</span>;           <span class="comment">// 반복할 조건을 변화시킬 식</span></div><div class="line">	&#125; <span class="keyword">while</span> (iNum &lt; <span class="number">10</span>);           <span class="comment">// 반복 조건식</span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>do~while문은 최초 한번은 무조건 실행되는 반복을 실행 할 때 사용합니다.</p>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> while </tag>
            
            <tag> dowhile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[if문 사용하기]]></title>
      <url>/2017/11/09/c-if%EB%AC%B8/</url>
      <content type="html"><![CDATA[<h3 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h3><p>if 명령은 조건을 판단해서 참일 경우 또는 거짓 일경우 분기를 하기 위해 사용하는 명령입니다.</p>
<h4 id="기본구문"><a href="#기본구문" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 실행 명령이 1줄일 경우</span></div><div class="line"><span class="keyword">if</span> (조건)</div><div class="line">	참인 경우 실행 명령<span class="number">1</span>;</div></pre></td></tr></table></figure>
<p><img src="/c언어기초/2017-11-08_00-11-29.png" alt="if문 flowchart"></p>
<p>조건을 판단해서 참인 경우 문장1을 실행하고 거짓인 경우 다음 문장을 수행합니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> iNum1 = <span class="number">10</span>;</div><div class="line">	<span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (iNum1 &gt; iNum2)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다.\n"</span>, iNum1, iNum2);</div><div class="line">	</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d은 %d보다 작습니다.\n"</span>, iNum1, iNum2);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 8행처럼 보기 좋게 if문 다음줄에 들여 쓰기후 적어 줍니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> iNum1 = <span class="number">10</span>;</div><div class="line">	<span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (iNum1 &gt; iNum2) <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2); <span class="comment">// if문이 참인경우 실행</span></div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d은 %d보다 작습니다."</span>, iNum1, iNum2);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위와 같이 같은 줄에 붙여 써도 됩니다만 가능한 보기 좋게 작성하는 것이 좋습니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> iNum1 = <span class="number">10</span>;</div><div class="line">	<span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (iNum1 &gt; iNum2) </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2); <span class="comment">//if문이 참인경우 실행</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d은 %d보다 작습니다."</span>, iNum1, iNum2); <span class="comment">//if문과 관계없이 실행</span></div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위와 같이 사용해도 결과는 문제 없이 나옵니다. 문법적으로 오류가 없기 때문이죠. 참인 경우 다음 한줄을 실행한 다고 했습니다. 절대 위와 같이 사용하면 프로그램 분석 하는데 불편합니다. 들여쓰기를 잘해야 소스를 읽기가 편합니다. 오류를 찾기도 쉽구요. 아래와 같이 써도 전혀 문제 없습니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; int main(int argc, const char *argv[]) &#123; int iNum1 = 10; int inum2 = 20; </span></span></div><div class="line"><span class="keyword">if</span> (iNum1 &gt; iNum2) <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2); <span class="built_in">printf</span> (<span class="string">"%d은 %d보다 작습니다."</span>, </div><div class="line">iNum1, iNum2); <span class="keyword">return</span> <span class="number">0</span>; &#125;</div></pre></td></tr></table></figure>
<p>읽기가 매우 힘들죠. ^^ 코딩은 읽기 좋게 예쁘게 하는게 좋습니다.</p>
<hr>
<h3 id="if-명령1-명령2…"><a href="#if-명령1-명령2…" class="headerlink" title="if {명령1;명령2…}"></a>if {명령1;명령2…}</h3><h4 id="기본구문-1"><a href="#기본구문-1" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 실행 명령이 여러줄 일 경우</span></div><div class="line"><span class="keyword">if</span> (조건)&#123;</div><div class="line">	명령<span class="number">1</span>;</div><div class="line">	명령<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/c언어기초/2017-11-08_01-09-51.png" alt="if flowchart"></p>
<p>조건이 참일 경우 여러줄을 실행해야 한다면 위와 같이 사용할 수 있습니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> iNum1 = <span class="number">30</span>;</div><div class="line">	<span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (iNum1 &gt; iNum2)&#123; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"30과 20을 비교하면: "</span>);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>참인 경우 실행할 문장이 1줄이어도 위와 같이 써주면 보기에 좋습니다. 가능한 if문은 위와 같이 쓰는 걸 추천합니다.</p>
<hr>
<h3 id="if-else"><a href="#if-else" class="headerlink" title="if ~ else"></a>if ~ else</h3><h4 id="기본구문-2"><a href="#기본구문-2" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 조건이 참이 아닐 경우 else를 실행</span></div><div class="line"><span class="keyword">if</span> (조건)&#123; <span class="comment">//참인경우 실행</span></div><div class="line">	명령<span class="number">1</span>; 	</div><div class="line">	명령<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123; <span class="comment">// 참인 아닌경우 실행</span></div><div class="line">	명령<span class="number">1</span>;</div><div class="line">	명령<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/c언어기초/2017-11-08_00-13-50.png" alt="if~else flowchart"><br>if~else 형식은 if 조건이 참인경우 문장1을 거짓인 경우 문장2문를 실행 하도록 할 때 사용합니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> iNum1 = <span class="number">30</span>;</div><div class="line">	<span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (iNum1 &gt; iNum2)&#123; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d은 %d보다 작습니다."</span>, iNum1, iNum2);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 code 처럼 참이 안닌경우 else구문을 실행 합니다.</p>
<hr>
<h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if~else if~else"></a>if~else if~else</h3><h4 id="기본구문-3"><a href="#기본구문-3" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 다중 if ~ else if</span></div><div class="line"><span class="keyword">if</span> (조건)&#123;</div><div class="line">	명령<span class="number">1</span>;</div><div class="line">	명령<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(조건)&#123;</div><div class="line">	명령<span class="number">1</span>;</div><div class="line">	명령<span class="number">2</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	명령<span class="number">1</span>;</div><div class="line">	명령<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/c언어기초/2017-11-08_00-15-00.png" alt="if~else if~else"></p>
<p>[if~else if~else] 다중 if문은 여러번 비교를 해야 할때 사용합니다.<br>숫자를 비교할 때, 숫자가 클수도, 작을수도, 같을 수도 있습니다.<br>크다 작다만 판단한다면 논리적 오류가 생길 수도 있습니다. 이럴때 한번더 비교해서 같으면 같다라고 출력하고 같지 않으면 작다라고 출력해야 합니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> iNum1 = <span class="number">30</span>;</div><div class="line">	<span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (iNum1 &gt; iNum2)&#123; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2);</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>( iNum == iNum2)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d은 %d와 같습니다."</span>, iNum1, iNum2);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d은 %d보다 작습니다."</span>, iNum1, iNum2);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> if </tag>
            
            <tag> else </tag>
            
            <tag> if~else </tag>
            
            <tag> while </tag>
            
            <tag> do while </tag>
            
            <tag> for </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[for 반복문]]></title>
      <url>/2017/11/08/c-for%EB%AC%B8/</url>
      <content type="html"><![CDATA[<h3 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h3><h4 id="기본구문"><a href="#기본구문" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (초기값; 조건문; 증가값)&#123;</div><div class="line">	반복할 명령1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>특정한 횟수 만큼 반복해서 명령을 실행 할 때 사용합니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"hellow world"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위 예제는 helow world를 10번 반복 출력하는 예제 입니다.<br><code>i++</code>는 후행증가 연산자라고 부르는데 먼저 i값을 사용하고, 1을 증가 시킵니다.<br><code>++i</code>는 선행증가 연산자라고 합니다. 반대로 1을 증가시켜 사용합니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> iSum = <span class="number">0</span>;	<span class="comment">//1:</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;		<span class="comment">//2:</span></div><div class="line">		iSum = iSum + (i + <span class="number">1</span>);	<span class="comment">//3:</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	print(<span class="string">"1 부터 10 까지 합계는 %d 입니다.\n"</span>, iSum);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 예제는 1부터 10까지 더하는 프로그램 입니다.<br>1: 은 값을 누적하기 위한 변수 입니다.<br>2: 초깃값은 정수형 0 부터 시작하고, 조건은 10보다 작을때 까지, 증가는 1씩 증가합니다.<br>4: iSum과 (i+1)을 더해서 iSum에 누적을 합니다.<br>i의 시작값이 0이기 때문에 1을 더해 준겁니다.</p>
<figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">55</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> iSum = <span class="number">0</span>;	<span class="comment">//1:</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;		<span class="comment">//2:</span></div><div class="line">	<span class="comment">//for (int i = 0; i &lt;= 10; i++) &#123;		//3:</span></div><div class="line">		iSum = iSum + i ;	<span class="comment">//4:</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	print(<span class="string">"1 부터 10 까지 합계는 %d 입니다.\n"</span>, iSum);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 프로그램도 1부터 10까지 10번 더하는 프로그램입니다.<br>2: 라인을 보세요. 초깃값, 수식, 증가값을 보고 한눈에 10번 실행 되겠군 하고 떠오르시나요 ? 아님 11-1=10, 10번하고 떠오르시나요. 3: 라인은 어떤가요? 작거나 같다. 같으니까 10도 포함되겠군. 한번더 생각해야 합니다. cpu도 한번 더 일을 하게 된답니다. 코딩은 한줄을 더 쓰더라도 읽기 쉬워야 합니다. 처음에 사용했던 <code>for (int i = 0; i &lt; 10; i++)</code> 를 사용하는게 직관적입니다. i의 값을 1부터 사용해야 한다면 실행 구문에서 <code>+ 1</code>을 해주면 됩니다. </p>
<blockquote>
<p>나중에 만개의 프로그램을 만들었는데, 이 프로그램이 동시에 실행해서 사용 해야 한다고 가정합니다.<br>컴퓨터의 속도가 너무 느려져서 고민을 하겠죠. 프로그램을 수정해서 속도를 빠르게 할지 아님 컴퓨터를 더 살지. 비용을 계산해 보세요. 만개의 소스를 수정하려면 시간이 얼마가 걸릴지. 컴퓨터를 1대를 더사면 비용이 얼마나 더들지.<br>컴퓨터 1대에 300만원이라고 가정하고, 소스를 수정하는데 직원 10명이 소스 1000개씩 수정한다면 하루 10개씩 수정한다 하더라도 100일이 걸립니다. 인건비만 9000만원정도 소요 될겁니다. 9000만원들여서 얼마나 빠르게 개선을 할 수 있을 까요?<br>50% 빠르게 개선 할 수 있다고 장담 할 수 있나요. ?<br>하지만 컴퓨터를 추가한다면 1대를 더 추가 하면 2배가 빨라지고, 2대를 추가하면 3배가 빨라집니다. 900만원 들여 3배 빠르게 사용할 수 있습니다.<br>이번엔 프로그램에 기능을 추가한다고 가정해 보겠습니다. 읽기 쉬운 프로그램은 다른 사람이 기능을 추가 한다 하더라도 빠른 시간내에 분석해서 기능을 추가 할 수 있습니다. 분석하는데 많은 시간을 들이지 않을 수 있습니다.<br>hello world를 3번 출력하는 프로그램을 만든다 가정해 보겠습니다.  for 문으로 만든 프로그램이 좋은 프로그램일까요 아님 3번 복사 붙여넣기 한 프로그램이 좋은 프로그램일까요?<br>hello world를 100번 출력한다고 가정 해보죠. for문으로 출력한 프로그램이 좋은 프로그램일까요. 아님 100번 복사 붙여 넣기 한 프로그램이 좋은 프로그램일까요 ?<br>다시한번 강조하지만 읽기 쉽고(덜 생각하게하고) 들여쓰기와 주석을 많이 사용한 프로그램이 좋은 프로그램입니다. </p>
</blockquote>
<p>10을 1000조로 바꾸어 계산해 보세요.<br>int는 21억 까지 밖에 계산을 못합니다. int를 long long 으로 바꾸어야 합니다.<br>프로그램 실행 시간도 체크 해보세요.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:!time <span class="keyword">for</span>.<span class="keyword">o</span></div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> iSum = <span class="number">0</span>;	<span class="comment">//1:</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; i++) &#123;		<span class="comment">//2:</span></div><div class="line">		iSum = iSum + i;	<span class="comment">//3:</span></div><div class="line">		print(<span class="string">"1 부터 10 까지 합계는 %d 입니다.\n"</span>, iSum);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이번에는 출력문을 for문 안에 넣었습니다.<br>단연히 출력문도 조건만큼 출력 될겁니다.<br>100만번을 출력할 텐데 속도를 확인 해 보세요.<br>느려진 이유는 cpu만 사용한 것이 아니라 i/o장치(모니터)도 같이 사용했기 때문입니다.<br>cpu보다 i/o장치는 많이 느립니다. 하드디스크는 더 느리답니다.</p>
<p>프로그램 실행 중간에 종료 하려면 Ctrl + c<br>vim에서 실수로 Ctrl + z를 눌렀다면 fg</p>
<h3 id="for문의-중첩"><a href="#for문의-중첩" class="headerlink" title="for문의 중첩"></a>for문의 중첩</h3><h4 id="기본구문-1"><a href="#기본구문-1" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (초깃값; 조건; 증가값)&#123;</div><div class="line">	for (초깃값; 조건; 증가값)&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for문은 중첩해서 사용하는 경우가 많습니다.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++) &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &lt;= <span class="number">1</span>; i--) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">*</div><div class="line">**</div><div class="line">***</div><div class="line">****</div><div class="line">*****</div><div class="line">******</div><div class="line">*******</div><div class="line">********</div><div class="line">*********</div><div class="line">**********</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">**********</div><div class="line">*********</div><div class="line">********</div><div class="line">*******</div><div class="line">******</div><div class="line">*****</div><div class="line">****</div><div class="line">***</div><div class="line">**</div><div class="line">*</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> for </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 한글파일명 문제점]]></title>
      <url>/2017/11/08/hexo-%ED%95%9C%EA%B8%80%ED%8C%8C%EC%9D%BC%EB%AA%85/</url>
      <content type="html"><![CDATA[<h3 id="Hexo-한글오류"><a href="#Hexo-한글오류" class="headerlink" title="Hexo 한글오류"></a>Hexo 한글오류</h3><p>이하 내용은 Hexo를 수정하다 꼬여서 발생한 문제를 해결하면서 얻은 경험입니다.( 정확하게 소스분석을 하지 않았다는 겁니다.)</p>
<p>Hexo에서 <code>_Post</code>의 관리는 generator가 md파일을 감시하고 있다 변경이 되면 변경 상태에 따라 html, category, tag, archives 다시 만들어주고 deploy는 .deploy디렉토리에 add, commit, push  동작을 하는것 같습니다. 추측이지만 generator가 임의로 만든 post의 한글파일의 감시를 제대로 못해주는 것 같습니다. 감시는 파일명, 내용수정에 따라 동작이 달라지는것 같습니다.</p>
<p><strong>요점:</strong></p>
<ul>
<li>404오류, archives, Tag, Category, Search, index.html에서 링크오류가 나온다면 파일명과 내용을 수정하고 <code>hexo g</code>하면  100% 해결 되었습니다.</li>
<li>변경내용이 반영되지 않을 경우, 간혹 github이 바빠서 그럴 수 있으니 새로고침 몇번 해보고, 조금 기다려 보고 github에 해당 post가 업로드되었는지 확인. 업로드가 안됐을 경우 <code>hexo clean</code> 후 <code>hexo g -d</code> 하면 99%는 해결 됩니다. 1%는 삽질이 필요합니다. 1%의 빈도수는 거의 없으니 안심하시길…</li>
<li>github.io는 무료이고 조금 느림을 항상 명심. </li>
</ul>
<hr>
<p><strong>삽질 경험담:</strong></p>
<ul>
<li>archive가 반영이 안될때는 파일명을 변경하면 된다.</li>
<li>Post의 변경 반영이 안되는 경우<br><code>hexo n &quot;포스트명&quot;</code> 또는 <code>hexo new &quot;포스트명&quot;</code> 으로 포스트를 생성해서 사용하다 수정을 했음에도 반영이 안되는 경우가 종종 있다.<br>이때는 git의 캐시 때문일 수 있으니 5분 정도 기다려 보고, 그래도 안되면 아래처럼 적용을 해준다.<br><code>hexo clean</code>  /blog/Public 디렉토리 삭제<br><code>hexo g -d</code><br>하면 문제가 해결된다<br>그래도 안되는 경우 파일명을 바꾸어 준다. 탐색기나 finder에서 바꾸면 안됨(내 경험상)<br><code>mv 한글.md 한글x.md</code><br><code>hexo g -d</code><br>변경을 확인하고 변경이 잘 되면 원래대로 이름을 바꾸고 <code>hexo g -d</code><br>그래도 안되면 내용을 수정<br><code>hexo g -d</code><br>여기 까지 했는데도 안되면 최후의 수단<br>.deploy로 이동후<br><code>git rm -rf *</code><br><code>git commit -m &quot;삭제&quot;</code><br><code>git push</code><br>화일명을 변경, 내용도 수정<br><code>hexo g -d</code><br>영어의 대소문자가 혼재(윈도우와 맥에서는 오류가 날 수 있음) 소문자로 바꾸길…</li>
<li>Post가 2개로 보일때<br>이증상은 대부분 로컬서버에서 생기는 것 같습니다.<br>post명을 vim에서 Vim으로 바꾸었는데 post가 2개로 보였습니다.<br><code>hexo clean</code><br><code>hexo g -d</code><br><code>hexo server -s</code> or <code>hexo server</code></li>
</ul>
<hr>
<ul>
<li>오류없이 사용하려면 Post명을 영어로 사용을 권장.</li>
<li>Hexo의 단점은 post가 많아 지면 관리가 힘듬.</li>
<li>Hexo의 단점을 조금이라도 보완 하려면 vim과 ctrlP 사용이 정답.</li>
<li>또는 파일명 앞에 카테고리 이름을 붙여주면 그나마 쓸만함.</li>
</ul>
<p><strong>참고 :</strong> </p>
<ul>
<li>windows와 macos는 기본적으로 대소문자를 구분하지 않습니다. </li>
<li>linux와 Unix는 대소문자를 구분합니다. </li>
<li>한글파일명은 공백없이 사용하는 것이 원칙, 공백을 사용하면 공백앞에 <code>\</code>가 자동으로 붙고 파일 시스템에서 <code>\</code>처리 때문에 문제가 발생할 수 있습니다. 설마 개발자가 파일명에 공백을 넣는 다면 os 공부가 필요 전산 전공을 하지 않은 개발자 일 수 있겠네요. 개발자가 아니라면 가능한 파일명에는 공백을 넣지 말고 <code>-</code> 또는 <code>_</code>를 넣으세요. 파일명에는 특수문자를 넣지 마세요. 한글 파일명을 사용해야 한다면 “한글파일명.md” 처럼 따옴표 안에 넣으세요.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[실습 환경 설정]]></title>
      <url>/2017/11/06/c-%EC%8B%A4%EC%8A%B5-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/</url>
      <content type="html"><![CDATA[<h3 id="실습-환경-설정"><a href="#실습-환경-설정" class="headerlink" title="실습 환경 설정"></a>실습 환경 설정</h3><div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<ol>
<li>virtualbox에 centos설치 - Centos참조</li>
<li>gvim 설치및 vimrc 세팅 - vim참조</li>
<li>vim 기본 사용법 - vim참조</li>
</ol>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c, </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[화면에 글자 출력하기]]></title>
      <url>/2017/11/05/c-%ED%99%94%EB%A9%B4%EC%97%90-%EA%B8%80%EC%9E%90-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h2 id="화면에-글자-출력하기"><a href="#화면에-글자-출력하기" class="headerlink" title="화면에 글자 출력하기"></a>화면에 글자 출력하기</h2><p>c언어는 함수로 시작해서 함수로 끝납니다. 모든 부품들이 함수로 만들어 져있습니다. </p>
<p>c언어에서 화면에 출력을 하는 함수는 다음과 같습니다. </p>
<ul>
<li>putchar() 영문 1문자를 출력(한글 1문자는 영어 3문자와 같음. ms-windows는 2문자)</li>
<li>puts() 문자열을 출력</li>
<li>prinf() 문자열을 출력(출력포맷을 정할 수 있음)</li>
</ul>
<h3 id="1문자-출력"><a href="#1문자-출력" class="headerlink" title="1문자 출력"></a>1문자 출력</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'a'</span>); <span class="comment">// 한문자를 출력합니다. </span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1행은 선언문이라고 하는데 무언가를 화면에 출력할때, 입력받을때 반드시 사용한다고 알고 있으면 됩니다.<br>위와 같이 프로그램을 작성했으면 저장을 하고 실행이 되도록 컴파일을 합니다.<br><code>&lt;Esc&gt;:w&lt;Enter&gt;</code> 저장<br><code>&lt;Esc&gt;:q&lt;Enter&gt;</code> vim종료</p>
<h3 id="컴파일하고-실행하기"><a href="#컴파일하고-실행하기" class="headerlink" title="컴파일하고 실행하기"></a>컴파일하고 실행하기</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gcc print01.c -o print01.o   <span class="comment"># 컴파일</span></div><div class="line">$ ./print01.o                  <span class="comment"># 실행</span></div></pre></td></tr></table></figure>
<p>터미널에서 1행 처럼 컴파일 하고<br>2행 처럼 실행을 하는 겁니다.</p>
<p>우리가 원하는데로 a가 잘 출력 되었습니다만 마지막에 %가 붙었습니다. 실제로 %가 붙은건 아니고 프롬프트와 겹쳐서 그렇게 보이는것 뿐입니다. 흔히 깨져 보인다고 하죠.</p>
<h3 id="출력하고-줄바꾸기"><a href="#출력하고-줄바꾸기" class="headerlink" title="출력하고 줄바꾸기"></a>출력하고 줄바꾸기</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'a'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>); <span class="comment">// 줄을 바꾸어주는 문자입니다.</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$gcc</span> 01_a.c -o 01_a.o</div><div class="line">$./01_a.o</div></pre></td></tr></table></figure>
<p>이번에는 6행을 보면 <code>\n</code>을 추가했습니다. putchar는 1문자만 출력한다고 했는데. 두글자를 입력했습니다. <code>\n</code>은 c언어가 1문자로 인식합니다. 줄을 바꾸어 주는 역할을 합니다. 이런 문자가 몇가지 더있는데 이를 이스케이프문자 라고 합니다.</p>
<table>
<thead>
<tr>
<th>esc문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\a</code></td>
<td>beep음</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>백스페이스</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>폼 피드</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>줄바꿈</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>리턴(커서를 맨앞으로 이동)</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>수평탭</td>
</tr>
<tr>
<td><code>\v</code></td>
<td>수직탭</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>\출력</td>
</tr>
<tr>
<td><code>\&#39;</code></td>
<td>작은따옴표(‘)</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>큰타옴표(“)</td>
</tr>
<tr>
<td><code>\?</code></td>
<td>물음표(?)</td>
</tr>
</tbody>
</table>
<p>프로그래밍언어는 외우는게 아닙니다. 익히는 겁니다. 한번 봤으니 잊으세요.<br>많이 쓰면 익혀 지니 걱정하지 마세요.</p>
<h2 id="Hello-World-출력하기"><a href="#Hello-World-출력하기" class="headerlink" title="Hello World 출력하기"></a>Hello World 출력하기</h2><p>이번에는 putchar()를 가지고 Hello World를 출력해 볼까요.?<br>복사와 붙여넣기는 코딩의 필수<br>우리는 vim을 사용하니까 vim의 신공으로<br><code>i&#39;h&#39;&lt;Esc&gt;yy15p</code><br>커서를 맨앞에 놓고 <code>&lt;C-v&gt;15jIputchar(&lt;Esc&gt;</code><br>커서를 첫줄 p에 놓고 <code>&lt;S-v&gt;15j:s/$/);/g&lt;Enter&gt;</code></p>
<p>이런 신공이 불편하다면 <code>yy15p</code> 하고 문자를 수정<br>설마 블로그에서 복사를… ^^; 해도 됩니다. 코딩은 그렇게 편하게 하는 겁니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'H'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'e'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'o'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'W'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'o'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'r'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'d'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>스스로 컴파일하고 실행해 보세요.<br>vim에서 컴파일 하고 실행하기<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">w</span> 파일명.<span class="keyword">c</span></div><div class="line">:!gcc 파일명.<span class="keyword">c</span> -<span class="keyword">o</span> 파일명.<span class="keyword">o</span></div><div class="line">:!./파일명.<span class="keyword">o</span></div></pre></td></tr></table></figure></p>
<p>vim 세팅을 했다면 <code>&lt;F5&gt;</code> 누르면 자동으로 컴파일하고 실행하도록 했습니다.</p>
<h2 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h2><p>putchar()를 갖이고 문장을 입력하려면 무척 불편합니다. 그래서 문장을 출력하기 위해서 puts() 함수를 사용합니다. puts함수는 putchar() 함수로 만들어졌습니다. </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Hello World"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>puts()는 명령이 끝나면 자동으로 줄을 바꾸어 줍니다. <code>\n</code>을 넣을 필요가 없습니다. 줄을 바꾸지 않고 싶을 때는 printf()를 사용합니다.</p>
<h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><p>printf()는 출력형식을 사용자가 자유롭게 지정할 수 있습니다. </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"Hello World\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, <span class="number">65</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c"</span>, <span class="string">'A'</span>, <span class="string">'\n'</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="number">65</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%f"</span>, <span class="number">3.14</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"내이름은 %s이고 나이는 %d살 입니다.\n"</span>, <span class="string">"홍길동"</span>, <span class="number">16</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 프로그램에서 6행에 문자를 출력하는데 65란 숫자를 써도 문자가 출력되는 것을 볼 수 있습니다.<br>컴퓨터는 문자를 인식 하지 못합니다. 오직 0, 1의 2진수만 알죠.<br>ASCII 문자라는 것이 있습니다. 숫자를 문자로 표현 하는 약속이죠. 모호스 부호처럼요.<br>%c 는 숫자를 문자로 변경해서 출력해 주는 기능을 가지고 있습니다.<br>당연히 문자는 문자로 출력합니다. 오직 1문자만. 한글은 문자가 될수 없습니다. 한글은 3byte 초성,중성,종성으로 된 문자열 입니다.</p>
<table>
<thead>
<tr>
<th>출력형식 문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>%c</td>
<td>문자하나를 출력, 상수가 숫자일경우 ascii로 문자로 대체</td>
</tr>
<tr>
<td>%s</td>
<td>문자열을 출력</td>
</tr>
<tr>
<td>%Nf</td>
<td>10진 실수를 N안에 출력 예)10.2f 전체소수점 포함 10자리, 소수점이하 2자리</td>
</tr>
<tr>
<td>%Nd</td>
<td>10진 정수를 N안에 출력</td>
</tr>
</tbody>
</table>
<p>출력형식은 위에 있는것 말고도 조금 더있지만 자료형에서 다루겠습니다. </p>
<h2 id="박스-그리기"><a href="#박스-그리기" class="headerlink" title="박스 그리기"></a>박스 그리기</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"================"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"|              |"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"================"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>선문자를 이용하면 더 예쁘게 그릴수 있습니다.<br>이걸 왜 만들었을 까요?<br>vim에서 <code>:r!./box.o</code> 해보세요.<br>printf까지 출력되도록 만들어도 보세요.<br>응용해서 자신의 명함도 만들어 보세요.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">회사명 : (주)대한민국     이름 : 홍길동</div><div class="line">                          직책 : 사원</div><div class="line">주소: 서울시 뭐뭐구 뭐뭐동</div><div class="line">Tel : 000.0000.0000  H.P 000.0000.0000</div></pre></td></tr></table></figure></p>
<p>어디에 사용할지 생각도 해보구요. 저는 메일과 문서에 사용합니다.<br>텍스트 리더인 macos용 say나 google tts와 연동해서 사용할 수 있습니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#macos</span></div><div class="line">$ 프로그램명 | say</div><div class="line">$ say <span class="string">"안녕 say 야!"</span></div><div class="line">$ man say</div></pre></td></tr></table></figure></p>
<p>google tts가 궁금하면  <a href="https://github.com/glutanimate/simple-google-tts" target="_blank" rel="external">https://github.com/glutanimate/simple-google-tts</a><br>linux에서는 fastival이 있는데 한글이 안됨.</p>
<h2 id="코미디언-이름-출력하기"><a href="#코미디언-이름-출력하기" class="headerlink" title="코미디언 이름 출력하기"></a>코미디언 이름 출력하기</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"유재석, 강호동, 박명수, 신동엽, 박미선"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이건 나중에 배열 배울때 써먹을 겁니다. 우선 연습 삼아 만들어 놓으세요. 아래 색상도<br>vim에 snippet에 등록해서 사용해도 되지만 우리는 c언어 연습중…</p>
<h2 id="색상-이름-출력하기"><a href="#색상-이름-출력하기" class="headerlink" title="색상 이름 출력하기"></a>색상 이름 출력하기</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"빨강, 주황, 노랑, 초록, 파랑, 남, 보라"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>컴퓨터를 사용하는 이유는 복사와 붙여넣기가 가능하기 때문입니다.<br>많이 할수록 컴퓨터를 잘 쓰는 겁니다. </p>
<hr>
<p>참고로 cowsay, figlet, boxes란 프로그램을 설치해서 사용 해보세요.<br>지금배운 출력문에 살을 조금만 붙이면 만들 수 있습니다.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Centos</span></div><div class="line"><span class="variable">$sudo</span> yum install cowsay</div><div class="line"><span class="variable">$sudo</span> yum install figlet</div><div class="line"><span class="variable">$sudo</span> yum install boxes</div><div class="line"></div><div class="line"><span class="comment"># macos</span></div><div class="line"><span class="variable">$brew</span> install cowsay</div><div class="line"><span class="variable">$brew</span> install figlet</div><div class="line"><span class="variable">$brew</span> install boxes</div><div class="line"></div><div class="line"><span class="comment">#ubuntu</span></div><div class="line"><span class="variable">$sudo</span> apt-get install cowsay</div><div class="line"><span class="variable">$sudo</span> apt-get install figlet</div><div class="line"><span class="variable">$sudo</span> apt-get install boxes</div></pre></td></tr></table></figure>
<p>####<br>printf() 함수만 쓰면 안되나? </p>
<p>puts(), putchar()는 기능도 없고, 불편한데…<br>문제되지 않습니다. printf()는 프로그램 크기가 커서 상대적으로 컴파일 속도가 느립니다.<br>아두이노, 라즈베리파이나 arm 등 모바일 cpu에서는 컴파일 속도가 더 느려지겠죠.<br>하지만 무시해도 됩니다. 체감하기 힘듭니다. </p>
<p>텍스트 파일을 하나 만들어서 hello world 저장하세요.<br>크기를 확인해 보세요.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"hello world"</span> &gt; abc.txt</div><div class="line">$ ls -al abc.txt</div></pre></td></tr></table></figure>
<p>그리고 putchar(), puts(), printf()로 hello world를 출력하는 프로그램을 각각 만들어서 파일의 크기를 비교해 보세요.</p>
<ul>
<li>텍스트 파일보다 실행파일이 크기가 큰 이유는 뭘까요. 또 컴파일 된 실행파일의 크기가 같은 이유는 뭘까요. 이유를 인터넷 검색해 보세요. </li>
<li>실행파일은 기본 출력 명령을 포함하고 있고 똑같은 hello world 11자+ 줄바꿈(1자) 총12자를 출력합니다. </li>
<li>영문1글자는 1바이트 총12자 니까 12바이트 </li>
<li>또 100번씩 출력하게 만들어서 크기를 비교해 보세요. </li>
<li>복사 붙여 넣기 신공을 사용해서 200번 출력하게 만드세요. </li>
<li>실행파일은 기본 출력 버퍼 사이즈를 가집니다. 실행 파일내 출력버퍼가 다차면 일정 크기만큼 자동으로 버퍼를 확장합니다.</li>
<li>출력문을 여러번 사용해도 실행파일의 크기가 갑자기 커지지는 않는다는 것을 확인 했습니다. 그러나 프로그램의 규모가 크다면 메뉴나, 설명등의 출력은 data파일에 저장한후 불러오는 구조로 많이 만듭니다. </li>
<li>64비트운영체제는 4메가, 32비트는 2메가, 16비트는 1메가바이트,  처리 비트가 클수록 낭비되는 부분도 커집니다. </li>
<li>임베디드 개발이 아닌 이상은 모두 무시하고 printf() 쓰세요. 컴퓨터 성능과 자원은 남아 돕니다. </li>
</ul>
]]></content>
      
        <categories>
            
            <category> C언어기초 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c </tag>
            
            <tag> printf </tag>
            
            <tag> 컴파일 </tag>
            
            <tag> 이스케이프문자 </tag>
            
            <tag> puts </tag>
            
            <tag> putchar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[d2coding font]]></title>
      <url>/2017/11/04/hexo-d2coding/</url>
      <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>naver d2coding webfont 다운로드<br><a href="https://github.com/Joungkyun/font-d2coding" target="_blank" rel="external">https://github.com/Joungkyun/font-d2coding</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> font </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[파일내용보기]]></title>
      <url>/2017/11/02/centos-%ED%8C%8C%EC%9D%BC%EB%82%B4%EC%9A%A9%EB%B3%B4%EA%B8%B0/</url>
      <content type="html"><![CDATA[<h3 id="파일-내용-보기"><a href="#파일-내용-보기" class="headerlink" title="파일 내용 보기"></a>파일 내용 보기</h3><p>파일의 내용을 볼 수 있는 방법은 많이 있지만<br>cat, head, tail, less 를 많이 사용합니다.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ man ls &gt; abc.txt</div></pre></td></tr></table></figure>
<p>위와 같이 연습용 파일을 생성합니다.</p>
<h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>cat은 파일의 내용을 보여줍니다. 파일의 내용이 길때 주르륵 스크롤 되기 때문에 more 함께 사용합니다.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat abc.txt</div><div class="line">$ cat -n abc.txt</div><div class="line"></div><div class="line">$ cat abc.txt | more</div></pre></td></tr></table></figure>
<p>man cat으로 옵션을 확인해 보세요.<br>more를 사용했를 경우 <code>spacebar</code>를 누르면 다음 페이지로 이동됩니다.</p>
<h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>head는 파일의 윗부분을 기준으로 보여 줍니다.<br>주로 무슨 파일인지 확인할 때 사용합니다.<br>대부분의 프로그램의 첫 부분은 프로그램의 주석(설명)을 적도록 약속 했습니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ head abc.txt</div><div class="line"></div><div class="line">$ head -20 abc.txt</div></pre></td></tr></table></figure></p>
<p>1행 옵션이 없이 사용하면 기본으로 10줄을 보여줍니다.<br>3행 -옵션으로 20을 입력하면 20줄을 보여줍니다.</p>
<h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>head와 반대로 아래를 기준으로 보여줍니다.<br>주로 어떻게 끝났는지 확인 할 때 사용합니다.<br>파일의 끝에 문자열을 추가하기 위해 사용합니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tail abc.txt</div><div class="line"></div><div class="line">$ tail -20 abc.txt</div></pre></td></tr></table></figure></p>
<h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>less는 man page가 사용하는 프로그램입니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ less abc.txt</div></pre></td></tr></table></figure></p>
<p>q를 누르면 종료<br>h를 누르면 도움말<br>j,k 위아래이동<br>spacebar 한화면 아래로 이동<br>찾기, 이동하기등 옵션이 많이 있습니다. vim과 사용법이 비슷합니다.</p>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
            <tag> cat </tag>
            
            <tag> head </tag>
            
            <tag> tail </tag>
            
            <tag> less </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[파일및디렉토리삭제]]></title>
      <url>/2017/11/02/centos-%ED%8C%8C%EC%9D%BC%EB%B0%8F%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EC%82%AD%EC%A0%9C/</url>
      <content type="html"><![CDATA[<h2 id="파일-및-디렉토리-삭제"><a href="#파일-및-디렉토리-삭제" class="headerlink" title="파일 및 디렉토리 삭제"></a>파일 및 디렉토리 삭제</h2><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>파일을 삭제하는 명령입니다.<br>파일을 삭제하는 것은 꼭 필요하지만 위험을 초례 할 수 있는 명령입니다.</p>
<p>추천하는 방법은 ls로 확인후 rm명령과 혼합해서 사용하는 방법을 추천합니다.<br>파일을 지울 때는 파일의 소유권과 권한에 따라 지울 수 없는 경우도 있습니다.<br>이때는 sudo 를 사용하거나 소유권을 또는 권한을 이양 받아 사용해야 합니다.</p>
<ul>
<li><code>pwd</code> 현재의 경로를 확인 합니다.</li>
<li><code>ls *.txt</code> 지울 파일을 확인합니다.</li>
<li><code>rm !!</code> 바로전 ls명을 덧붙여 사용합니다.</li>
<li><code>rm -rf</code> 디렉토리와 그안에 있는 파일도 삭제 합니다.<ul>
<li>-r 옵션은 하위에 디렉토리가 있어도 모두 지움니다.</li>
<li>-f 옵션은 지울때 확인하는 메시지 없이 지워 버립니다.</li>
</ul>
</li>
</ul>
<h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p>디렉토리를 삭제하는 명령입니다.</p>
<ul>
<li><code>rmdir deldir</code> 반드시 디렉토리가 비워져 있어야 지울 수 있습니다. </li>
</ul>
<h3 id="man-page"><a href="#man-page" class="headerlink" title="man page"></a>man page</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">이름</div><div class="line">       rm - 파일 지우기</div><div class="line"></div><div class="line">사용법</div><div class="line">       rm [-dfirvR] [--directory] [--force] [--interactive] </div><div class="line">	   [--recursive] [--help] [--version] [--verbose] name...</div><div class="line"></div><div class="line">설명</div><div class="line">       이 문서는 더이상 최신 정보를 담고 있지않다.  그래서,  몇몇 틀릴  경우도  </div><div class="line">	   있고,  부족한  경우도  있을  것이다.  완전한 매뉴얼을 원하면, Texinfo </div><div class="line">	   문서를 참조하기 바란다.</div><div class="line"></div><div class="line">       이 매뉴얼 페이지는 rm 명령의 GNU  버전에  대한  것이다.  rm 명령은 지정한 </div><div class="line">	   파일을 지운다. 초기값으로는 경로는 지우지 않는다.</div><div class="line"></div><div class="line">       만약에  파일  모드가  읽기  전용이고,  표준 입력이 tty이고, -f나 --force </div><div class="line">	   옵션이 지정되지 않으면, rm 명령은 사용자에게 지정한 파일을 정말 지울것인지 </div><div class="line">	   물어본다.  이때, `y&apos;나 `Y&apos;를 입력해 주어야지만 그 파일을 지운다.</div><div class="line"></div><div class="line">       GNU rm 명령과 같이 getopt(3) 함수를 사용하는 모든 풀그림에서는 </div><div class="line">	   -- 옵션 다음에 오는 것은 옵션이 아닌 것으로 인식한다.  즉 파일 이름이 </div><div class="line">	   `-f&apos;  라는  파일을  지우고자  한다면, 다음 두 방법을 사용한다.</div><div class="line">              rm -- -f</div><div class="line">       또는</div><div class="line">              rm ./-f</div><div class="line">       유닉스 rm 명령의 `-&apos; 문자로 시작하는 옵션들 때문에 이런 기능들이 고안된 것이다.</div><div class="line"></div><div class="line">옵션</div><div class="line">       -d, --directory</div><div class="line">              `rmdir&apos;  명령  대신에  `unlink&apos;와 함께 경로를 지운다.  </div><div class="line">			  unlink하기 전에 그 경로가 비어있는지 확인하지 않고, 그냥 unlink </div><div class="line">			  해버린다.  이렇기 때문에, 만약에 그 지워지는 경로 안에 파일 </div><div class="line">			  있다면, 그 파일들의 종속성문제가 생길 수 있다.(접근 불가능 현상, </div><div class="line">			  미아 파일.)  이 옵션을 사용 한 후에서는 fsck(8)로 파일  </div><div class="line">			  시스템을  검사하기  바란다.</div><div class="line">              이 옵션은 시스템 관리자만이 사용할 수 있다.</div><div class="line"></div><div class="line">       -f, --force</div><div class="line">              지울 파일이 없을 경우에 아무런 메시지를 보여주지 않고 그냥 넘어간다.</div><div class="line">			  이 옵션은 쉘 스크립트 안에서 사용될 때 유용하게 쓰인다.</div><div class="line"></div><div class="line">       -i, --interactive</div><div class="line">              각 파일을 하나씩 지울 것인지 사용자에게 일일이 물어본다.  이때 </div><div class="line">			  `y&apos; 나 `Y&apos;를 눌러야지만 파일이 지워진다.</div><div class="line"></div><div class="line">       -r, -R, --recursive</div><div class="line">              일반 파일이면 그냥 지우고, 경로면, 그 하위 경로와 파일을 모두 지운다.</div><div class="line"></div><div class="line">       -v, --verbose</div><div class="line">              각각의 파일 지우는 정보를 자세하게 모두 보여준다.</div><div class="line"></div><div class="line">       --help 도움말을 보여주고 마친다.</div><div class="line"></div><div class="line">       --version</div><div class="line">              버전 정보를 보여주고 마친다.</div><div class="line"></div><div class="line">번역</div><div class="line">       한글 Manpage 프로젝트 (http://man.kldp.org) 2005년 2월 14일</div><div class="line"></div><div class="line">FSF                                                                             GNU File Utilities                                                                          RM(1)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
            <tag> rm </tag>
            
            <tag> rmdir </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bash]]></title>
      <url>/2017/11/02/centos-bash/</url>
      <content type="html"><![CDATA[<h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<p>bash는 shell 프로그램 중의 하나 입니다. sh, csh, ksh, zsh등 많은 쉘이 있지만 bash shell이 거의 표준처럼 사용되고 있습니다.<br>bash는 사용자가 입력한 명령을 커널이 인식할 수 있는 명령으로 번역해 주는 interpreter 입니다.<br>shell은 내부명령과 관리에 필요한 프로그래밍 문법을 가지고 있습니다. 많은 기능이 있는 만큼 shell에 대해 한번쯤 읽어 보는 것을 추천합니다. (이게 리눅스의 알짜입니다.)<br>번역해 주신 이만용님께 감사도 표하시구요.(알짜리눅스) 참고로 수정을 하지않아 우측 스크롤 있습니다.</p>
<h4 id="bash-man"><a href="#bash-man" class="headerlink" title="bash man"></a>bash man</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div><div class="line">1011</div><div class="line">1012</div><div class="line">1013</div><div class="line">1014</div><div class="line">1015</div><div class="line">1016</div><div class="line">1017</div><div class="line">1018</div><div class="line">1019</div><div class="line">1020</div><div class="line">1021</div><div class="line">1022</div><div class="line">1023</div><div class="line">1024</div><div class="line">1025</div><div class="line">1026</div><div class="line">1027</div><div class="line">1028</div><div class="line">1029</div><div class="line">1030</div><div class="line">1031</div><div class="line">1032</div><div class="line">1033</div><div class="line">1034</div><div class="line">1035</div><div class="line">1036</div><div class="line">1037</div><div class="line">1038</div><div class="line">1039</div><div class="line">1040</div><div class="line">1041</div><div class="line">1042</div><div class="line">1043</div><div class="line">1044</div><div class="line">1045</div><div class="line">1046</div><div class="line">1047</div><div class="line">1048</div><div class="line">1049</div><div class="line">1050</div><div class="line">1051</div><div class="line">1052</div><div class="line">1053</div><div class="line">1054</div><div class="line">1055</div><div class="line">1056</div><div class="line">1057</div><div class="line">1058</div><div class="line">1059</div><div class="line">1060</div><div class="line">1061</div><div class="line">1062</div><div class="line">1063</div><div class="line">1064</div><div class="line">1065</div><div class="line">1066</div><div class="line">1067</div><div class="line">1068</div><div class="line">1069</div><div class="line">1070</div><div class="line">1071</div><div class="line">1072</div><div class="line">1073</div><div class="line">1074</div><div class="line">1075</div><div class="line">1076</div><div class="line">1077</div><div class="line">1078</div><div class="line">1079</div><div class="line">1080</div><div class="line">1081</div><div class="line">1082</div><div class="line">1083</div><div class="line">1084</div><div class="line">1085</div><div class="line">1086</div><div class="line">1087</div><div class="line">1088</div><div class="line">1089</div><div class="line">1090</div><div class="line">1091</div><div class="line">1092</div><div class="line">1093</div><div class="line">1094</div><div class="line">1095</div><div class="line">1096</div><div class="line">1097</div><div class="line">1098</div><div class="line">1099</div><div class="line">1100</div><div class="line">1101</div><div class="line">1102</div><div class="line">1103</div><div class="line">1104</div><div class="line">1105</div><div class="line">1106</div><div class="line">1107</div><div class="line">1108</div><div class="line">1109</div><div class="line">1110</div><div class="line">1111</div><div class="line">1112</div><div class="line">1113</div><div class="line">1114</div><div class="line">1115</div><div class="line">1116</div><div class="line">1117</div><div class="line">1118</div><div class="line">1119</div><div class="line">1120</div><div class="line">1121</div><div class="line">1122</div><div class="line">1123</div><div class="line">1124</div><div class="line">1125</div><div class="line">1126</div><div class="line">1127</div><div class="line">1128</div><div class="line">1129</div><div class="line">1130</div><div class="line">1131</div><div class="line">1132</div><div class="line">1133</div><div class="line">1134</div><div class="line">1135</div><div class="line">1136</div><div class="line">1137</div><div class="line">1138</div><div class="line">1139</div><div class="line">1140</div><div class="line">1141</div><div class="line">1142</div><div class="line">1143</div><div class="line">1144</div><div class="line">1145</div><div class="line">1146</div><div class="line">1147</div><div class="line">1148</div><div class="line">1149</div><div class="line">1150</div><div class="line">1151</div><div class="line">1152</div><div class="line">1153</div><div class="line">1154</div><div class="line">1155</div><div class="line">1156</div><div class="line">1157</div><div class="line">1158</div><div class="line">1159</div><div class="line">1160</div><div class="line">1161</div><div class="line">1162</div><div class="line">1163</div><div class="line">1164</div><div class="line">1165</div><div class="line">1166</div><div class="line">1167</div><div class="line">1168</div><div class="line">1169</div><div class="line">1170</div><div class="line">1171</div><div class="line">1172</div><div class="line">1173</div><div class="line">1174</div><div class="line">1175</div><div class="line">1176</div><div class="line">1177</div><div class="line">1178</div><div class="line">1179</div><div class="line">1180</div><div class="line">1181</div><div class="line">1182</div><div class="line">1183</div><div class="line">1184</div><div class="line">1185</div><div class="line">1186</div><div class="line">1187</div><div class="line">1188</div><div class="line">1189</div><div class="line">1190</div><div class="line">1191</div><div class="line">1192</div><div class="line">1193</div><div class="line">1194</div><div class="line">1195</div><div class="line">1196</div><div class="line">1197</div><div class="line">1198</div><div class="line">1199</div><div class="line">1200</div><div class="line">1201</div><div class="line">1202</div><div class="line">1203</div><div class="line">1204</div><div class="line">1205</div><div class="line">1206</div><div class="line">1207</div><div class="line">1208</div><div class="line">1209</div><div class="line">1210</div><div class="line">1211</div><div class="line">1212</div><div class="line">1213</div><div class="line">1214</div><div class="line">1215</div><div class="line">1216</div><div class="line">1217</div><div class="line">1218</div><div class="line">1219</div><div class="line">1220</div><div class="line">1221</div><div class="line">1222</div><div class="line">1223</div><div class="line">1224</div><div class="line">1225</div><div class="line">1226</div><div class="line">1227</div><div class="line">1228</div><div class="line">1229</div><div class="line">1230</div><div class="line">1231</div><div class="line">1232</div><div class="line">1233</div><div class="line">1234</div><div class="line">1235</div><div class="line">1236</div><div class="line">1237</div><div class="line">1238</div><div class="line">1239</div><div class="line">1240</div><div class="line">1241</div><div class="line">1242</div><div class="line">1243</div><div class="line">1244</div><div class="line">1245</div><div class="line">1246</div><div class="line">1247</div><div class="line">1248</div><div class="line">1249</div><div class="line">1250</div><div class="line">1251</div><div class="line">1252</div><div class="line">1253</div><div class="line">1254</div><div class="line">1255</div><div class="line">1256</div><div class="line">1257</div><div class="line">1258</div><div class="line">1259</div><div class="line">1260</div><div class="line">1261</div><div class="line">1262</div><div class="line">1263</div><div class="line">1264</div><div class="line">1265</div><div class="line">1266</div><div class="line">1267</div><div class="line">1268</div><div class="line">1269</div><div class="line">1270</div><div class="line">1271</div><div class="line">1272</div><div class="line">1273</div><div class="line">1274</div><div class="line">1275</div><div class="line">1276</div><div class="line">1277</div><div class="line">1278</div><div class="line">1279</div><div class="line">1280</div><div class="line">1281</div><div class="line">1282</div><div class="line">1283</div><div class="line">1284</div><div class="line">1285</div><div class="line">1286</div><div class="line">1287</div><div class="line">1288</div><div class="line">1289</div><div class="line">1290</div><div class="line">1291</div><div class="line">1292</div><div class="line">1293</div><div class="line">1294</div><div class="line">1295</div><div class="line">1296</div><div class="line">1297</div><div class="line">1298</div><div class="line">1299</div><div class="line">1300</div><div class="line">1301</div><div class="line">1302</div><div class="line">1303</div><div class="line">1304</div><div class="line">1305</div><div class="line">1306</div><div class="line">1307</div><div class="line">1308</div><div class="line">1309</div><div class="line">1310</div><div class="line">1311</div><div class="line">1312</div><div class="line">1313</div><div class="line">1314</div><div class="line">1315</div><div class="line">1316</div><div class="line">1317</div><div class="line">1318</div><div class="line">1319</div><div class="line">1320</div><div class="line">1321</div><div class="line">1322</div><div class="line">1323</div><div class="line">1324</div><div class="line">1325</div><div class="line">1326</div><div class="line">1327</div><div class="line">1328</div><div class="line">1329</div><div class="line">1330</div><div class="line">1331</div><div class="line">1332</div><div class="line">1333</div><div class="line">1334</div><div class="line">1335</div><div class="line">1336</div><div class="line">1337</div><div class="line">1338</div><div class="line">1339</div><div class="line">1340</div><div class="line">1341</div><div class="line">1342</div><div class="line">1343</div><div class="line">1344</div><div class="line">1345</div><div class="line">1346</div><div class="line">1347</div><div class="line">1348</div><div class="line">1349</div><div class="line">1350</div><div class="line">1351</div><div class="line">1352</div><div class="line">1353</div><div class="line">1354</div><div class="line">1355</div><div class="line">1356</div><div class="line">1357</div><div class="line">1358</div><div class="line">1359</div><div class="line">1360</div><div class="line">1361</div><div class="line">1362</div><div class="line">1363</div><div class="line">1364</div><div class="line">1365</div><div class="line">1366</div><div class="line">1367</div><div class="line">1368</div><div class="line">1369</div><div class="line">1370</div><div class="line">1371</div><div class="line">1372</div><div class="line">1373</div><div class="line">1374</div><div class="line">1375</div><div class="line">1376</div><div class="line">1377</div><div class="line">1378</div><div class="line">1379</div><div class="line">1380</div><div class="line">1381</div><div class="line">1382</div><div class="line">1383</div><div class="line">1384</div><div class="line">1385</div><div class="line">1386</div><div class="line">1387</div><div class="line">1388</div><div class="line">1389</div><div class="line">1390</div><div class="line">1391</div><div class="line">1392</div><div class="line">1393</div><div class="line">1394</div><div class="line">1395</div><div class="line">1396</div><div class="line">1397</div><div class="line">1398</div><div class="line">1399</div><div class="line">1400</div><div class="line">1401</div><div class="line">1402</div><div class="line">1403</div><div class="line">1404</div><div class="line">1405</div><div class="line">1406</div><div class="line">1407</div><div class="line">1408</div><div class="line">1409</div><div class="line">1410</div><div class="line">1411</div><div class="line">1412</div><div class="line">1413</div><div class="line">1414</div><div class="line">1415</div><div class="line">1416</div><div class="line">1417</div><div class="line">1418</div><div class="line">1419</div><div class="line">1420</div><div class="line">1421</div></pre></td><td class="code"><pre><div class="line">BASH(1)                                                                                                                                                               General Commands Manual                                                                                                                                                              BASH(1)</div><div class="line"></div><div class="line">이름</div><div class="line">       bash - GNU Bourne-Again SHell</div><div class="line"></div><div class="line">개요</div><div class="line">       bash [옵션] [파일]</div><div class="line"></div><div class="line">저작권</div><div class="line">       Bash is Copyright (C) 1989, 1991 by the Free Software Foundation, Inc.</div><div class="line"></div><div class="line">설명</div><div class="line">       Bash 는 sh-호환의 명령 언어 해석기로서 표준 입력 또는 파일로부터 읽어들인 명령을 실행한다.  Bash 는 또한  콘쉘 과 C 쉘(ksh, csh)로부터 유용한 기능을 도입하였다.</div><div class="line"></div><div class="line">       Bash 는 IEEE POSIX 쉘과 도구 명세(IEEE Working Group 1003.2)에 호환되도록 쉘을 구현하겠다는 목표를 가지고 있다.</div><div class="line"></div><div class="line">옵션</div><div class="line">       <span class="built_in">set</span> 내부 명령 기술 부분에서 설명하고 있는 단일 문자 쉘 옵션 외에도 bash는 실행될 때 다음 플래그(flag)도 해석한다 (역자 주 : 앞으로 option은 옵션, flag는 플래그, parameter는 매개변수, 그리고 argument는 전달인수 또는 간단히 인수로 해석한다):</div><div class="line"></div><div class="line">       -c 문자열 -c 플래그가 있으면, 문자열 로부터 명령을 읽어들인다.  문자열 뒤에 전달인수가 있으면, 그 전달인수는 <span class="variable">$0</span> 부터 시작하여 위치 매개변수로 지정된다.</div><div class="line">       -i        -i 플래그가 있으면, 쉘은 대화형 (interactive)모드로 동작한다.</div><div class="line">       -s        -s 플래그가 있을 때 또는 옵션 처리 후에 남은 인수가 없을 때에는 표준 입력으로부터 명령을 읽어들인다.  이 옵션을 사용하여 대화형 쉘을 실행시킬 때 위치 매개변수를 설정할 수 있다.</div><div class="line">       -         - 한 글자는 옵션이 끝났음을 알리는 표시이며 더 이상 옵션 처리를 하지 않도록 지시한다.  - 다음의 인수는 모두 파일 이름과 인수로 받아들여진다.  글자 그대로 -라는 인수를 표현하려면 -- 를 사용한다.</div><div class="line"></div><div class="line">       Bash 는 또한 여러 글자 옵션을 해석한다.  이 옵션을 인식시키려면 명령행에서 단일 글자 옵션보다 앞에 적어야 한다.</div><div class="line"></div><div class="line">       -norc     쉘이 대화형 모드일 때 개인 초기화 파일인 ~/.bashrc 실행하지 않도록 한다.  쉘을 실행할 때 sh 라는 이름으로 실행하면 기본적으로 이 옵션이 켜진다.</div><div class="line">       -noprofile</div><div class="line">                 시스템 전역 시동 파일 /etc/profile 또는 ~/.bash_profile, ~/.bash_login, ~/.profile 와 같은 모든 개인 초기화 파일을 읽지 않도록 한다.  bash 가 로그인 쉘로 실행될 때에는 기본적으로 이 모든 파일을 읽는다.( 뒤에 나오는 INVOCATION 참고 ).</div><div class="line">       -rcfile 파일</div><div class="line">                 쉘이 대화형 모드일 때( INVOCATION 참고 ) 표준적인 개인 초기화 파일인 ~/.bashrc 대신 파일 의 명령을 실행한다.</div><div class="line">       -version  실행할 때 bash 의 버전 번호를 보여준다.</div><div class="line">       -quiet    시작할 때 상세한 정보를 보여주지 않는다.(즉 쉘 버전과 기타 정보를 표시하지 않는다.)  기본값이다.</div><div class="line">       -login    bash 가 마치 로그인 쉘로 시작된 것처럼 행동하게 한다.</div><div class="line">       -nobraceexpansion</div><div class="line">                 중괄호 확장을 하지 않는다.  ( 뒤에 나오는 중괄호(Brace) 확장 참고 ).</div><div class="line">       -nolineediting</div><div class="line">                 대화형 모드에서 명령을 읽을 때 GNU readline 라이브러리를 사용하지 않는다.</div><div class="line">       -posix    기본적으로 POSIX 1003.2 표준과 다른 bash의 행동 방식을 바꾸어 표준에 부합되도록 지시한다.</div><div class="line"></div><div class="line">인수</div><div class="line">       옵션  처리 후 남은 인수가 있거나 -c 또는 -s 옵션이 없는 경우에는, 첫번째 인수를 쉘 명령을 포함하고 있는 파일 이름으로 간주한다.  bash 가 이런 방식을 실행되면, is invoked <span class="keyword">in</span> this fashion, <span class="variable">$0</span> 는 파일의 이름으로 설정되고 위치 매개변수는 남은 인수로 설정된다.  Bash 는 이 파일의 명령을 실행하고 종료한다.  스크립트에서 실행된 마지막 명령의 종료 상태가</div><div class="line">       Bash 의 종료 상태로 된다.</div><div class="line"></div><div class="line">정의</div><div class="line">       공백(blank)</div><div class="line">              스페이스 또는 탭.</div><div class="line">       단어(word)</div><div class="line">              쉘에 의해 하나의 단위로 간주되는 연속된 문자들.  토큰(token) 이라고 부르기도 한다.</div><div class="line">       이름(name)</div><div class="line">              알파벳, 숫자 문자와 언더스코어(_)로만 이루어져 있고 알파벳 문자와 언더스코어로 첫 문자를 시작하는 단어 를 말한다.  식별자(identifier) 라고 부르기도 한다.</div><div class="line">       메타문자(metacharacter)</div><div class="line">              쿼우트(quote) 처리하지 않을 때 단어을 구별하게 만드는 문자.  다음과 같다:</div><div class="line">              |  &amp; ; ( ) &lt; &gt; 스페이스 탭</div><div class="line">       제어 연산자(control operator)</div><div class="line">              제어 기능을 수행하는 토큰이다.  다음 기호에 해당한다:</div><div class="line">              || &amp; &amp;&amp; ; ;; ( ) | &lt;newline&gt;</div><div class="line"></div><div class="line">예약어(RESERVED WORDS)</div><div class="line">       예약어란 쉘에 있어 특별한 의미를 갖는 단어를 말한다.  다음 단어는 쿼우트하지 않으면 예약어로 인식하거나 또는 간단한 명령의 첫번째 단어 또는 <span class="keyword">case</span> 나 <span class="keyword">for</span> 명령의 세번째 단어로 인식한다: ( 쉘 문법 참고 )</div><div class="line"></div><div class="line">       ! <span class="keyword">case</span>  <span class="keyword">do</span> <span class="keyword">done</span> <span class="keyword">elif</span> <span class="keyword">else</span> <span class="keyword">esac</span> <span class="keyword">fi</span> <span class="keyword">for</span> <span class="keyword">function</span> <span class="keyword">if</span> <span class="keyword">in</span> select <span class="keyword">then</span> until <span class="keyword">while</span> &#123; &#125;</div><div class="line"></div><div class="line">쉘 문법(SHELL GRAMMAR)</div><div class="line">   간단한 명령</div><div class="line">       간단한 명령이란 변수 지정(선택적, 역자 주: 원어로 optional이며 있어도 되고 없어도 된다는 의미로 사용한다.) 다음에 공백으로 구분된 단어와 리다이렉션이 뒤따르고 제어 문자로 끝나는 연속된 문자열을 말한다.  첫번째 단어는 실행할 명령이 된다.  나머지 단어는 실행 명령에 인수로 전달된다.</div><div class="line"></div><div class="line">       간단한 명령의 반환값은 종료 상태이거나 시그널 n.  로 종료된 경우에는 128+n이 된다.</div><div class="line"></div><div class="line">   파이프라인</div><div class="line">       파이프라인이란 | 문자로 구분된 한 개 이상의 명령이 연속되어 나오는 것을 말한다.  파이프라인의 형식은 다음과 같다:</div><div class="line"></div><div class="line">              [ ! ] 명령 [ | 명령2 ... ]</div><div class="line"></div><div class="line">       명령 의 표준 출력은 명령2 의 표준 입력으로 연결된다.  파이프 라인 연결은 명령에서 명시한 리다이렉션 이전에 수행된다.  ( 리다이렉션 참고 ).</div><div class="line"></div><div class="line">       예약어인 !  가 파이프라인 앞에 나오면 파이프라인의 종료 상태값을 마지막 명령의 종료 상태에 대한 논리적인 NOT으로 설정한다.  그렇지 않은 일반적인 경우에는 마지막 명령의 종료 상태값이 파이프라인의 종료 상태값로 된다.  쉘은 값을 반환하기 전에 파이프라인에 연결되어 있는 모든 명령이 종료하기를 기다린다.</div><div class="line"></div><div class="line">       파이프라인의 각 명령은 개별적인 프로세스로 실행된다.(즉, 각자의 서브쉘 안에서 실행된다.)</div><div class="line"></div><div class="line">   리스트(Lists)</div><div class="line">       리스트란 한 개 이상의 파이프라인이 ;, &amp;, &amp;&amp;, ⎪⎪ 연산자 중 하나에 의해 구분되고 ;, &amp;, &lt;개행문자&gt; 중 하나로 끝나는 연속된 문자열을 말한다.</div><div class="line"></div><div class="line">       리스트 연산자 중에서, &amp;&amp; 와 ⎪⎪ 는 같은 우선권을 가지고 있으며 그 다음으로 ; 와 &amp; 가 같은 우선권을 가지고 있다.</div><div class="line"></div><div class="line">       명령이 제어 연산자인 &amp; 로 끝나면, 쉘은 그 명령을 서브쉘에서 백그라운드로 실행한다.  쉘은 명령이 종료하길 기다리지 않으면 반환값은 0 이다.  ; 로 구분된 명령들은 순차적으로 실행된다; 쉘은 차례대로 각 명령이 종료하기를 기다린다.  반환 상태값은 마지막으로 실행한 명령의 종료 상태값을 따른다.</div><div class="line"></div><div class="line">       제어 연산자 &amp;&amp; 와 ⎪⎪ 는 각각 AND 리스트와 OR 리스트를 나타낸다.  AND 리스트는 다음과 같은 형태를 가진다.</div><div class="line"></div><div class="line">              명령 &amp;&amp; 명령2</div><div class="line"></div><div class="line">       명령2 는 명령 이 0 이라는 종료 상태값을 반환할 때에만 실행된다.</div><div class="line"></div><div class="line">       OR 리스트는 다음과 같은 형태를 가진다.</div><div class="line"></div><div class="line">              명령 ⎪⎪ 명령2</div><div class="line"></div><div class="line">       명령2 는 명령 의 종료 상태값이 0 이 아닌 값일 때에만 실행된다.  AND와 OR 리스트의 반환 상태값은 리스트에서 마지막으로 실행된 명령의 종료 상태값을 따른다.</div><div class="line">   복합 명령</div><div class="line">       복합 명령이란 다음 중 하나를 말한다:</div><div class="line"></div><div class="line">       (리스트)</div><div class="line">              리스트가 서브셀 안에서 실행된다.  명령이 완료된 후에는 쉘의 환경에 영향이 미치는 변수 지정과 내부 명령의 효과가 사라진다.  반환 상태값은 리스트 의 종료 상태값을 따른다.</div><div class="line"></div><div class="line">       &#123; 리스트; &#125;</div><div class="line">              리스트는 그냥 현재의 쉘 환경에서 실행된다.  known as a 그룹 명령 이라고 부르기도 한다.  반환 상태값은 리스트 의 종료 상태값을 따른다.</div><div class="line"></div><div class="line">       <span class="keyword">for</span> 이름 [ <span class="keyword">in</span> 단어; ] <span class="keyword">do</span> 리스트 ; <span class="keyword">done</span></div><div class="line">              <span class="keyword">in</span> 다음의 단어 리스트가 확장되어 처리 항목 리스트를 생성한다.  리스트가 실행될 때마다 변수 이름에 리스트의 원소가 순서대로 설정된다. <span class="keyword">in</span> 단어가 생략되면 <span class="keyword">for</span> 명령은 설정된 각 위치 매개변수에 대하여 리스트를 한 번씩 실행한다.  ( PARAMETERS 참고 ).</div><div class="line"></div><div class="line">       select 이름 [ <span class="keyword">in</span> 단어; ] <span class="keyword">do</span> 리스트 ; <span class="keyword">done</span></div><div class="line">              <span class="keyword">in</span> 다음의 단어 리스트가 확장되어 처리 항목 리스트를 생성한다.  확장된 단어 목록에 숫자를 붙여 표준 에러로 출력한다.  <span class="keyword">in</span> 단어가 생략되면 위치 매개변수를 출력한다.  ( PARAMETERS 참고 ).  PS3 프롬프트가 표시되고 표준 입력으로부터 한 줄을 입력받는다.  입력행의 내용에 표시된 단어 중 하나에 해당하는 숫자가 포함되어  있으면  이름  은  그  단어로</div><div class="line">              설정된다.   빈 줄일 때에는 단어 리스트와 프롬프트가 다시 표시된다.  EOF를 만나면 명령이 종료한다.  그 밖의 다른 값이 입력되면 이름 이 널(null)로 설정된다.  읽어 들인 행은 변수 REPLY 에 저장된다.  <span class="built_in">break</span> 또는 <span class="built_in">return</span> 명령을 만나기 전까지 각각의 선택에 대하여 리스트 가 실행된다.  select 의 종료 상태값은 리스트 안에서 실행된 마지막 명령의 종료</div><div class="line">              상태값이거나 또는 아무 명령도 실행되지 않은 경우 0 이 된다.</div><div class="line"></div><div class="line">       <span class="keyword">case</span> 단어 <span class="keyword">in</span> [ 패턴 [ | 패턴 ] ... ) 리스트 ;; ] ... <span class="keyword">esac</span></div><div class="line">              <span class="keyword">case</span> 명령은 우선 단어를 확장한 다음, 경로명 확장에서와 똑같은 일치 규칙을 사용하여 차례대로 패턴과의 매치를 시도한다.  ( Pathname Expansion 참고 ).  일치하는 것이 발견되면 해당하는 리스트가 실행된다.  첫번째 일치 후에는 다음 일치 내용을 찾지 않는다.  아무 패턴과도 일치하지 않으면 0 이라는 종료 상태값을 갖는다.  일치하는 것이  있을  때에는</div><div class="line">              리스트에서 실행된 마지막 명령의 종료 상태값을 따른다.</div><div class="line"></div><div class="line">       <span class="keyword">if</span> 리스트 <span class="keyword">then</span> 리스트 [ <span class="keyword">elif</span> 리스트 <span class="keyword">then</span> 리스트 ] ... [ <span class="keyword">else</span> 리스트 ] <span class="keyword">fi</span></div><div class="line">              <span class="keyword">if</span> 리스트 가 실행된다. 그 종료 상태값이 0 이면 <span class="keyword">then</span> 리스트를 실행하고 명령을 마친다.  0 이 아니면 <span class="keyword">elif</span> 리스트가 있는 경우 이 부분을 실행한다.  종료 상태값은 마지막 실행 명령의 종료 상태값이 되거나 테스트한 조건이 하나도 참이 아닌 경우에는 0 이 된다.</div><div class="line"></div><div class="line">       <span class="keyword">while</span> 리스트 <span class="keyword">do</span> 리스트 <span class="keyword">done</span></div><div class="line">       until 리스트 <span class="keyword">do</span> 리스트 <span class="keyword">done</span></div><div class="line">              <span class="keyword">while</span>  명령은 리스트의 마지막 명령 결과가 0 인 동안 <span class="keyword">do</span> 리스트를 계속 실행한다. until 명령은 <span class="keyword">while</span> 명령과 같으나 테스트 결과를 반대로 처리한다.  <span class="keyword">do</span> 리스트 는 리스트 의 마지막 명령이 0 아닌 종료 상태값을 가지는 동안 실행된다.  <span class="keyword">while</span>과 until 명령의 종료 상태값은 마지막 <span class="keyword">do</span> 리스트 명령의 상태 종료값을 따른다.  또는 아무 것도 실행되지 않은 경우</div><div class="line">              0 이 된다.</div><div class="line"></div><div class="line">       [ <span class="keyword">function</span> ] 이름 () &#123; 리스트; &#125;</div><div class="line">              이름의 함수를 정의한다.  함수의 몸체 부분은 &#123; 와 &#125; 사이에 있는 명령 리스트 이다.  간단한 명령의 이름으로 이름이 나올 때마다 이 리스트가 실행된다.  함수의 종료 상태값은 몸체 안에서 실행된 마지막 명령의 종료 상태값을 따른다.  ( FUNCTIONS 참고.)</div><div class="line"></div><div class="line">주석(COMMENTS)</div><div class="line">       비-대화형 쉘 또는 <span class="built_in">set</span> 내부 기능을 작동하도록 하기 위해 -o interactive-comments 옵션을 주어 실행한 대화형 쉘 안에서, <span class="comment"># 로 시작하는 단어와 그 행의 모든 단어는 무시한다.  -o interactive-comments 옵션 없이 대화형 쉘을 시작하면 주석을 사용할 수 없다.</span></div><div class="line"></div><div class="line">쿼우팅(QUOTING)</div><div class="line">       쿼우팅은 쉘에 있어 특별한 의미를 갖는 문자나 단어의 그 의미를 제거할 때 사용한다.  또한 특수 문자에 대한 특별한 처리를 하지 못하게 하고 예약된 단어의 예약적 의미를 없애고 매개변수 확장을 하지 못하도록 할 때에도 쿼우팅을 사용한다.  (역자 주 : Quote에 대하여 여러 가지 한글 번역이 가능하겠으나 유닉스 쉘에서의 특별한 의미를 전달할 수 없다고 판단하여</div><div class="line">       그냥 발음나는 대로 쿼우트라고 번역하였다.)</div><div class="line"></div><div class="line">       DEFINITIONS 섹션에 나열한 메타문자 각각은 쉘에서 특별한 의미를 갖고 있기 때문에 글자 그대로를 표현하려면 쿼우트해야 한다.  3 가지 쿼우트 메커니즘이 있다: 이스케이프(escape) 문자, 싱글 쿼우트, 더블 쿼우트가 있다.</div><div class="line"></div><div class="line">       쿼우트하지  않은  백슬래쉬(\)가 이스케이프 문자 이다.  &lt;개행문자&gt;를 제외하고 이스케이프 문자는 그 다음에 뒤 따라 오는 문자의 글자 그대로의 의미를 보존한다.  \&lt;개행문자&gt;가 나오고 백슬래쉬를 쿼우트하지 않았을 때에는 \&lt;개행문자&gt;를 행 계속(역자 주 : 긴 명령을 한 줄에 적을 수 없을 때 행 끝에서 \&lt;개행문자&gt;를 입력하면 다음 줄에 계속해서 입력할 수 있다)</div><div class="line">       을 뜻한다.(즉, 그 자체는 쉘에 의해 무시된다.)</div><div class="line"></div><div class="line">       싱글 쿼우트의 묶는 문자는 묶인 문자의 보이는 그대로의 값을 보존한다.  백슬래쉬를 앞에 적는다 해도 싱글 쿼우트 안에 싱글 쿼우트가 다시 들어 갈 수는 없다.</div><div class="line"></div><div class="line">       더블 쿼우트의 묶는 문자는 몇 가지 예외를 제외하고 쿼우트 안에 들어있는 모든 문자의 보이는 그대로의 의미를 보존한다.  $, `, 와 \ 는 예외의 경우이다.  $ 와 ` 문자는 더블 쿼우트 안에서도 특별한 의미를 유지한다.  백슬래쉬는 그 뒤에 다음 문자가 뒤따라 나올 때에만 특별한 의미를 갖는다: $, `, <span class="string">", \, 또는  &lt;개행문자&gt;.   더블  쿼우트  안의  더블  쿼우트는</span></div><div class="line"><span class="string">       백슬래쉬를 사용하여 포함시킬 수 있다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       특별한 매개변수인 * 와 @ 는 더블 쿼우트 안에서 특별한 의미를 지닌다.  ( PARAMETERS 참고 ).</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">매개변수(PARAMETERS)</span></div><div class="line"><span class="string">       매개변수 란 값을 저장하는 개체로서 기존의 프로그램 언어에서의 변수와 어느 정도 비슷하다.  이름, 숫자, 또는 특별한 매개변수(Special Parameters) 섹션에서 나열한 특수 문자 중 하나가 될 수 있다.  쉘에 있어 변수 란 이름 으로 가리키는 매개변수이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       값을 지정하면 매개변수가 설정된다.  널 문자열도 유효한 값으로 간주한다.  일단 변수가 설정되면 unset 내부 명령을 통해서만 설정 해제할 수 있다.  ( 쉘 내부 명령(SHELL BUILTIN COMMANDS) 참고 ).</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       A 변수 는 다음과 같은 문장을 통해 지정할 수 있다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              이름=[값]</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       If  값  을 지정하지 않으면 변수는 널 문자열을 값으로 갖게 된다.  모든 변수 는 틸드 확장, 매개변수와 변수 확장, 명령 치환, 연산에 의한 확장, 쿼우트 제거 등의 과정을 거친 다음, 그 결과를 저장한다.  변수의 -i 속성이 설정되어 있는 상태라면 ( 쉘 내부 명령 섹션의 declare 참고 ) 값 은 $[...] 문법이 아니더라도 연산에 의한 확장을 거친다.  특별한 매개변수</span></div><div class="line"><span class="string">       섹션에서 설명할 "</span><span class="variable">$@</span><span class="string">"를 제외하고 단어 분리는 하지 않는다.  경로명 확장은 이루어지지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   위치 매개변수</span></div><div class="line"><span class="string">       위치 매개변수 란 0 하나만 적는 것을 제외하고 숫자로 지시하는 매개변수를 말한다.  위치 매개변수는 쉘이 실행될 때 인수로부터 지정되거나 또는 set 내부 명령을 사용하여 재지정할 수 있다.  위치 매개변수는 변수 지정 문장을 사용하여 지정할 수 없다.  위치 매개변수는 쉘 함수가 실행될 때 일시적으로 치환된다.  ( 함수(FUNCTIONS) 참고 ).</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       1 개 이상의 숫자로 구성된 위치 매개변수를 확장할 때에는 중괄호로 묶어주어야 한다.  ( 확장(EXPANSION) 참고 ).</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   특별한 매개변수</span></div><div class="line"><span class="string">       쉘은 몇 가지 매개변수를 특별하게 처리한다.  이러한 매개변수는 참조만 가능할 뿐 값을 지정할 수는 없다.</span></div><div class="line"><span class="string">       *      1 부터 시작하여 위치 매개변수로 확장한다.  더블 쿼우트에서 확장이 이루어지면 각 매개변수 값을 한 단어로 확장한다.  각 단어는 IFS 특별 변수의 첫번째 문자로 구분한다.  다시 말해, ``$*'' 는 ``<span class="variable">$1c</span><span class="variable">$2c</span>...''  와 같다.  여기서 c 는 IFS 변수의 첫번째 문자이다.  IFS 가 널이거나 해제되어 있으며 매개변수는 스페이스로 구분한다.</span></div><div class="line"><span class="string">       @      1 부터 시작하여 위치 매개변수로 확장한다.  더블 쿼우트 안에서 확장이 이루어질 때에는 각 매개변수가 개별적인 단어로 확장한다.  즉 `` <span class="variable">$@</span>'' 는 ``<span class="variable">$1</span>'' ``<span class="variable">$2</span>'' ... 와 같다.  위치 매개변수가 없을 때에는 ``<span class="variable">$@</span>'' 와 <span class="variable">$@</span> 은 아무 것으로도 확장되지 않는다.(즉, 없었던 것처럼 제거된다.)</span></div><div class="line"><span class="string">       #      십진수로 위치 매개변수의 갯수로 확장한다.</span></div><div class="line"><span class="string">       ?      최근에 실행된 포그라운드 파이프라인의 상태값으로 확장한다.</span></div><div class="line"><span class="string">       -      실행하자마자 set 내부 명령을 통해 또는 쉘 자체에 의해 (예를 들어 -i 플래그) 설정된 현재 옵션 플래그로 확장한다.</span></div><div class="line"><span class="string">       $      쉘의 프로세스 ID로 확장한다.  () 서브쉘에서는 서브쉘이 아닌 현재 쉘의 프로세스 ID로 확장한다.</span></div><div class="line"><span class="string">       !      최근에 실행한 백그라운드(비동기) 명령의 프로세스 ID로 확장한다.</span></div><div class="line"><span class="string">       0      쉘 또는 쉘 스크립트의 이름으로 확장한다.  쉘 초기화 과정 중에 설정된다.  bash 이 명령을 포함하는 파일 이름으로 실행되었다면, <span class="variable">$0</span> 는 그 파일의 이름으로 설정된다.  bash 가 -c 옵션을 가지고 실행되었다면 <span class="variable">$0</span> 는 실행될 문자열(있는 경우) 뒤 첫번째 인수로 설정된다.  그렇ㅈ 않은 경우 bash 를 실행할 때 0 번 인수로 주어진 경로명으로 설정된다.</span></div><div class="line"><span class="string">       _      지난 번 명령의 마지막 인수(확장되고 난 형태)로 확장된다.  실행된 각 명령의 완전한 경로명으로도 설정되며 그 명령에게 export한 환경에 위치한다.  (역자 주 : 쉘의 용어에서 export의 마땅한 한글 번역을 찾지 못한 상태이다)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   쉘 변수</span></div><div class="line"><span class="string">       다음 변수는 쉘에 의해 설정된다:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       PPID   쉘의 부모 프로세스 ID.</span></div><div class="line"><span class="string">       PWD    cd 명령으로 설정된 현재 작업 디렉토리.</span></div><div class="line"><span class="string">       OLDPWD cd 명령에 의해 설정되며 바로 이전 작업 디렉토리.</span></div><div class="line"><span class="string">       REPLY  인수가 제공되지 않은 경우 read 내부 명령으로 읽어 들인 입력 행으로 설정</span></div><div class="line"><span class="string">       UID    현재 사용자의 사용자 ID로 확장. 쉘 시동 시 초기화됨.</span></div><div class="line"><span class="string">       EUID   현재 사용자의 유효 사용자 ID로 확장. 쉘 시동 시 초기화됨.</span></div><div class="line"><span class="string">       BASH   현재 실행 중인 bash 를 실행할 때 사용한 완전한 경로명으로 확장.</span></div><div class="line"><span class="string">       BASH_VERSION</span></div><div class="line"><span class="string">              현재 실행 중인 bash 인스턴스(instance)의 버전 번호로 확장.</span></div><div class="line"><span class="string">       SHLVL  bash 인스턴스를 실행할 때마다 1 씩 증가하는 변수</span></div><div class="line"><span class="string">       RANDOM 이 매개변수를 참조할 때마다 무작위 정수가 발생된다.  무작위 정수의 순서는 RANDOM 에 값을 지정하면 초기화된다.  If RANDOM 를 unset하면 특별한 속성을 잃게 된다.  그 뒤에 다시 설정해도 잃은 속성은 돌아오지 않는다.</span></div><div class="line"><span class="string">       SECONDS</span></div><div class="line"><span class="string">              이 매개변수를 참조할 때마다 쉘이 시작한 시점부터 경과된 시간을 반환한다.  SECONDS 에 값을 지정하면, 그 다음부터는 지정한 시점으로부터 경과한 시간 더하기 지정한 값이 반환된다.  SECONDS 를 unset 하면 특별한 속성을 잃게 된다. 그 뒤에 다시 설정해도 잃은 속성은 돌아오지 않는다.</span></div><div class="line"><span class="string">       LINENO 참조할 때마다 쉘은 이 변수를 스크립트 또는 함수 내에서의 지금 현재 시점에서의 순차적인 행 번호(1부터 시작)을 십진수로 치환해준다.  스크립트나 함수 안이 아닌 경우, 이 값은 의미가 없다.  함수 안에서의 값은 명령이 소스에서 위치하는 행 번호가 아니며 (이 정보는 함수가 실행될 때 사라진다.)  현재 함수 내에서 실행된 간단한  명령  의  갯수에  대한</span></div><div class="line"><span class="string">              근사값이라고 생각하면 된다.  If LINENO 를 unset 하면 특별한 속성을 잃게 된다. 그 뒤에 다시 설정해도 잃은 속성은 돌아오지 않는다.</span></div><div class="line"><span class="string">       HISTCMD</span></div><div class="line"><span class="string">              현재 명령의 히스토리 번호 또는 히스토리 리스트에서의 인덱스.  HISTCMD 를 unset 하면 특별한 속성을 잃게 된다. 그 뒤에 다시 설정해도 잃은 속성은 돌아오지 않는다.</span></div><div class="line"><span class="string">       OPTARG getopts 내부 명령에 의해 처리된 마지막 옵션 인수의 값 ( 쉘 내부 명령 참고 ).</span></div><div class="line"><span class="string">       OPTIND getopts 내부 명령에 의해 처리된 다음 인수의 인덱스 ( 쉘 내부 명령 참고 ).</span></div><div class="line"><span class="string">       HOSTTYPE</span></div><div class="line"><span class="string">              자동으로 bash 가 실행 중인 머신의 타입을 기술하는 고유한 문자열로 지정됨.  기본값은 시스템에 따라 다르다.</span></div><div class="line"><span class="string">       OSTYPE 자동으로 bash 가 실행 중인 운영체제의 타입을 기술하는 고유한 문자열로 지정됨.  기본값은 시스템에 따라 다르다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       다음 변수는 쉘에서 사용한다.  몇몇 경우 bash 는 변수에 기본값을 지정한다; 이런 경우에 대해서는 언급한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       IFS    내부 필드 구분자(Internal Field Separator) 는 확장 후에 단어를 분리하고 read 내부 명령으로 읽은 행을 분리할 때 사용된다.  that is used 기본값은 ``&lt;스페이스&gt;&lt;탭&gt;&lt;개행문자&gt;''이다.</span></div><div class="line"><span class="string">       PATH   명령을 찾을 검색 경로이다.  쉘이 명령을 찾아 볼 디렉토리 목록을 콜론으로 구분하여 지정한다.  ( 명령 실행(COMMAND EXECUTION) 참고 ).  기본값은 시스템에 따라 다르며 관리 bash 를 설치하는 관리자가 설정할 수 있다.  일반적으로 ``/usr/gnu/bin:/usr/local/bin: /usr/ucb:/bin:/usr/bin:'' 라는 값을 갖는다.</span></div><div class="line"><span class="string">       HOME   현재 사용자의 홈 디렉토리; cd 내부 명령의 기본 인수이다.</span></div><div class="line"><span class="string">       CDPATH cd 명령에서 사용하는 검색 경로.  cd 명령에서 사용한 목적지 디렉토리를 찾아 볼 디렉토리를 콜론으로 구분하여 적는다.  예를 들어 ``.:~:/usr''와 같은 값으로 설정한다.</span></div><div class="line"><span class="string">       ENV    bash가 쉘 스크립트를 실행할 때 매개변수가 설정되어 있으면, 그 값은 .bashrc 와 같이 쉘을 초기화하는 명령을 담고 있는 파일의 이름으로 해석한다.  The value of ENV 의 값은 경로명으로 해석되기 전에 매개변수 확장, 명령 치환, 연산 확장을 거쳐 설정된다.  결과로 나오는 경로명 검색에서 PATH 는 사용하지 않는다.</span></div><div class="line"><span class="string">       MAIL   이 매개변수가 파일 이름으로 설정되어 있고 MAILPATH 변수는 설정되어 있지 않으면, bash 는 그 파일을 보고 메일의 도착 여부를 사용자에게 알려준다.</span></div><div class="line"><span class="string">       MAILCHECK</span></div><div class="line"><span class="string">              얼마나 자주(초 단위로) bash 가 메일을 점검할 것인지 결정한다.  기본값은 60 초이다.  메일을 점검할 때가 되면 프롬프트를 보여 주기 전에 실행한다.  변수를 unset하면 메일 점검을 하지 않는다.</span></div><div class="line"><span class="string">       MAILPATH</span></div><div class="line"><span class="string">              메일이 왔는지 점검하기 위해 사용하는 경로명을 콜론으로 구분하여 설정한다.  출력할 메시지는 경로명 다음에 `?'를 적고 그 다음에 적어 설정할 수 있다.  <span class="variable">$_</span> 는 현재 사용하고 있는 메일 파일의 이름을 표시한다.  예:</span></div><div class="line"><span class="string">              MAILPATH='/usr/spool/mail/bfox?"</span>You have mail<span class="string">":~/shell-mail?"</span><span class="variable">$_</span> has mail!<span class="string">"'</span></div><div class="line"><span class="string">              Bash 가 이 변수에 대한 기본값을 제공하지만 사용자 메일 파일의 위치는 시스템에 따라 다르다.  (예를 들어, /usr/spool/mail/<span class="variable">$USER</span>).</span></div><div class="line"><span class="string">       MAIL_WARNING</span></div><div class="line"><span class="string">              이 변수가 설정되어 있고 bash가 메일을 점검할 때 사용하는 파일을 지난 번 점검 시간 이후, 접근한 적이 있다면, ``The mail in 메일파일 has been read''라는 메시지가 출력된다.</span></div><div class="line"><span class="string">       PS1    이 매개변수의 값을 확장하여 ( PROMPTING 참고 ) 주 프롬프트 문자열로 사용한다.  기본값은 ``bash\$ ''이다.</span></div><div class="line"><span class="string">       PS2    이 매개변수의 값을 확장하여 2차 프롬프트 문자열로 사용한다.  기본값은 ``&gt; ''이다.</span></div><div class="line"><span class="string">       PS3    매개변수 값을 확장하여 select 명령의 프롬프트로 사용한다.  (앞서 나온 쉘 문법 참고).</span></div><div class="line"><span class="string">       PS4    매개변수 값을 확장하여 실행 추적 중 bash 가 각 명령을 표시하기 전에 그 값을 사용한다.  PS4 의 첫번째 문자는 여러 레벨을 표시하기 위해 필요한 만큼 반복하여 표시한다.  기본값은 ``+ ''.</span></div><div class="line"><span class="string">       HISTSIZE</span></div><div class="line"><span class="string">              명령 히스토리에서 기억해 둘 명령의 갯수 ( 히스토리(HISTORY) 참고 ) 기본값은 500.</span></div><div class="line"><span class="string">       HISTFILE</span></div><div class="line"><span class="string">              명령 히스토리를 저장할 파일 이름.  ( HISTORY 참고.) 기본값은 ~/.bash_history.  unset 하면 대화형 쉘이 종료할 때 명령 히스토리를 저장하지 않는다.</span></div><div class="line"><span class="string">       HISTFILESIZE</span></div><div class="line"><span class="string">              히스토리 파일의 최대 행 갯수.  값을 지정하면 필요한 경우 그 값에 맞게 파일을 잘라 쓴다(truncate).  기본값은 500.</span></div><div class="line"><span class="string">       OPTERR 1로 설정하면 bash 는 getopts 내부 명령에서 발생한 에러 메시지를 표시한다.  ( 쉘 내부 명령 참고).  쉘이 실행되거나 쉘 스크립트가 실행될 때 OPTERR 는 1로 초기화된다.</span></div><div class="line"><span class="string">       PROMPT_COMMAND</span></div><div class="line"><span class="string">              설정하면 주 프롬프트를 출력하기 전에 지정한 명령을 실행한다.</span></div><div class="line"><span class="string">       IGNOREEOF</span></div><div class="line"><span class="string">              입력행에  EOF  문자만 입력되었을 때 쉘이 어떤 행동을 보일 것인지 제어한다.  설정하면 값으로 지정한 횟수만큼 입력행의 처음에 EOF 문자가 연속적으로 입력될 때 bash 가 종료한다.  변수는 존재하지만 숫자 값이 아니거나 아무런 값도 갖지 않을 때에는 기본값 10 을 사용한다.  존재하지 않으면 EOF 은 쉘에게 입력의 끝을 의미한다.  대화형 쉘에서만 효과를</span></div><div class="line"><span class="string">              지닌다.</span></div><div class="line"><span class="string">       TMOUT  0 보다 큰 값으로 설정하면 주 프롬프트가 표시된 후 설정한 값 만큼의 초를 기다린다.  그 동안 아무런 입력도 없으면 Bash 이 종료한다.</span></div><div class="line"><span class="string">       FCEDIT fc 내부 명령의 기본 편집기.</span></div><div class="line"><span class="string">       FIGNORE</span></div><div class="line"><span class="string">              파일명 완성을 수행할 때 무시할 꼬리말의 목록을 콜론으로 구분하여 나열한다.  ( READLINE 참고) FIGNORE 에 설정되어 있는 꼬리말을 가진 파일명은 일치하는 파일명 목록으로부터 제외된다.  예를 들어 ``.o:~''와 같은 값을 사용할 수 있다.</span></div><div class="line"><span class="string">       INPUTRC</span></div><div class="line"><span class="string">              기본값인 ~/.inputrc 대신 readline 시동 파일로 사용할 파일명.  ( READLINE 참고).</span></div><div class="line"><span class="string">       notify 설정하면, If set, bash 는 종료된 백그라운드 작업에 대한 보고를 그 다음 주 프롬프트 표시 전까지 기다리지 않고 즉시 한다.  ( set 내부 명령의 -b 옵션 참고)</span></div><div class="line"><span class="string">       history_control</span></div><div class="line"><span class="string">       HISTCONTROL</span></div><div class="line"><span class="string">              ignorespace 라는 값으로 설정하면 스페이스 문자로 시작하는 행은 히스토리 목록에 넣지 않는다.  ignoredups 로 설정하면 마지막 히스토리 행과 일치하는 행은 히스토리 목록에 넣지 않는다.  ignoreboth 는 두 옵션을 합한 것과 같다.  unset하거나 위에서 말한 값이 아닌 값으로 설정하면 파서(parser)에서 읽어 들인 모든 행을 히스토리 목록에 저장한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       command_oriented_history</span></div><div class="line"><span class="string">              설정하면, bash 는 여러 행으로 이루어진 명령의 모든 행을 똑같은 히스토리 항목으로 저장한다.  이렇게 하면 여러 행으로 이루어진 명령을 다시 편집할 때 편하다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       glob_dot_filenames</span></div><div class="line"><span class="string">              설정하면, bash 경로명 확장의 결과에서 `.'로 시작하는 파일명도 포함시킨다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       allow_null_glob_expansion</span></div><div class="line"><span class="string">              설정하면, bash 일치하는 파일이 없는 경로명 패턴을 그대로 놔두지 않고 널 문자열로 확장해준다.  ( 경로명 확장 참고)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       histchars</span></div><div class="line"><span class="string">              히스토리 확장과 토큰화를 제어하는 둘 또는 세 개의 문자.  ( 히스토리 확장 참고) 첫번째 문자는 히스토리 확장 문자(history expansion character) 로서, 즉 히스토리 확장의 시작을 알리는 문자이며 보통 `! 이다.  두번째 문자는 빠른 치환(quick substitution) 문자로서 입력했던 이전 명령을 다시 실행하고 한  문자열을  명령의  다른  문자열로  치환하는데</span></div><div class="line"><span class="string">              사용하는  단축문자이다.   기본값은  `^'  이다.  선택적인 세번째 문자는 단어의 첫 문자로 사용할 때 행의 나머지 부분은 주석임을 알리는데 사용하는 문자로서, 보통 `#'를 사용한다.  히스토리 주석 문자를 사용하면 히스토리 치환를 할 때 행의 나머지 부분에 대하여 치환를 하지 않고 건너뛰도록 한다.  이 기능을 사용하기 위해 꼭 쉘 파서(parser)로 하여금</span></div><div class="line"><span class="string">              행의 나머지 부분을 주석으로 처리하도록 해 둘 필요는 없다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       nolinks</span></div><div class="line"><span class="string">              설정하면, 현재 작업 디렉토리를 변경하는 명령을 실행할 때 쉘이 심볼릭 링크는 따라가지 않도록 한다.  대신 물리적인 디렉토리 구조를 사용하도록 한다.  기본적으로 bash 는 cd 와 같은 현재 디렉토리 변경 명령을 실행할 때 논리적인 디렉토리 사실을 따른다.  set 내부 명령의 -P 옵션에 대한 설명을 참고하라.  ( 쉘 내부 명령 참고)</span></div><div class="line"><span class="string">       hostname_completion_file</span></div><div class="line"><span class="string">       HOSTFILE</span></div><div class="line"><span class="string">              /etc/hosts 과 같은 형식의 파일로서 쉘이 호스트이름을 완성할 때 사용한다.  파일이름은 그 때 그 때 변경할 수 있다; 다음 번에 호스트이름 완성을 시도할 때 bash 는 새로운 파일의 내용을 기존 데이터베이스에 추가한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       noclobber</span></div><div class="line"><span class="string">              설정하면, bash 는 &gt;, &gt;&amp;, &lt;&gt; 와 같은 리다이렉션 연산자로 기존의 파일을 덮어쓰지 않는다.  &gt; 대신 &gt;| 리다이렉션 연산자를 사용하여 출력 파일을 만들 때에는 이 변수값에 상관없이 덮어쓴다.  ( set 내부 명령의 -C 옵션에 대해서도 알아보라.)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       auto_resume</span></div><div class="line"><span class="string">              쉘이 사용자와 작업 제어에 대한 상화 대화를 어떻게 할 것인지 제어한다.  변수를 설정하면, 리다이렉션을 사용하지 않은 단일 단어의 간단한 명령을 기존의 중단된 작업 재개를 위한 후보로 간주한다.  모호한 것은 허용되지 않는다; 입력한 문자열로 시작하는 작업이 여러 개일 때에는 최근에 접근한 적 있는 작업이 선택된다.  여기서 중단된 작업의  이름  이란</span></div><div class="line"><span class="string">              작업을  시작했을  때 사용한 명령행을 말한다.  exact 라는 값으로 설정하면, 입력한 문자열이 중단된 작업의 이름과 정확하게 일치해야 한다; substring 이라는 값으로 설정하면 , 입력한 문자열이 중단된 작업 이름의 일부와 일치해도 된다; substring 값은 %?  job id 와 유사한 기능을 제공한다.  ( 작업 제어(JOB CONTROL) 참고 ) 다른 값으로 설정하면 입력한</span></div><div class="line"><span class="string">              문자열은 중단된 작업 이름의 머리말이어야 한다; % job id 와 유사한 기능을 제공한다.</span></div><div class="line"><span class="string">       no_exit_on_failed_exec</span></div><div class="line"><span class="string">              이 변수를 설정하면, exec 내부 명령에서 주어진 파일을 실행할 수 없을 때에도 비대화형 쉘이 종료하지 않는다.  exec 에 실패할 때 대화형 쉘은 종료하지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       cdable_vars</span></div><div class="line"><span class="string">              이 변수를 설정하면 cd 내부 명령의 인수가 디렉토리가 아닐 때는, 이동하고자 하는 디렉토리를 값으로 갖고 있는 변수 이름으로 간주한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">확장(EXPANSION)</span></div><div class="line"><span class="string">       확장은 명령행을 단어로 분리한 후 실행된다.  다음과 같은 몇 가지 확장이 수행된다: 중괄호 확장(brace expansion), 틸드 확장(tilde expansion), 매개변수와 변수 확장, 명령 치환, 연산 확장, 단어 분리, 경로명 확장.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       확장의 순서는 중괄호 확장, 틸드 확장, 매개변수, 변수, 명령 그리고 연산 치환(왼쪽에서 오른쪽 방향으로), 단어 분리, 경로명 확장 순이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       이 기능을 지원하는 시스템에서는 프로세스 치환(process substitution)와 같은 추가 확장 기능이 있다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       중괄호 확장, 단어 분리, 경로명 확장만이 확장 시에 단어의 갯수를 변화시킬 수 있다; 다른 확장은 한 단어를 한 단어로 확장한다.  유일한 예외로는 앞서 설명한 바 있는 ``<span class="variable">$@</span>'' 확장을 들 수 있다.  ( 매개변수 참고 ).</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   중괄호 확장(Brace Expansion)</span></div><div class="line"><span class="string">       중괄호 확장 은 임의의 문자열을 생성시킬 수 있는 메커니즘이다.  이 메커니즘은 경로명 확장과 유사하지만 파일이름이 존재하지 않아도 된다는 점에서 다르다.  중괄호 확장할 패턴은 다음과 같은 형태를 띤다.  선택적인 preamble 다음에 콤마로 구분된 문자열을 둘러 싼 중괄호가 나오고 선택적인 postamble 이 따라 나온다.  preamble은 중괄호 안에  있는  각  문자열</span></div><div class="line"><span class="string">       앞에 추가되고 postamble은 왼쪽에서 오른쪽으로 각각의 결과 문자열 뒤에 추가된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       중괄호 확장은 중첩할 수 있다.  확장된 각 문자열의 결과는 정렬되지 않는다; 왼쪽에서 오른쪽으로라는 순서는 보존된다.  예를 들어 a&#123;d,c,b&#125;e는 `ade ace abe'로 확장된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       중괄호 확장은 다른 확장보다 먼저 수행되며 다른 확장에 특별한 의미를 갖는 문자열은 보존된다.  중괄호 확장은 엄격하게 글자 그대로 이루어진다.  Bash 는 확장 상황이나 중괄호 안의 텍스트에 대하여 문법적인 해석을 시도하지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       올바른 형식의 중괄호 확장에는 쿼우트하지 않은 상태로 여는 중괄호, 닫는 중괄호가 있고 역시 쿼우트하지 않은 하나 이상의 콤마가 포함된다.  올바르지 않은 형태의 중괄호 확장은 그대로 놔둔다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       중괄호 확장 형식은 보통 다음 예에서처럼 문자열의 공통 머리말 부분이 훨씬 긴 경우 짧게 축약하기 위해 사용된다:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              mkdir /usr/local/src/bash/&#123;old,new,dist,bugs&#125;</span></div><div class="line"><span class="string">       또는</span></div><div class="line"><span class="string">              chown root /usr/&#123;ucb/&#123;ex,edit&#125;,lib/&#123;ex?.?*,how_ex&#125;&#125;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       중괄호  확장은  전통적인 버전의 sh, 본쉘(Bourne shell)과 약간의 비호환성을 가져왔다.  sh 는 중괄호가 단어의 일부로 나타날 때 특별하게 처리하지 않고 그대로 보존하여 출력한다.  Bash 는 단어로부터 중괄호를 제거하고 중괄호 확장을 한다.  예를 들어 sh 에서 file&#123;1,2&#125;는 출력에서도 그대로 file&#123;1,2&#125; 이다.  bash 에서는 같은 단어에 대하여 중괄호 확장을 하여</span></div><div class="line"><span class="string">       file1 file 로 보여준다.  만약 sh 과의 철저한 호환성을 원할 때에는 bash 를 시작할 때 -nobraceexpansion 플래그를 붙여 실행하라.  -nobraceexpansion ( 앞서 나온 옵션 참고 ) 또는 set 명령에서 +o braceexpand 옵션을 주어 중괄호 확장 기능을 해제할 수 있다.  ( 쉘 내부 명령 참고 )</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   틸드 확장(Tilde Expansion)</span></div><div class="line"><span class="string">       단어가 틸드 문자(`~')로 시작하면, 첫번째 슬래쉬 앞에 있는 모든 문자(또는 슬래쉬가 없는 경우에는 모든 문자)는 가능한 로그인 이름으로 간주한다.  로그인 이름이 널 문자열인 경우에는 HOME 매개변수의 값으로 틸드를 치환한다.  HOME 가 설정되어 있지 않을 때에는 쉘을 실행 중인 사용자의 홈 디렉토리로 대신 치환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       틸드 다음에 `+'가 뒤따르면, 틸드와 `+'를 PWD 의 값으로 치환한다.  `-'이 오는 경우에는 OLDPWD 변수 값으로 치환된다.  틸드 다음에 나오는 값이 유효한 로그인 이름일 때에는 틸드와 로그인 이름을 그 이름을 갖는 사용자의 홈 디렉토리로 치환한다.  이름이 유효하지 않을 때에는 틸드 확장이 실패할 것이며 그 때에는 단어를 그대로 놔둔다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       변수 지정을 시행할 때마다 : 또는 = 다음에 나오는 쿼우트하지 않은 틸드를 점검한다.  이 경우 틸드 확장이 시행된다.  따라서 PATH, MAILPATH, CDPATH 지정에서 틸드와 함께 경로명을 사용할 수 있으며 쉘은 그 확장된 값을 지정해준다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   매개변수 확장(Parameter Expansion)</span></div><div class="line"><span class="string">       `$' 문자는 매개변수 확장, 명령 치환, 연산 확장을 시행하도록 한다.  확장할 매개변수 이름 또는 기호는 중괄호로 둘러 쌀 수도 있다.  확장할 변수 뒤에 따라 오는 문자들을 이름의 일부로 해석하지 않도록 보호할 때 사용한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       <span class="variable">$&#123;매개변수&#125;</span></span></div><div class="line"><span class="string">              매개변수의 값으로 치환된다.  매개변수 가 한 개 이상의 숫자로 된 위치 매개변수이거나, 매개변수 다음에 문자열로 함께 해석하지 않아야 할 문자가 뒤따라 나오는 경우에는 중괄호가 필요하다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       아래의 모든 경우에서, 단어에 대하여 틸드 확장, 매개변수 확장, 명령 치환, 연산 치환가 시행된다.  Bash 매개변수가 unset 상태인지 널인지 점검한다; 콜론을 빼면 unset 상태의 매개변수에 대한 점검만 행한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       <span class="variable">$&#123;매개변수:-단어&#125;</span></span></div><div class="line"><span class="string">              기본값 사용.  If 매개변수 가 unset 되어 있거나 널이면, 단어 의 확장으로 치환된다.  그렇지 않을 때에는 매개변수 의 값으로 치환된다.</span></div><div class="line"><span class="string">       <span class="variable">$&#123;매개변수:=단어&#125;</span></span></div><div class="line"><span class="string">              기본값을 지정.  매개변수 가 unset 되어 있거나 널이면, 단어 의 확장이 매개변수 로 지정된다.  그러면 매개변수 의 값 자체가 치환된다.  위치 매개변수와 특별한 매개변수는 이런 방식으로 지정할 수 없을 것이다.</span></div><div class="line"><span class="string">       <span class="variable">$&#123;매개변수:?단어&#125;</span></span></div><div class="line"><span class="string">              널이거나 unset 이면 에러를 출력한다.  If 매개변수 가 널이거나 unset 상태면, 단어의 확장(또는 단어 가 존재하지 않으면 그에 대한 메시지) 이 표준 에러와 쉘에 출력하고 대화형 모드가 아닐 때에는 종료한다.  그렇지 않으면 매개변수의 값이 치환된다.</span></div><div class="line"><span class="string">       <span class="variable">$&#123;매개변수:+단어&#125;</span></span></div><div class="line"><span class="string">              다른 값 사용하기.  매개변수 가 널이거나 unset 이면, 아무 것도 치환되지 않고 그렇지 않으면 단어 의 확장으로 치환된다.</span></div><div class="line"><span class="string">       <span class="variable">$&#123;#매개변수&#125;</span></span></div><div class="line"><span class="string">              매개변수의 값으로 들어있는 문자열의 길이로 치환한다.  매개변수가 * 이거나 @ 일 때에는, 더블 쿼우트 안에서 * 이 확장되었을 때의 길이로 치환한다.</span></div><div class="line"><span class="string">       <span class="variable">$&#123;매개변수#단어&#125;</span></span></div><div class="line"><span class="string">       <span class="variable">$&#123;매개변수##단어&#125;</span></span></div><div class="line"><span class="string">              경로명 확장에서처럼 패턴을 만들기 위해 단어 가 확장된다.  만약 패턴이 매개변수 값의 첫 부분과 일치하면, 매개변수 값에서 가장 짧은 일치가 일어나는 패턴 내용을 삭제한 값 (``#''의 경우) 또는 가장 긴 일치가 일어나는 패턴을 삭제한 값 (``##''의 경우)으로 확장한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       <span class="variable">$&#123;매개변수%단어&#125;</span></span></div><div class="line"><span class="string">       <span class="variable">$&#123;매개변수%%단어&#125;</span></span></div><div class="line"><span class="string">              경로명 확장에서처럼 패턴을 만들기 위해 단어 가 확장된다.  만약 패턴이 매개변수 값의 뒷 부분과 일치하면, 매개변수 값에서 가장 짧은 일치가 일어나는 패턴 내용을 삭제한 값 (``%''의 경우) 또는 가장 긴 일치가 일어나는 패턴을 삭제한 값 (``%%''의 경우)으로 확장한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   명령 치환</span></div><div class="line"><span class="string">       명령 치환을 사용하여 명령 이름을 명령의 출력 결과로 치환할 수 있다.  다음 두 가지 형태를 가지고 있다:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              <span class="variable">$(명령)</span></span></div><div class="line"><span class="string">       또는</span></div><div class="line"><span class="string">              `명령`</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       Bash 는 명령을 실행하고 그 명령의 표준 출력으로 명령 치환을 교체하는 방식으로 확장을 실행한다.  표준 출력에서 뒷 부분의 개행문자는 삭제한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       구식 백쿼우트 형식을 사용할 때, 백슬래쉬는 그 뒤에 $, `, \ 이 따라오는 경우를 제외하고는 글자 그대로의 의미를 유지한다.  <span class="variable">$(명령)</span> 형식을 사용할 때에는 괄호 사이에 있는 모든 글자가 명령을 구성한다; 어느 문자도 특별하게 취급받지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       명령 치환은 중첩할 수 있다. 구식 형태에서 중첩을 하려면 내부의 백쿼우트를 백슬래쉬로 해석금지시켜야 한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       더블 쿼우트 안에서 치환이 일어나면 결과에 대하여 단어 분리, 경로명 확장은 시행되지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   연산 확장</span></div><div class="line"><span class="string">       연산 확장을 사용하여 연산식을 계산하고 그 결과 값으로 치환할 수 있다.  연산 확장에는 두 가지 형식이 있다:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              $[표현식]</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              <span class="variable">$((표현식)</span>)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       The 표현식 은 더블 쿼우트 안에 있는 것처럼 취급한다.  그러나 중괄호와 괄호 안에 놓인 더블 쿼우트는 특별하게 대우하지 않는다.  표현식 안에 있는 모든 토큰은 매개변수 확장, 명령 치환, 쿼우트 제거 과정을 거친다.  연산 치환은 중첩 가능하다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       평가 작업은 뒤에 나올 연산 평가(ARITHMETIC EVALUATION) 에서 나열한 규칙에 따라 시행된다.  표현식 이 유효하지 않을 때 bash 는 실패를 뜻하는 메시지를 출력하고 더 이상 치환을 하지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   프로세스 치환</span></div><div class="line"><span class="string">       프로세스 치환은 명명된 파이프(FIFOs) 또는 오픈한 파일을 명명하는 /dev/fd 방식을 갖고 있는 시스템에서 지원된다.  &lt;(리스트) 또는 &gt;(리스트)의 형식을 띤다.  프로세스 리스트는 입력 또는 출력을 FIFO 또는 /dev/fd의 파일에 연결하여 실행한다.  확장의 결과로 이 파일의 이름이 현재 명령의  인수로  전달된다.  &gt;(리스트)  형식을  사용하면  파일에  쓰는  내용이</span></div><div class="line"><span class="string">       리스트에 대한 입력이 된다.  &lt;(리스트) 형식을 사용하면 리스트의 출력을 얻기 위해 인수로 전달된 파일을 읽을 수 있어야 한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       이를 지원하는 시스템에서 프로세스 치환은 매개변수와 변수 확장, 명령 치환, 연산 확장 과 동시에 일어난다.</span></div><div class="line"><span class="string">   단어 분리</span></div><div class="line"><span class="string">       쉘은 단어 분리 를 위하여 더블 쿼우트 안에서 일어나지 않은 매개변수 확장, 명령 치환, 연산 확장의 결과를 조사한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       쉘은  IFS  값으로 들어있는 각 글자를 구분자(delimeter)로 사용하여 다른 확장의 결과를 단어로 분리한다.  IFS 의 값이 정확히 &lt;스페이스&gt;&lt;탭&gt;&lt;개행문자&gt; 즉 기본값이라면, IFS 문자의 어떠한 조합도 단어를 구분하게 해준다.  IFS 의 값이 기본값 아닌 값을 가지고 있는 경우에는, 화이트스페이스 문자가 IFS 값에 포함되어 있는 한, 단어의 앞뒤에 오는 화이트스페이스</span></div><div class="line"><span class="string">       문자 스페이스 와 탭 을 무시한다.  IFS ( IFS 화이트스페이스 문자).  IFS 화이트스페이스가 아닌 IFS 속의 모든 문자와 인접한 IFS 화이트스페이스 문자는 하나의 필드로 구분한다.  IFS 화이트스페이스 문자의 연속도 구분자로 간주한다.  IFS 값이 널이면 단어 분리는 일어나지 않는다.  IFS 는 unset 할 수 없다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       명시적인 널 인수는 ("</span><span class="string">" 또는 '') 그대로 유지한다.  매개변수 의 확장 결과 만들어지는 널 인수는 제거된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       확장이 일어나지 않은 경우에는 단어 분리도 일어나지 않는다는 사실을 잘 알아두어야 한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   경로명 확장</span></div><div class="line"><span class="string">       단어 분리 후에는 -f 옵션이 설정되어 있지 않는 한, bash 는 단어 를 검색하면서 *, ?, [ 문자를 찾는다.  이러한 문자 중 하나가 나타나면 그 단어는 패턴 으로 간주하고 패턴과 일치하는 경로명을 알파벳 순으로 정렬한 리스트로 치환한다.  일치하는 경로명이 발견되지 않고 쉘 변수 allow_null_glob_expansion  가  unset되어  있으면  단어를  변경하지  않고  그대로</span></div><div class="line"><span class="string">       놔둔다.   이  변수가  설정되어  있기는  하지만 일치하는 것이 없다면, 단어를 제거한다.  경로명 생성 시에 패턴이 사용될 때, 이름의 시작 부분 또는 슬래쉬 바로 다음에 나오는 ``.''  문자에 대해서는 쉘 변수 glob_dot_filenames 가 설정되어 있지 않은 한, 명시적인 일치가 이루어져야 한다.  슬래쉬 문자는 항상 명시적인 일치여야 한다.  다른 경우 ``.''  문자는</span></div><div class="line"><span class="string">       특별하게 취급하지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       특수한 패턴 문자는 다음과 같은 의미를 지닌다:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       *      널 문자열을 포함한 모든 문자열과 일치한다.</span></div><div class="line"><span class="string">       ?      모든 단일 문자와 일치한다.</span></div><div class="line"><span class="string">       [...]  대괄호 안의 어떤 문자와도 일치한다.  문자 가운데 마이너스 부호가 있는 경우에는 범위 를 뜻한다; 두 문자 사이의 사전적 순서에 의거하여 위치하는 모든 문자(두 문자 포함)에 대하여 일치가 일어난다.  [ 다음에 나오는 첫번째 문자가 !  이거나 ^ 이면 괄호 안에 있는 모든 문자에 대하여 일치가 일어나지 않는다.  - 또는 ] 에 대하여 일치를  시키려면  괄호</span></div><div class="line"><span class="string">              안에서 첫번째 또는 마지막 문자로 포함시키면 된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   쿼우트 제거</span></div><div class="line"><span class="string">       앞서 말한 확장이 일어난 후, 쿼우트하지 않은 모든 \, `, "</span> 문자는 제거한다.</div><div class="line"></div><div class="line">리다이렉션(REDIRECTION)</div><div class="line">       명령이  실행되기에  앞서  쉘에  의해  특별하게 해석되는 표시를 사용하여 입력과 출력을 방향 전환 또는 리다이렉트 할 수 있다.  현재 쉘 실행 환경에 대하여 파일을 열고 닫는 용도로 리다이렉션을 사용할 수도 있다.  다음에 나오는 리다이렉션 연산자는 간단한 명령 의 앞 또는 중간에 오거나 명령 의 뒤에 온다.  리다이렉션은 왼쪽부터 오른족으로 나타난 순서대로</div><div class="line">       처리한다.</div><div class="line"></div><div class="line">       다음 설명에 있어 파일 기술자 번호가 생략되어 있고 리다이렉션 연산자의 첫번째 문자가 &lt; 이면 이 리다이렉션은 표준 입력(파일 기술자 0 번)을 가리킨다.  리다이렉션 연산자의 첫번째 문자가 &gt; 이면 이 리다이렉션은 표준 출력(파일 기술자 1 번)을 가리킨다.</div><div class="line"></div><div class="line">       리다이렉션 연산자 다음에 나오는 단어는 중괄호 확장, 틸드 확장, 매개변수 확장, 명령 치환, 연산 확장, 쿼우트 제거, 경로명 확장을 거친다.  한 개 이상의 단어로 확장될 때에는 bash 가 에러를 보고한다.</div><div class="line"></div><div class="line">       리다이렉션의 순서가 매우 중요하다.  예를 들어, 다음 명령</div><div class="line"></div><div class="line">              ls &gt; dirlist 2&gt;&amp;1</div><div class="line"></div><div class="line">       는 표준 출력과 표준 에러 모두 dirlist 파일로 보내지만 다음 명령</div><div class="line"></div><div class="line">              ls 2&gt;&amp;1 &gt; dirlist</div><div class="line"></div><div class="line">       오로지 표준 출력만 dirlist 파일로 보낸다. 왜냐하면 표준 출력이 dirlist 파일로 방향 전환되기 전에 표준 에러가 표준 출력으로 복제되었기 때문이다.</div><div class="line"></div><div class="line">   입력 리다이렉션</div><div class="line">       입력 리다이렉션은 파일 기술자 n 또는 n 이 생략된 경우 표준 입력 (파일 기술자 0)으로 읽기 위해 단어 를 확장하여 나온 이름의 파일을 오픈하게 만든다.</div><div class="line"></div><div class="line">       입력 리다이렉션의 일반적인 형식은 다음과 같다:</div><div class="line"></div><div class="line">              [n]&lt;단어</div><div class="line"></div><div class="line">   출력 리다이렉션</div><div class="line">       출력 리다이렉션은 파일 기술자 n 또는 n 이 생략된 경우 표준 출력 (파일 기술자 1)으로 쓰기 위해 단어 를 확장하여 나온 이름의 파일을 오픈하게 만든다.</div><div class="line"></div><div class="line">       출력 리다이렉션의 일반적인 형식은 다음과 같다:</div><div class="line"></div><div class="line">              [n]&gt;단어</div><div class="line"></div><div class="line">       리다이렉션 연산자를 &gt;| 와 같이 적으면, <span class="built_in">set</span> 내부 명령에 대한 -C 옵션 값을 점검하지 않고 파일 생성을 시도한다.  ( 위에서 나온 쉘 변수 섹션의 noclobber 설명을 참고 )</div><div class="line"></div><div class="line">   추가 출력 리다이렉션</div><div class="line">       추가 출력 리다이렉션은 파일 기술자 n 또는 n 이 생략된 경우 표준 출력 (파일 기술자 1)으로 추가하기 위해 단어 를 확장하여 나온 이름의 파일을 오픈하게 만든다.  파일이 존재하지 않으면 생성한다.</div><div class="line"></div><div class="line">       출력 추가하기의 일반적인 형식은 다음과 같다:</div><div class="line"></div><div class="line">              [n]&gt;&gt;단어</div><div class="line"></div><div class="line">   표준 출력과 표준 에러 리다이렉션</div><div class="line">       Bash 는 지금 설명할 표기법을 사용하여 표준 출력(파일 기술자 1)과 표준 에러 출력(파일 기술자 2) 둘 다 단어 의 확장 결과 나오는 이름의 파일로 방향전화시킬 수 있다.</div><div class="line"></div><div class="line">       표준 출력과 표준 에러를 동시에 리다이렉트하는 두 가지 형식이 있다:</div><div class="line"></div><div class="line">              &amp;&gt;단어</div><div class="line">       and</div><div class="line">              &gt;&amp;단어</div><div class="line"></div><div class="line">       두 가지 형식 중 첫번째 것을 선호한다.  Of the two forms, the first is preferred.  위 형식은 다음과 문법적으로 동일하다.</div><div class="line"></div><div class="line">              &gt;단어 2&gt;&amp;1</div><div class="line"></div><div class="line">   HERE 문서</div><div class="line">       이 유형의 리다이렉션은 쉘로 하여금 자신의 현재 소스로부터 단어 (뒤에 공백이 없이) 만 나오는 줄이 나올 때가지 입력으로 읽어들이도록 지시한다.  이 지점까지의 모든 행은 명령에 대한 표준 입력으로 사용된다.</div><div class="line"></div><div class="line">       HERE 문서의 형식은 다음과 같다:</div><div class="line"></div><div class="line">              &lt;&lt;[-]단어</div><div class="line">                      HERE-문서</div><div class="line">              구분자</div><div class="line"></div><div class="line">       단어 에 대해서는 어떠한 매개변수 확장, 명령 치환, 경로명 확장, 또는 연산 확장도 시행되지 않는다.  단어 안의 문자에 대하여 쿼우트된 것이 있다면 구분자 는 단어 로부터 쿼우트를 제거한 결과이며 HERE 문서의 행은 확장되지 않는다.  그렇지 않을 때에는 HERE 문서의 모든 행에 대하여 매개변수 확장, 명령 치환, 연산 치환이 시행된다.  후자의 경우,  \&lt;개행문자&gt;</div><div class="line">       는 무시하며 \, $, ` 문자를 쿼우트할 때에는 \ 를 사용한다.</div><div class="line"></div><div class="line">       리다이렉션 연산자가 &lt;&lt;- 라면, 입력행과 구분자 를 포함하는 행에서 앞에 나오는 모든 탭 문자를 제거한다.  이 기능을 사용하면 쉘 스크립트 내부의 HERE 문서에서도 자연스럽게 들여쓰기를 사용할 수 있다.</div><div class="line">   파일 기술자 복제하기</div><div class="line">       다음 리다이렉션 연산자</div><div class="line"></div><div class="line">              [n]&lt;&amp;단어</div><div class="line"></div><div class="line">       는 입력 파일 기술자를 복제할 때 사용한다.  단어 가 한 개 이상의 숫자로 확장되면, n 이 가리키는 파일 기술자는 그 파일 기술자의 복사본이 된다.  만약 단어 의 결과가 - 라면 , 파일 기술자 n 은 닫힌다.  n 를 명시하지 않으면, 표준 입력(파일 기술자 0)을 사용한다.</div><div class="line"></div><div class="line">       다음 연산자</div><div class="line"></div><div class="line">              [n]&gt;&amp;단어</div><div class="line"></div><div class="line">       는 마찬가지로 출력 파일 기술자를 복제할 때 사용한다.  n 이 생략되어 있으면 표준 출력(파일 기술자 1)이 사용된다.  특별한 경우로서, n이 생략되어 있고 단어가 한 개 이상의 숫자로 확장되지 않을 때에는 앞에서 설명한 것처럼 표준 출력과 표준 에러가 리다이렉트된다.</div><div class="line"></div><div class="line">   읽기 쓰기를 위해 파일 기술자 열기</div><div class="line">       다음 리다이렉션 연산자</div><div class="line"></div><div class="line">              [n]&lt;&gt;단어</div><div class="line"></div><div class="line">       는 읽기와 쓰기를 위해 파일 기술자 n 또는 n 이 생략된 경우 표준 입력과 표준 출력으로 단어 의 확장 결과로 나오는 이름을 가진 파일을 오픈하도록 한다.  파일이 존재하지 않는 경우 생성된다.</div><div class="line"></div><div class="line">함수(FUNCTIONS)</div><div class="line">       앞서  나온  쉘  문법 섹션에서 정의한 바 있는 쉘 함수는 이후의 실행을 위해 명령의 나열을 저장해둔다.  함수는 현재 쉘 상황에서 실행된다;  함수를 해석하기 위해 새로운 프로세스가 만들어지지는 않는다.(이는 쉘 스크립트 실행과 대조적이다.)  함수가 실행되면 실행 중에는 함수에 대한 인수가 위치 매개변수로 바뀐다.  특별한 매개변수인 <span class="comment"># 는 이 변화를 반영하기</span></div><div class="line">       위해 갱신된다.  위치 매개변수 0 은 바뀌지 않는다.</div><div class="line"></div><div class="line">       함수에 지역적인 변수는 내부 명령 <span class="built_in">local</span> 을 사용하여 선언할 수 있다.  보통은 변수와 그 값은 함수와 호출한 자가 공유한다.</div><div class="line"></div><div class="line">       내부 명령 <span class="built_in">return</span> 이 함수 안에서 실행되면 함수는 실행을 완료하고 함수 호출 바로 다음부터 실행이 재개된다.  함수 실행이 완료되면 위치 매개변수와 특별한 매개변수 <span class="comment"># 의 값이 함수 호출 이전 상태로 복원된다.</span></div><div class="line"></div><div class="line">       함수 이름과 정의는 내부 명령 <span class="built_in">declare</span> 또는 <span class="built_in">typeset</span> 명령에 -f 옵션을 주어 나열할 수 있다.  내부 명령 <span class="built_in">export</span> 에 -f 옵션을 주면 서브쉘에서도 자동으로 정의되도록 함수를 <span class="built_in">export</span>할 수 있다.</div><div class="line"></div><div class="line">       함수는 재귀 호출할 수 있다.  재귀 호출의 횟수에 대한 제한 사항은 없다.</div><div class="line"></div><div class="line">앨리어스 또는 별칭(ALIASES)</div><div class="line">       쉘은 내부 명령 <span class="built_in">alias</span> 와 <span class="built_in">unalias</span> 로 설정하고 해제할 수 있는 앨리어스(aliases) 목록을 관리한다.  ( 쉘 내부 명령 참고 ).  쿼우트하지 않은 각 명령의 첫번째 단어에 대해서는 앨리어스가 있는지 점검한다.  앨리어스가 있으면 그 단어는 앨리어스의 텍스트 내용으로 치환된다.  앨리어스 이름과 치환 텍스트는 메타문자 를 포함하여 유효한 쉘 입력을 포함할 수  있다.</div><div class="line">       그러나 예외적으로 앨리어스 이름에 =를 포함할 수 없다.  치환 텍스트의 첫번째 단어에 대하여 앨리어스가 있는지 점검한다.  그러나 확장하려는 앨리어스와 똑같은 단어는 두 번 확장하지 않는다.  즉, 다음과 같이 ls 의 앨리어스를 다음과 같이 ls -F 라고 정의할 수 있으며 bash 는 치환 텍스트를 회귀적으로 확장하려 하지 않는다.  앨리어스 값의 마지막 문자가 공백</div><div class="line">       이면, 앨리어스 다음에 나오는 명령 단어에 대해서도 앨리어스 확장 여부를 점검한다.</div><div class="line"></div><div class="line">       앨리어스는 <span class="built_in">alias</span> 명령을 사용하여 만들고 열거하며 <span class="built_in">unalias</span> 명령을 사용하여 제거한다.</div><div class="line"></div><div class="line">       csh 에서처럼 치환 텍스트에서 인수를 사용하게 해주는 메커니즘은 없다.  인수가 필요할 때에는 쉘 함수를 사용해야 한다.</div><div class="line"></div><div class="line">       쉘이 대화형 모드가 아닐 때에는 앨리어스를 확장하지 않는다.</div><div class="line"></div><div class="line">       앨리어스의 정의와 사용법에 대한 규칙은 약간 혼란스럽다.  Bash 는 항상 어떤 행에 존재하는 명령을 실행하기에 앞서 최소한 완전한 한 행을 읽는다.  앨리어스를 실행할 때가 아니라 명령을 읽어들일 때 확장된다.  따라서, 다른 명령과 같은 행에 나타나는 앨리어스 정의는 다음 행을 읽을 때까지 효력을 발휘하지 않는다.  같은 행에서 앨리어스  정의  다음에  나오는</div><div class="line">       명령은 새로운 앨리어스의 영향을 받지 않는다.  이 행동 방식은 함수가 실행될 때에도 문제가 된다.  함수 정의 자체가 복합 명령이기 때문에 함수를 실행할 때가 아니라 함수 정의를 읽을 때 앨리어스를 확장한다.  결과적으로 함수 안에 정의된 앨리어스는 다른 함수를 실행하기 전까지는 사용되지 않는다.  안전하게 하기 위해 앨리어스 정의는 항상 개별적인 행에 적고</div><div class="line">       복합 명령에서는 앨리어스 를 사용하지 말라.</div><div class="line"></div><div class="line">       거의 모든 용도에서 앨리어스 대신 함수를 사용하는 것이 좋다는 점을 기억하라.</div><div class="line"></div><div class="line">작업 제어(JOB CONTROL)</div><div class="line">       작업 제어 란 선택적으로 프로세스의 실행을 멈추고 (일시 중지(<span class="built_in">suspend</span>)) 나중에 중단된 실행을 계속하도록 할 수 있는 (작업 재개(resume)) 기능을 말한다.  사용자는 일반적으로 시스템의 터미널 드라이버와 bash 에서 제공하는 대화형 인터페이스를 통해 이 기능을 사용한다.</div><div class="line"></div><div class="line">       쉘은 각 파이프라인에 작업 을 연관시킨다.  쉘은 현재 실행 중인 작업 도표를 지니고 있으며 <span class="built_in">jobs</span> 명령을 사용하여 나열해 볼 수 있다.  bash 가 작업을 비동기적으로 ( 백그라운드 로) 시작할 때는, 다음과 유사한 행을 출력한다:</div><div class="line"></div><div class="line">              [1] 25647</div><div class="line"></div><div class="line">       이 작업의 작업 번호가 1 이며 이 작업과 연관된 파이프라인의 마지막 프로세스의 프로세스 ID가 25647 이라는 사실을 알려준다.  Bash 는 작업 제어를 위해 그 기초로서 작업 추상화를 사용한다.</div><div class="line"></div><div class="line">       작업 제어에 대한 사용자 인터페이스를 구현을 할 수 있도록 시스템에서는 현재 터미널 프로세스 그룹 ID라는 것을 관리한다.  이 프로세스 그룹의 멤버(자신의 프로세스 그룹 ID가 현재 터미널 프로세스 그룹 ID와 동일한 프로세스들)는 SIGINT 와 같이 키보드를 통해 발생시키는 시그널을 받는다.  이러한 프로세스는 포그라운드  에  놓여  있다고  말한다.   백그라운드</div><div class="line">       프로세스란  자신의  프로세스  그룹  ID가  터미널의 프로세스 그룹 ID와 다른 프로세스를 말한다;  이 프로세스는 키보드를 통해 발생시키는 시그널에 면역을 가진다.  오로지 포그라운드 프로세스만이 터미널로부터 읽고 터미널에 쓸 수 있다.  터미널로부터 읽거나 쓰려고 시도하는 백그라운드 프로세스는 터미널 드라이버가 보내는 SIGTTIN (SIGTTOU) 시그널을 받는다.</div><div class="line">       그리고 이를 잡아 처리하지 않으면 프로세스를 일시 중지시킨다.</div><div class="line"></div><div class="line">       bash 가 실행 중인 운영체제에서 작업 제어를 지원하면 bash 는 여러분으로 하여금 작업 제어 기능을 사용할 수 있도록 해준다.  프로세스 실행 중 일시중지 문자 ( 보통 ^Z, Control-Z)를 누르면 프로세스가 멈추고 여러분에게 bash 프롬프트가 나온다.  지연된 일시중지(delayed <span class="built_in">suspend</span>) 문자를 누르면(보통 ^Y, Control-Y)프로세스가 터미널로부터 입력을  받으려고  할</div><div class="line">       때 중지되며 bash 로 제어권이 넘어온다.  그 다음에는 <span class="built_in">bg</span> 명령을 사용하여 백그라운드에서 실행을 계속하도록 하거나 <span class="built_in">fg</span> 명령을 사용하여 포그라운드에서 실행을 계속하도록 또는 <span class="built_in">kill</span> 명령을 사용하여 죽이는 등 작업의 상태를 제어할 수 있다.  ^Z는 즉시 효력을 발휘하며 아직 출력되지 않은 내용과 타이핑을 했으나 입력 처리되지 않은 내용은 버린다.</div><div class="line"></div><div class="line">       쉘에서  어떤  작업을 지시하는 방법은 몇 가지 있다.  % 문자는 작업 이름과 관련있다.  작업 번호 n 은 %n 으로 표시한다.  또한 작업을 시작할 때 사용했던 이름의 앞 글자나 명령행의 일부 문자열을 사용하여 가리킬 수 있다.  예를 들어, %ce 는 중단된 ce 작업을 가리킨다.  job.  접두어가 하나 이상의 작업과 일치할 때에는 bash 가 에러를 보고한다.  한편 %?ce 를</div><div class="line">       사용하면, 명령행 중간에 ce 를 포함하고 있는 작업을 가리킨다.  그 일부 문자열과 일치하는 작업이 여러 개일 때에는 bash 가 에러를 보고한다.  %% 표시와 %+ 표시는 쉘에서 포그라운드에 있던 동안 중단된 가장 최신의 작업을 가리키며 현재 작업(current job) 이라 부른다.  이전 작업(previous job) 은 %-  표시를  통해  가리킬  수  있다.   작업을  가리키는  출력</div><div class="line">       내용에서 (예를 들어, <span class="built_in">jobs</span> 명령의 출력 내용) 현재 작업은 항상 + 로 표시하고, 이전 작업은 - 로 표시한다.</div><div class="line"></div><div class="line">       간단히 작업 이름을 지칭하기만 해도 작업이 포그라운드로 돌아온다: %1 는 ``<span class="built_in">fg</span> %1<span class="string">''</span>와 같은 뜻이며, 작업 1 번을 백그라운드에서 포그라운드로 오게 한다.  마찬가지로 ``%1 &amp;<span class="string">''</span> 는 작업 1 번을 백그라운드에서 작업 재개를 하도록 하며 ``<span class="built_in">bg</span> %1<span class="string">''</span> 와 같다.</div><div class="line"></div><div class="line">       쉘은 작업이 상태를 바꿀 때마다 그 상황을 안다.  보통의 경우, bash 는 다른 출력 내용을 방해하지 않기 위해 프롬프트를 출력할 때까지 기다렸다가 작업의 상태의 변화를 보고한다.  <span class="built_in">set</span> 내부 명령에 -b 옵션을 주었다면, bash 는 변화 내용을 즉시 보고한다.  (앞서 나온 쉘 변수 섹션의 notify 설명을 참고하라.)</div><div class="line"></div><div class="line">       작업이 중단된 상태에서 bash 를 종료하려고 하면, 쉘은 경고 메시지를 출력한다.  여러분은 <span class="built_in">jobs</span> 명령을 사용하여 작업의 상태를 조사할 수 있다.  이 명령을 실행하거나 곧바로 다시 종료를 시도하면 경고는 나오지 않으며 중단된 작업은 종료한다.</div><div class="line"></div><div class="line">시그널(SIGNALS)</div><div class="line">       bash가 대화형 모드일 때에는 SIGTERM 는 무시하고 (따라서 <span class="built_in">kill</span> 0해도 대화형 쉘은 죽지 않는다), SIGINT 는 잡아서 처리한다.(따라서 <span class="built_in">wait</span> 내부 명령은 인터럽트 가능하다) 어떤 경우든 bash는 SIGQUIT 를 무시한다.  작업 제어 중일 때 bash 는 SIGTTIN, SIGTTOU, SIGTSTP 를 무시한다.</div><div class="line"></div><div class="line">       bash가 시작한 동기화된 작업은 부모로부터 쉘에 의해 상속받은 값으로 시그널을 설정한다.  작업 제어 중이 아닐 때 백그라운드 작업은 ( &amp; 로 시작한 작업 ) SIGINT , SIGQUIT 를 무시한다.  명령 대체의 결과로 실행된 명령은 키보드에 의해 발생하는 작업 제어 시그널인 SIGTTIN, SIGTTOU, SIGTSTP 를 무시한다.</div><div class="line"></div><div class="line">명령 실행(COMMAND EXECUTION)</div><div class="line">       명령이 단어로 분리된 후, 그 결과 간단한 명령과 인수 목록이 나오면, 다음 행동이 취해진다.</div><div class="line"></div><div class="line">       명령 이름에 슬래쉬가 포함되어 있지 않으면 쉘을 명령의 위치를 찾는다.  만약 그 이름을 가진 쉘 함수가 존재하면 FUNCTIONS 섹션에서 설명한 것처럼 함수가 실행된다.  그런 함수가 없으면 쉘 내부 명령 목록을 검색한다.  만약 일치하는 것이 발견되면 내부 명령이 실행된다.</div><div class="line"></div><div class="line">       쉘 함수 또는 내부 명령 중 어느 것과도 일치하지 않고 슬래쉬를 포함하고 있지 않으면, bash 는 그 이름을 가진 실행 파일이 들어있는 디렉토리를 찾기 위해 PATH 의 각 원소를 검색한다.  검색에 실패하면 쉘은 에러 메시지를 출력하고 0 아닌 종료 상태값을 반환한다.</div><div class="line"></div><div class="line">       검색에 성공하거나 또는 명령 이름에 하나 이상의 슬래쉬가 포함되어 있을 때에는 그 이름을 가진 프로그램을 실행한다.  전달 인수 0 는 그 이름으로 설정되고, 나머지 전달 인수가 있다면 명령에 대한 전달 인수로 설정된다.</div><div class="line"></div><div class="line">       실행 파일 형식이 아니거나 디렉토리가 아니어서 실행이 실패하면 쉘 명령을 포함하고 있는 쉘 스크립트로 간주한다.  쉘 스크립트를 실행하기 위해 서브쉘을 생성한다.  서브쉘 자체로 다시 초기화하기 때문에 부모 쉘이 기억하고 있는 명령 위치를 기억한다는 점을 제외하고, 나머지 사항에 대해서는 스크립트를 처리하기 위해 새로운 쉘이 실행된 것이나 다름없다.  ( 쉘</div><div class="line">       내부 명령 섹션의 <span class="built_in">hash</span> 참고 )</div><div class="line"></div><div class="line">       만약 프로그램이 <span class="comment">#!  로 시작하는 파일이라면, 첫번째 행의 나머지 부분은 그 프로그램에 대한 해석기이다.  쉘은 이 실행 파일 형식을 그 자체로 다루지 못하는 운영체제 상에서 주어진 해석기를 실행한다.  해석기에 대한 전달 인수는 프로그램의 첫번째 행에서 해석기 이름 다음에 나오는 단일 옵션, 그 다음의 프로그램 이름으로  구성되며  명령  인수가  따라  나오면</span></div><div class="line">       그것도 포함한다.</div><div class="line">환경(ENVIRONMENT)</div><div class="line">       프로그램이 실행될 때 프로그램은 환경 이라고 부르는 문자열 배열을 받는다.  이름=값 의 형식을 갖는 이름-값의 쌍으로 이루어진 목록이다.</div><div class="line"></div><div class="line">       쉘에서 여러 가지 방법으로 환경을 조작할 수 있는 방법을 제공한다.  실행할 때, 쉘은 자신의 환경 변수를 검색한 후 각 이름에 대하여 매개변수를 생성하고 자식 프로세스에게 <span class="built_in">export</span> 하기 위해 자동으로 표시해 둔다.  <span class="built_in">export</span> 와 <span class="built_in">declare</span> -x 명령을 사용하여 매개변수와 함수를 환경에 추가하거나 삭제할 수 있다.  환경의 매개변수 값을 변경하면 새로운 값이 예전 값을</div><div class="line">       치환하여 환경의 일부가 된다.  실행한 명령이 상속한 환경은 쉘의 초기 환경(값을 변경할 수 있음)에서 <span class="built_in">unset</span> 명령으로 제거한 것을 빼고 <span class="built_in">export</span> 와 <span class="built_in">declare</span> -x 명령을 통해 추가한 것으로 이루어진다.</div><div class="line"></div><div class="line">       간단한 명령 또는 함수에 대한 환경은 매개변수 섹션에서 설명한 것처럼 매개변수 지정문을 앞에 두어 임시로 추가할 수 있다.  이러한 지정문은 그 명령의 환경에 대해서만 유효하다.</div><div class="line"></div><div class="line">       -k 플래그가 설정되어 있으면( 아래의 <span class="built_in">set</span> 내부 명령 참고) 명령 앞에 적은 것만이 아니라 모든 매개변수 지정문이 명령에 대한 환경에 놓이게 된다.</div><div class="line"></div><div class="line">       bash 가 외부 명령을 실행할 때 _ 변수는 명령의 완전한 경로명으로 설정되고 그 명령의 환경에 전달된다.</div><div class="line"></div><div class="line">종료 상태</div><div class="line">       쉘에 있어 종료 상태값 0 인 명령은 성공으로 간주한다.  0 이라는 종료 상태값은 성공을 뜻한다.  0 이 아닌 종료 상태값은 실패를 가리킨다.  심각한 시그널을 받아 명령이 종료하면 bash는 종료 상태값으로 128+시그널 값을 사용한다.</div><div class="line"></div><div class="line">       명령을 찾을 수 없을 때 그 명령을 실행하기 위해 생성한 자식 프로세스는 127 이라는 값을 반환한다. 명령을 찾았으나 실행 파일이 아는 경우에는 126 을 반환한다.</div><div class="line"></div><div class="line">       bash 그 자체는 문법 오류 때문에 0 아닌 값을 반환하는 경우가 아니라면, 실행한 마지막 명령의 종료 상태값을 반환한다.  뒤에 나오는 <span class="built_in">exit</span> 내부 명령도 참고하라.</div><div class="line"></div><div class="line">프롬프트(PROMPTING)</div><div class="line">       대화형 모드로 실행하면서, bash 는 명령을 읽을 준비가 되어 있을 때 주 프롬프트인 PS1 를 표시하고 명령을 완성하기 위해 추가 입력이 필요할 때에는 두번째 프롬프트인 PS2 를 표시한다.  Bash 는 다음과 같이 해석되는 백슬래쉬-해석금지된 특수 문자를 이용하여 프롬프트를 정의하여 사용할 수 있도록 해준다:</div><div class="line">              \t     현재 시간을 HH:MM:SS 형식으로 표시</div><div class="line">              \d     날자를 <span class="string">"요일 월 일"</span> 형식으로 표시 (예, <span class="string">"Tue May 26"</span>)</div><div class="line">              \n     개행문자</div><div class="line">              \s     쉘의 이름, <span class="variable">$0</span> 의 베이스 이름 (마지막 슬래쉬 뒷 부분)</div><div class="line">              \w     현재 작업 디렉토리</div><div class="line">              \W     현재 작업 디렉토리의 베이스 이름</div><div class="line">              \u     현재 사용자의 사용자명</div><div class="line">              \h     호스트 이름</div><div class="line">              \<span class="comment">#     이 명령의 명령 번호</span></div><div class="line">              \!     이 명령의 히스토리 번호</div><div class="line">              \$     유효 UID가 0 이면 <span class="keyword">if</span> the effective UID is 0, a <span class="comment">#, 그렇지 않으면 $</span></div><div class="line">              \nnn   팔진수 nnn에 해당하는 문자</div><div class="line">              \\     백슬래쉬</div><div class="line">              \[     비출력 문자의 시퀀스를 시작한다. 프롬프트에 터미널 제어 시퀀스를 넣을 때 사용한다.</div><div class="line">              \]     비출력 문자의 시퀀스를 마친다.</div><div class="line"></div><div class="line">       명령 번호와 히스토리 번호는 일반적으로 다르다: 명령의 히스토리 번호는 히스토리 목록에서의 위치로서 이 목록에는 히스토리 파일로부터 복원된 명령들이 들어있을 수 있는 반면, ( 뒤에 나오는 히스토리(HISTORY) 참고 ) 명령 번호는 현재의 쉘 세션 동안 실행한 명령 순서에서의 위치이다.  문자열을 해독한 후, 매개변수 확장, 명령 대체,  연산  확장,  단어  분리를</div><div class="line">       통해 확장한다.</div><div class="line"></div><div class="line">READLINE</div><div class="line">       -nolineediting 옵션을 주지 않은 한, 대화형 쉘에서 입력을 읽기를 처리해 주는 라이브러리이다.  기본적으로 행 편집 명령은 이맥스의 명령과 비슷하다.  vi 스타일의 행 편집 인터페이스도 제공된다.</div><div class="line"></div><div class="line">       이  섹션에서  키  입력을  표기할  때  이맥스  스타일의  표기  방법을  사용한다.   컨트롤  키는 C-키로 표기한다.  예를 들어 C-n은 컨트롤-N을 뜻한다.  마찬가지로, 메타 키는 M-키로 표기하며 따라서 M-x는 메타-X를 뜻한다.  ( 메타 키가 없는 키보드에서 M-x는 ESC x를 뜻한다.  이스케이프 키를 누른 다음 x 키를 누른다.  ESC는 메타 접두어이다.  M-C-x 조합은</div><div class="line">       ESC-컨트로-x 또는 이스케이프 키를 누른 후 컨트롤 키를 누른 채 x 키를 누르는 것을 뜻한다.)</div><div class="line"></div><div class="line">       기본 키-바인딩은 ~/.inputrc 파일을 사용하여 변경할 수 있다.  쉘 변수 INPUTRC 이 설정되어 있으면 그 값을 ~/.inputrc 대신 사용한다.  이 라이브러리를 사용하는 다른 프로그램에서 자신만의 명령과 바인딩을 추가할 수 있다.</div><div class="line"></div><div class="line">       예를 들어</div><div class="line"></div><div class="line">              M-Control-u: universal-argument</div><div class="line">       또는</div><div class="line">              C-Meta-u: universal-argument</div><div class="line">       를 ~/.inputrc 에 적으면 M-C-u이 readline 명령인 universal-argument 을 실행하게 된다.</div><div class="line"></div><div class="line">       다음의 심볼 문자 이름을 인식한다: RUBOUT, DEL, ESC, LFD, NEWLINE, RET, RETURN, SPC, SPACE, TAB.  명령 이름에 덧붙여, readline은 키에다 문자열을 결합하여 키를 누르면 문자열이 삽입되도록 해준다.(매크로)</div><div class="line"></div><div class="line">       readline은 초기화 파일에 명령을 넣어 조정하여 사용할 수 있다.  이 파일의 이름은 INPUTRC 변수의 값으로부터 취한다.  변수가 <span class="built_in">unset</span> 상태이면 기본값은 ~/.inputrc 이다.  readline 라이브러리를 사용하는 프로그램이 시동하면 초기화 파일을 읽고 키 바인딩과 변수를 설정한다.  readline 초기화 파일에서는 몇 가지 기본적인  구조만  사용할  수  있다.   공백  행은</div><div class="line">       무시한다.  <span class="comment">#로 시작하는 행은 주석이다.  $로 시작하는 행은 조건 구조이다. 이외의 행은 키 바인딩 또는 변수 설정을 나타낸다.</span></div><div class="line"></div><div class="line">       ~/.inputrc  파일  안에서  키  바인딩을  제어하는 문법은 간단하다.  명령의 이름 또는 결합되는 매크로와 키 시퀀스의 텍스트만이 필요하다.  이름은 두 가지 중 한 가지 방식을 사용하여 명시할 수 있다: Meta- 또는 Control- 접두어를 사용하는 심볼 키 이름 또는 키 시퀀스이다.  키이름:함수-이름 또는 매크로 형식을 사용할 때, 키이름 이란 영어로 된 키 이름이다.</div><div class="line">       예를 들어:</div><div class="line"></div><div class="line">              Control-u: universal-argument</div><div class="line">              Meta-Rubout: backward-kill-word</div><div class="line">              Control-o: <span class="string">"&gt;&amp;output"</span></div><div class="line"></div><div class="line">       위 예에서, C-u 는 universal-argument 라는 함수에 결합된다.  M-DEL 은 backward-kill-word 함수에 결합되고, C-o 는 오른쪽에 적은 매크로를 실행하도록 결합된다.(즉, &gt;&amp;output 라는 텍스트를 행에 추가한다.)</div><div class="line"></div><div class="line">       두번째 형태인, <span class="string">"키시퀀스"</span>:함수-이름 또는 매크로에서, 키시퀀스 는 전체 키 시퀀스를 더블 쿼우트 안에 넣어 표시할 수 있다는 점에서 키이름 과 다르다.  다음 예에서처럼 일부 GNU 이맥스 스타일의 키 이스케이프를 사용할 수 있다.</div><div class="line"></div><div class="line">              <span class="string">"\C-u"</span>: universal-argument</div><div class="line">              <span class="string">"\C-x\C-r"</span>: re-read-init-file</div><div class="line">              <span class="string">"\e[11~"</span>: <span class="string">"Function Key 1"</span></div><div class="line"></div><div class="line">       이 예에서, C-u 는 universal-argument 함수에 결합된다.  C-x C-r 는 re-read-init-file 함수에 결합되고, ESC [ 1 1 ~ 는 Function Key 1 라는 텍스트를 입력하도록 결합된다.  이스케이프 시퀀스는 다음과 같다:</div><div class="line"></div><div class="line">              \C-    컨트롤 접두어</div><div class="line"></div><div class="line">              \M-    메타 접두어</div><div class="line"></div><div class="line">              \e     이스케이프 문자</div><div class="line"></div><div class="line">              \\     백슬래쉬</div><div class="line"></div><div class="line">              \<span class="string">"     글자 그대로의 "</span></div><div class="line"></div><div class="line">              \<span class="string">'     글자 그대로의 '</span></div><div class="line"></div><div class="line">       매크로 텍스트를 넣을 때에는 매크로 정의라는 것을 지시하기 위해 싱글 또는 더블 쿼우트를 사용해야 한다.  쿼우트하지 않은 텍스트는 함수 이름이라고 간주한다.  백슬래쉬는 <span class="string">" 와 ' 를 포함하여 매크로 텍스트 안의 모든 문자를 쿼우트할 수 있다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       Bash 에서는 bind 내부 명령을 사용하여 현재의 readline 키 바인딩을 표시하거나 수정할 수 있다.  set 내부 명령에 -o 옵션을 주어 대화형 모드에서 편집 모드를 전환할 수 있다.  ( 쉘 내부 명령 참고 )</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       Readline에는 행동 방식을 좀 더 변경할 수 있도록 해주는 변수가 있다.  이 변수는 inputrc 파일에</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              set 변수-이름 값 의 형식을 갖는 문장을 통해 설정할 수 있다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       특별히 거론하는 경우를 제외하고 readline 변수는 On 또는 Off 의 값을 취한다.  변수와 각 기본값은 다음과 같다:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       horizontal-scroll-mode (Off)</span></div><div class="line"><span class="string">              On으로 설정하면 readline은 한 줄로 화면에 표시하며 화면 폭보다 긴 입력에 대해서는 자동으로 줄바꿈하지 않고 수평 방향으로 스크롤한다.</span></div><div class="line"><span class="string">       editing-mode (emacs)</span></div><div class="line"><span class="string">              readline이 emacs 와 vi와 유사한 키 바인딩 집합 중 어느 것으로 시작할 것인지 제어한다.  editing-mode 모드는 emacs 또는 vi 이 가능하다.</span></div><div class="line"><span class="string">       mark-modified-lines (Off)</span></div><div class="line"><span class="string">              On로 설정하면 히스토리 중 수정된 사항은 그 앞에 애스테리스크 (*)를 넣어 표시한다.</span></div><div class="line"><span class="string">       bell-style (audible)</span></div><div class="line"><span class="string">              readline에서 터미널 벨을 울리고자 할 때 어떻게 할 것인지 제어한다.  none으로 설정하면 소리를 내지 않는다.  visible로 설정하면 사용 가능한 경우 비주얼 벨을 사용한다.  audible로 설정하면 터미널의 벨 기능을 시도한다.</span></div><div class="line"><span class="string">       comment-begin (``#'')</span></div><div class="line"><span class="string">              vi-comment 명령이 실행될 때 vi 모드에서 삽입되는 문자열</span></div><div class="line"><span class="string">       meta-flag (Off)</span></div><div class="line"><span class="string">              On으로 설정하면 터미널의 지원 여부와 상관없이 8 비트 입력을 가능케 한다.(즉 읽어 들이는 문자의 상위 비트를 자르지 않는다.)</span></div><div class="line"><span class="string">       convert-meta (On)</span></div><div class="line"><span class="string">              On으로 설정하면 8 비트 문자를 8 번째 비트 제거한 ASCII 키 시퀀스 앞에 이스케이프 문자를 넣어 변환한다.(실제로 메타 접두어를 이스케이프로 사용한다.)</span></div><div class="line"><span class="string">       output-meta (Off)</span></div><div class="line"><span class="string">              On으로 설정하면 8 번째 비트를 포함하고 있는 문자열을 표시할 때 메타 접두어를 사용한 이스케이프 시퀀스로 표시하지 않고 그대로 직접 표시한다.</span></div><div class="line"><span class="string">       completion-query-items (100)</span></div><div class="line"><span class="string">              possible-completions 명령에 의하여 발생된 가능한 완성 목록의 갯수가 몇 개를 넘으면 사용자에게 물어볼 것인지 결정한다.  0 보다 크거나 같은 정수로 설정한다.  가능한 완성의 갯수가 이 변수의 값보다 크면 사용자에게 전체를 볼 것인지 아닌지 묻는다; 그렇지 않을 때에는 그냥 터미널에 나열한다.</span></div><div class="line"><span class="string">       keymap (emacs)</span></div><div class="line"><span class="string">              현재 readline 키맵을 설정한다.  가능한 키맵 이름으로는 emacs, emacs-standard, emacs-meta, emacs-ctlx, vi, vi-move, vi-command, vi-insert 가 있다.  vi는 vi-command와 같다; emacs는 emacs-standard와 같다.  기본값은 emacs 이다; editing-mode 의 값이 또한 기본 키맵에 영향을 준다.</span></div><div class="line"><span class="string">       show-all-if-ambiguous (Off)</span></div><div class="line"><span class="string">              완성 함수의 기본 행동 방식을 변경한다.  on 으로 설정하면 하나 이상의 완성이 가능한 단어에 대하여 소리를 내지 않고 즉시 그 목록을 보여준다.</span></div><div class="line"><span class="string">       expand-tilde (Off)</span></div><div class="line"><span class="string">              on으로 설정하면 단어 완성을 시도할 때 틸드 확장을 한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       Readline은 키 바인딩과 변수 설정을 테스트의 결과에 따라 수행하게 해주는 C 전처리기의 조건적 컴파일과 유사한 기능을 구현하고 있다.  3 가지 파서 지시자가 사용된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       <span class="variable">$if</span>    <span class="variable">$if</span> 구조를 사용하여 편집 모드, 사용하고 있는 터미널, readline을 사용하는 애플리케이션에 따라 바인딩을 다르게 할 수 있다.  테스트 텍스트는 행의 끝까지이다; 테스트 텍스트를 다른 것과 구분하는 문자는 없다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              mode   <span class="variable">$if</span> 지시자의 mode= 형태는 readline이 이맥스 모드인가 vi 모드인가 테스트할 때 사용한다.  예를 들어, set keymap 명령과 함께 사용하여 readline이 이맥스 모드로 시작했을 때에만 emacs-standard의 바인딩과 emacs-ctlx 키맵을 설정하도록 할 수 있다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              term   term= 형태는 터미널의 펑션 키에 키 시퀀스 출력을 결합하는 등의 특정 터미널 키 바인딩에서 사용한다.  = 의 오른쪽 단어를 터미널의 완전한 이름과 이름 중 첫번째 -의 앞 부분과 테스트한다.  예를 들어, sun 은 sun 과 sun-cmd 둘 다 일치하게 된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              application</span></div><div class="line"><span class="string">                     application 구조는 애플리케이션별 설정을 포함할 때 사용한다.  readline 라이브러리를 사용하는 각 프로그램은 애플리케이션 이름을 설정하며 초기화 파일에서 이 특정값을 테스트할 수 있다.  특정 프로그램에서 유용한 함수에 키 시퀀스를 결합하는데 사용된다.  예를 들어, 다음 명령은  bash에서  현재  또는  이전  단어를  쿼우트하는  키  시퀀스를</span></div><div class="line"><span class="string">                     추가한다:</span></div><div class="line"><span class="string">                     <span class="variable">$if</span> Bash</span></div><div class="line"><span class="string">                     # Quote the current or previous word</span></div><div class="line"><span class="string">                     "</span>\C-xq<span class="string">": "</span>\eb\<span class="string">"\ef\""</span></div><div class="line">                     <span class="variable">$endif</span></div><div class="line"></div><div class="line">       <span class="variable">$endif</span> 이 명령은 앞에서 본 것처럼 <span class="variable">$if</span> 명령을 종결한다.</div><div class="line"></div><div class="line">       <span class="variable">$else</span>  이 가지에 속한 명령은 <span class="variable">$if</span> 지시자의 테스트에 실패했을 때 실행된다.</div><div class="line"></div><div class="line">       Readline 명령에는 수치 인수 를 줄 수 있는데 일반적으로 반복 횟수를 의미한다.  하지만 종종 인수의 부호가 중요할 때가 있다.  앞 방향으로 동작하는 명령(예, <span class="built_in">kill</span>-line) 에 음수 인수를 전달하면 뒷 방향으로 동작한다.  전달한 인수에 따라 명령의 행동 방식이 바뀌는 것에 대해서는 언급한다.</div><div class="line"></div><div class="line">       어떤 명령이 텍스트를 죽인다(<span class="built_in">kill</span>)라고 할 때, 삭제된 그 텍스트는 나중에 불러 사용할 것을 위해 저장된다.(yanking이라고 부른다) 죽인 텍스트는 <span class="built_in">kill</span>-ring이라는 곳에 보관된다.  연속적으로 텍스트를 죽이면 한 단위로 축적되어 한 번에 다시 yank할 수 있다.  텍스트를 죽이지 않는 명령은 <span class="built_in">kill</span>-ring에서 텍스트를 서로 분리한다.</div><div class="line"></div><div class="line">       다음은 명령 이름과 기본값으로 결합되어 있는 키 시퀀스 목록이다.</div><div class="line"></div><div class="line">   이동을 위한 명령</div><div class="line">       beginning-of-line (C<span class="_">-a</span>)</div><div class="line">              현재 행의 처음으로 이동</div><div class="line">       end-of-line (C<span class="_">-e</span>)</div><div class="line">              현재 행의 끝으로 이동</div><div class="line">       forward-char (C<span class="_">-f</span>)</div><div class="line">              한 문자 앞으로 이동</div><div class="line">       backward-char (C-b)</div><div class="line">              한 문자 뒤로 이동</div><div class="line">       forward-word (M<span class="_">-f</span>)</div><div class="line">              다음 단어의 끝으로 전진 이동.  단어는 알파벳숫자 문자로 구성된다.  (문자와 숫자)</div><div class="line">       backward-word (M-b)</div><div class="line">              현재 단어 또는 이전 단어의 처음으로 후진 이동.  단어는 알파벳숫자 문자로 구성된다.  (문자와 숫자)</div><div class="line">       clear-screen (C<span class="_">-l</span>)</div><div class="line">              현재 행을 화면 상단에 두고 화면을 지운다.  인수가 있으면 화면을 지우지 않은 채 현재 행을 갱신한다.</div><div class="line">       redraw-current-line</div><div class="line">              현재 행을 갱신한다.  기본적으로 결합된 키가 없다.</div><div class="line"></div><div class="line">   히스토리 처리 명령</div><div class="line">       accept-line (Newline, Return)</div><div class="line">              커서가 어디에 있든 행을 받아들인다.  빈 행이 아니면 HISTCONTROL 변수의 상태에 따라 히스토리 목록에 추가한다.  만약 히스토리 행을 수정한 것이라면 히스토리 행을 원래 상태로 복원한다.</div><div class="line">       previous-history (C-p)</div><div class="line">              히스토리 목록에서 뒤로 이동하여 이전 명령을 가져온다.</div><div class="line">       next-history (C-n)</div><div class="line">              히스토리 목록에서 앞으로 이동하여 다음 명령을 가져온다.</div><div class="line">       beginning-of-history (M-&lt;)</div><div class="line">              히스토리의 첫번째 행으로 이동</div><div class="line">       end-of-history (M-&gt;)</div><div class="line">              입력 히스토리의 끝으로 이동. 즉, 현재 입력하고 있던 행으로 돌아옴</div><div class="line">       reverse-search-history (C-r)</div><div class="line">              현재 행부터 시작하여 히스토리를 올라가면서 후방으로 검색한다.  누적 검색이다.</div><div class="line">       forward-search-history (C<span class="_">-s</span>)</div><div class="line">              현재 행부터 시작하여 히스토리를 내려가면서 전방으로 검색한다.  누적 검색이다.</div><div class="line">       non-incremental-reverse-search-history (M-p)</div><div class="line">              현재 행부터 시작하여 히스토리를 후방으로 검색하되 누적 검색을 하지 않는다.</div><div class="line">       non-incremental-forward-search-history (M-n)</div><div class="line">              현재 행부터 시작하여 히스토리를 전방으로 검색하되 누적 검색을 하지 않는다.</div><div class="line">       <span class="built_in">history</span>-search-forward</div><div class="line">              현재 행의 시작부터 현재 점까지의 문자열을 히스토리에서 전방으로 검색한다.  누적 검색을 하지 않는다.  기본적으로 결합되어 있지 않다.</div><div class="line">       <span class="built_in">history</span>-search-backward</div><div class="line">              현재 행의 시작부터 현재 점까지의 문자열을 히스토리에서 후방으로 검색한다.  누적 검색을 하지 않는다.  기본적으로 결합되어 있지 않다.</div><div class="line">       yank-nth-arg (M-C-y)</div><div class="line">              현재 커서 지점에서 이전 명령에 대한 첫번째 인수를 삽입한다.  (보통 이전 행의 두번째 단어에 해당된다.)  인수 n 을 적으면 이전 명령으로부터 n 번째 단어를 삽입한다.(이전 명령의 단어는 0 부터 순서를 매긴다)  음수인 경우 이전 명령의 끝에서 n 번째 단어를 삽입한다.</div><div class="line">       yank-last-arg (M-., M-_)</div><div class="line">              이전 명령의 마지막 인수를 삽입한다.(이전 행의 마지막 단어) 인수를 주면 yank-nth-arg과 동일하게 동작한다.</div><div class="line">       shell-expand-line (M-C<span class="_">-e</span>)</div><div class="line">              쉘이 입력을 받는 동안 하는 것처럼 행을 확장한다.  모든 쉘 단어 확장은 물론 앨리어스, 히스토리 확장을 수행한다.  히스토리 확장에 대해서는 뒤에 나오는 히스토리 확장 을 참고하라.</div><div class="line">       <span class="built_in">history</span>-expand-line (M-^)</div><div class="line">              현재 행에 대하여 히스토리 확장을 수행한다.  히스토리 확장에 대해서는 뒤에 나오는 히스토리 확장 을 참고하라.</div><div class="line">       insert-last-argument (M-., M-_)</div><div class="line">              yank-last-arg와 동의어</div><div class="line">       operate-and-get-next (C-o)</div><div class="line">              현재 행을 받아들여 실행하고 편집을 위하여 히스토리로부터 현재 행에 대하여 다음 행을 가져온다.  모든 인수는 무시한다.</div><div class="line"></div><div class="line">   텍스트 변경 명령</div><div class="line">       delete-char (C<span class="_">-d</span>)</div><div class="line">              커서 아래 있는 문자를 삭제한다.  행의 시작 부분에 있을 때, 행에 아무런 글자도 없을 때 그리고 마지막 문자를 입력하지 않았을 때 C<span class="_">-d</span> 는 EOF 를 반환한다.</div><div class="line">       backward-delete-char (Rubout)</div><div class="line">              커서 뒤에 있는 문자를 삭제한다.  수치 인수를 주면 <span class="built_in">kill</span>-ring에 삭제한 텍스트를 저장한다.</div><div class="line">       quoted-insert (C-q, C-v)</div><div class="line">              이 다음부터 타이핑하는 문자를 행에 있는 그대로 추가한다.  예를 들어, C-q와 같은 문자를 삽입할 때 사용한다.</div><div class="line">       tab-insert (C-v TAB)</div><div class="line">              탭 문자를 삽입한다.</div><div class="line">       self-insert (a, b, A, 1, !, ...)</div><div class="line">              입력한 문자를 삽입한다.</div><div class="line">       transpose-chars (C-t)</div><div class="line">              입력점에 앞에 있는 문자와 입력점에 놓인 문자를 서로 교환한다.  입력점도 앞으로 전진한다.  입력점이 행의 끝에 있으면 입력점 앞에 있는 두 문자를 치환한다.  음수 인수는 작동하지 않는다.</div><div class="line">       transpose-words (M-t)</div><div class="line">              커서 뒤에 있는 단어를 커서 앞으로 끌어 놓는다.  커서 또한 이동한다.</div><div class="line">       upcase-word (M-u)</div><div class="line">              현재(또는 뒤에 나오는) 단어를 대문자화한다.  음수 인수를 주면 앞 단어에 대하여 대문자화를 진행하지만 입력점은 움직이지 않는다.</div><div class="line">       downcase-word (M<span class="_">-l</span>)</div><div class="line">              현재(또는 뒤에 나오는) 단어를 소문자화한다.  음수 인수를 주면 앞 단어에 대하여 소문자화를 진행하지만 입력점은 움직이지 않는다.</div><div class="line">       capitalize-word (M-c)</div><div class="line">              현재(또는 뒤에 나오는) 단어의 첫글자를 대문자화한다.  음수 인수를 주면 앞 단어에 대하여 수행하며 입력점은 움직이지 않는다.</div><div class="line"></div><div class="line">   죽이기와 붙이기(Killing, Yanking)</div><div class="line">       <span class="built_in">kill</span>-line (C-k)</div><div class="line">              현재 커서 위치로부터 행 끝까지 텍스트를 죽인다.</div><div class="line">       backward-kill-line (C-x C-Rubout)</div><div class="line">              현재 커서 위치로부터 행의 앞까지 텍스트를 죽인다.</div><div class="line">       unix-line-discard (C-u)</div><div class="line">              현재 입력점으로부터 행의 앞까지 텍스트를 죽인다.</div><div class="line">       <span class="built_in">kill</span>-whole-line</div><div class="line">              커서가 어디에 있든 현재 행의 모든 문자를 죽인다.  기본적으로 결합되어 있지 않는다.</div><div class="line">       <span class="built_in">kill</span>-word (M<span class="_">-d</span>)</div><div class="line">              커서 위치로부터 현재 단어의 끝까지 또는 단어 중간인 경우 그 다음 단어의 끝까지 죽인다.  단어 경계는 forward-word 에서 사용하는 것과 동일하다.</div><div class="line">       backward-kill-word (M-Rubout)</div><div class="line">              커서 뒤의 단어를 죽인다.  단어 경계는 forward-word 에서 사용하는 것과 동일하다.</div><div class="line">       unix-word-rubout (C-w)</div><div class="line">              화이트스페이스를 단어 경계로 하여 커서 뒤의 단어를 죽인다.  단어 경계는 backward-kill-word에서와 다르다.</div><div class="line">       delete-horizontal-space</div><div class="line">              입력점 주변의 모든 스페이스와 탭을 삭제한다.  기본적으로 키와 결합되어 있지 않다.</div><div class="line">       yank (C-y)</div><div class="line">              <span class="built_in">kill</span> ring의 상단에 놓인 것을 커서 위치의 버퍼에 붙인다.</div><div class="line">       yank-pop (M-y)</div><div class="line">              <span class="built_in">kill</span>-ring을 순환시킨 후 상단의 것을 붙인다.  yank 또는 yank-pop 다음에만 동작한다.</div><div class="line"></div><div class="line">   수치 인수</div><div class="line">       digit-argument (M-0, M-1, ..., M--)</div><div class="line">              이미 축적 중인 인수에 이 숫자를 더하거나 새로운 인수를 시작한다.  M-- 는 음수 인수를 시작한다.</div><div class="line">       universal-argument</div><div class="line">              실행할 때마다 인수 갯수에 4 를 곱한다.  인수 갯수는 처음에 1 이다.  따라서 한 번 실행하면 인수 갯수가 4 가 된다.  기본적으로 키에 결합되어 있지 않다.</div><div class="line"></div><div class="line">   완성</div><div class="line">       complete (TAB)</div><div class="line">              입력점 앞의 텍스트에 대하여 완성을 시도한다.  Bash 는 텍스트를 순서대로 변수($로 텍스트가 시작하면), 사용자 이름(~로 시작하면), 호스트 이름(@로 시작하면) 또는 명령(앨리어스와 함수 포함)으로 취급하여 완성을 시도한다.  일치하는 것이 없을 때에는 파일 이름 완성을 시도한다.</div><div class="line">       possible-completions (M-?)</div><div class="line">              입력점 앞의 텍스트에 대한 완성 후보 목록을 보여준다.</div><div class="line">       insert-completions</div><div class="line">              possible-completions로 만들어 질 수 있는 모든 완성 텍스트를 입력점 앞에 삽입한다.  기본적으로 키와 결합되어 있지 않다.</div><div class="line">       complete-filename (M-/)</div><div class="line">              입력점 앞의 텍스트에 대하여 파일 이름 완성을 시도한다.</div><div class="line">       possible-filename-completions (C-x /)</div><div class="line">              입력점 앞의 텍스트를 파일 이름으로 간주하고 완성 후보 목록을 보여준다.</div><div class="line">       complete-username (M-~)</div><div class="line">              입력점 앞의 텍스트에 대하여 사용자 이름 완성을 시도한다.</div><div class="line">       possible-username-completions (C-x ~)</div><div class="line">              입력점 앞의 텍스트를 사용자 이름으로 간주하고 완성 후보 목록을 보여준다.</div><div class="line">       complete-variable (M-$)</div><div class="line">              입력점 앞의 텍스트에 대하여 쉘 변수 완성을 시도한다.</div><div class="line">       possible-variable-completions (C-x $)</div><div class="line">              입력점 앞의 텍스트를 쉘 변수로 간주하고 완성 후보 목록을 보여준다.</div><div class="line">       complete-hostname (M-@)</div><div class="line">              입력점 앞의 텍스트에 대하여 호스트 이름 완성을 시도한다.</div><div class="line">       possible-hostname-completions (C-x @)</div><div class="line">              입력점 앞의 텍스트를 호스트 이름으로 간주하고 완성 후보 목록을 보여준다.</div><div class="line">       complete-command (M-!)</div><div class="line">              입력점 앞의 텍스트에 대하여 명령 완성을 시도한다.  명령 완성은 텍스트를 앨리어스, 예약어, 쉘 함수, 내부 명령, 마지막으로 실행 파일 이름 순으로 일치를 시도한다.</div><div class="line">       possible-command-completions (C-x !)</div><div class="line">              입력점 앞의 텍스트를 명령 이름으로 간주하고 완성 후보 목로을 보여준다.</div><div class="line">       dynamic-complete-history (M-TAB)</div><div class="line">              입력접 앞의 텍스트를 히스토리 목록의 행과 비교하여 완성을 시도한다.</div><div class="line">       complete-into-braces (M-&#123;)</div><div class="line">              파일 이름 완성을 수행하고 완성 후보 목록을 쉘에서 사용할 수 있도록 중괄호 안에 넣는다.  ( 앞서 나온 중괄호 확장 을 참고 )</div><div class="line"></div><div class="line">   키보드 매크로</div><div class="line">       start-kbd-macro (C-x ()</div><div class="line">              입력하는 문자를 현재 키보드 매크로에 저장하기 시작한다.</div><div class="line">       end-kbd-macro (C-x ))</div><div class="line">              현재 키보드 매크로에 저장하기를 멈추고 정의 내용을 저장한다.</div><div class="line">       call-last-kbd-macro (C-x e)</div><div class="line">              최근에 정의한 키보드 매크로를 다시 실행하여 마치 키보드로 입력한 것처럼 매크로 안의 문자를 보여준다.</div><div class="line"></div><div class="line">   기타</div><div class="line">       re-read-init-file (C-x C-r)</div><div class="line">              여러분의 초기화 파일 내용을 다시 읽어 모든 바인딩과 변수 지정을 현재 환경에 추가한다.</div><div class="line">       abort (C-g)</div><div class="line">              현재 진행 중인 편집 명령을 중지하고 터미널 벨을 울린다.  ( bell-style 설정에 따라 벨이 울릴 것인지 여부는 달라진다)</div><div class="line">       <span class="keyword">do</span>-uppercase-version (M<span class="_">-a</span>, M-b, ...)</div><div class="line">              해당하는 대문자와 결합된 명령을 실행한다.</div><div class="line">       prefix-meta (ESC)</div><div class="line">              다음 입력하는 문자를 메타화한다.  ESC f 는 메타-f 와 동일하다.</div><div class="line">       undo (C-_, C-x C-u)</div><div class="line">              각 행에 대하여 기억된 내용으로 누증 편집 명령 되돌리기를 행한다.</div><div class="line">       revert-line (M-r)</div><div class="line">              행에 가해진 모든 변화 내용을 취소하고 원래대로 돌려 놓는다.  행의 초기 상태로 돌려 놓기 위해 undo 명령을 여러 번 실행한 것과 같다.</div><div class="line">       tilde-expand (M-~)</div><div class="line">              현재 단어에 대한 틸드 확장을 수행한다.</div><div class="line">       dump-functions</div><div class="line">              readline 출력 스트림에 모든 함수와 키 바인딩을 출력한다.  수치 인수를 주면 inputrc 파일에 넣을 수 있는 형태로 형식화해서 출력해준다.</div><div class="line">       display-shell-version (C-x C-v)</div><div class="line">              현재 실행 중인 bash 의 버전 정보를 보여준다.</div><div class="line"></div><div class="line">히스토리(HISTORY)</div><div class="line">       대화형  모드에서 쉘은 이전에 입력한 명령 목록인 명령 히스토리를 접근할 수 있도록 해준다.  최근 HISTSIZE 갯수의 명령 텍스트는(기본 500) 히스토리 목록에 저장된다.  쉘은 각 명령에 대하여 매개변수 확장과 변수 확장 전에 히스토리 목록에 저장한다.  ( 확장 참고 ) 그러나 command_oriented_history 와 HISTCONTROL 변수의 값에 따라 히스토리 확장을 수행한 후에</div><div class="line">       저장하기도 한다.  시동할 때, 히스토리는 HISTFILE 변수가 가리키는 파일로부터 초기화된다.  (기본값 ~/.bash_history).  HISTFILESIZE 보다 커지지 않도록 필요할 때에는 HISTFILE 파일을 잘라낸다.  내부 명령 <span class="built_in">fc</span> ( 쉘 내부 명령 참고)을 사용하여 히스토리를 보거나 일부 명령을 편집하여 재실행할 수 있다.  <span class="built_in">history</span> 내부 명령을 사용하여 히스토리  목록을  표시하고</div><div class="line">       히스토리 파일을 조작할 수 있다.  명령행 편집을 사용할 때 각 모드마다 히스토리 목록을 검색할 수 있는 명령이 있다.  대화형 쉘을 종료하면 최근 HISTSIZE 행만큼이 히스토리 목록으로부터 HISTFILE 로 복사된다.  HISTFILE 을 <span class="built_in">unset</span>하거나 히스토리 파일에 쓸 수 없을 때는 히스토리를 저장하지 않는다.</div><div class="line"></div><div class="line">히스토리 확장(HISTORY EXPANSION)</div><div class="line">       쉘에서는 csh 의 히스토리 확장과 유사한 히스토리 확장 기능을 지원한다.  이 섹션에서는 사용 가능한 기능의 문법을 설명한다.  대화형 쉘에서는 기본 동작하며 +H option to the <span class="built_in">set</span> 내부 명령에 +H 옵션을 주어 해제할 수 있다.  ( 쉘 내부 명령 참고) 비대화형 모드 쉘에서는 히스토리 확장을 수행하지 않는다.</div><div class="line"></div><div class="line">       히스토리  확장은  완전한  행이  읽히고 쉘이 단어로 분리하기 전에 즉시 수행된다.  두 부분에서 일어난다.  우선 이전 히스토리로부터 어떤 행을 가져가 치환에 사용할 것인지 결정한다.  두번째는 현재 행에 포함시키기 위해 그 행의 일부분을 선택한다.  이전 히스토리로부터 선택된 행을 이벤트(event)라 하며 행동이 취해 질 그 행의 일부분을 단어(words)라고 한다.</div><div class="line">       행은 입력을 읽어 들일 때와 같은 방식으로 단어로 분리되며 따라서 몇 가지 메타문자에 의해 구분된 단어가 쿼우트로 둘러 싸이면는 하나의 단어로 취급한다.  오로지 백슬래쉬(\)와 싱글 쿼우트만이 히스토리 이스케이프 문자를 (기본값 !) 쿼우트할 수 있다.</div><div class="line"></div><div class="line">       히스토리 확장 메커니즘에서 사용하는 다양한 문자를 제어할 수 있다.  ( 쉘 변수 섹션에서 histchars 설명 참고 )</div><div class="line"></div><div class="line">   이벤트 지시자(Event Designators)</div><div class="line">       이벤트 지시자는 히스토리 목록의 명령행 항목에 대한 참조이다.</div><div class="line"></div><div class="line">       !      그 뒤에 공백, 개행문자, = 또는 ( 가 나오는 경우를 제외하고 히스토리 치환을 시작하도록 한다.</div><div class="line">       !!     이전 명령을 가리킨다. `!-1<span class="string">'와 동의어이다.</span></div><div class="line"><span class="string">       !n     n 번 명령행을 가리킨다.</span></div><div class="line"><span class="string">       !-n    현재 명령행에서 n 를 뺀 행을 가리킨다.</span></div><div class="line"><span class="string">       !문자열</span></div><div class="line"><span class="string">              문자열 로 시작하는 가장 최근 명령을 가리킨다.</span></div><div class="line"><span class="string">       !?문자열[?]</span></div><div class="line"><span class="string">              문자열 을 포함하는 가장 최근 명령을 가리킨다.</span></div><div class="line"><span class="string">       ^문자열1^문자열2^</span></div><div class="line"><span class="string">              빠른 치환. 지난 번 명령에 대하여 문자열1 을 문자열2 로 바꾸어 실행한다.  ``!!:s/문자열1/문자열2/'</span><span class="string">'와 같다.  (변경자(Modifiers) 참고).</span></div><div class="line"><span class="string">       !#     지금까지 입력한 전체 명령행.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   단어 지시자</span></div><div class="line"><span class="string">       : 는 단어 지시자로부터 이벤트 명시를 분리한다.  단어 지시자가 ^, $, *, % 로 시작할 때에는 생략할 수 있다.  단어는 행의 처음부터 시작하여 세며 첫번째 단어는 0(숫자 영) 으로 나타낸다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       0 (숫자 영)</span></div><div class="line"><span class="string">              0 번째 단어. 쉘에 있어 명령 단어에 해당한다.</span></div><div class="line"><span class="string">       n      n번째 단어.</span></div><div class="line"><span class="string">       ^      첫번째 인수 즉 단어 1 이다.</span></div><div class="line"><span class="string">       $      마지막 인수.</span></div><div class="line"><span class="string">       %      가장 최근의 `?문자열?'</span> 검색과 일치하는 단어</div><div class="line">       x-y    단어의 범위; `-y<span class="string">' 는 `0-y'</span>와 같이 줄여 쓴다.</div><div class="line">       *      0 번째를 제외한 모든 단어.  `1-$<span class="string">'와 동의어이다 이벤트에 단어 하나만 있을 때에도 * 를 사용하는 것은 에러가 아니다;  이 경우 빈 문자열이 반환된다.</span></div><div class="line"><span class="string">       x*     x-$를 줄여 쓴 것이다.</span></div><div class="line"><span class="string">       x-     x*와 같이 x-$를 줄여 쓴 것이지만 마지막 단어를 제외한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">   변경자(Modifiers)</span></div><div class="line"><span class="string">       선택적인 단어 지시자 뒤에 앞에 `:'</span>를 붙여 다음과 같은 변경자를 추가할 수 있다.</div><div class="line"></div><div class="line">       h      머리 부분만 남기도 뒷부분 경로명 부분을 제거한다.</div><div class="line">       r      베이스 이름만 남기고 .xxx 형태의 뒷부분 꼬리말을 제거한다.</div><div class="line">       e      꼬리말을 제외하고 모두 제거한다.</div><div class="line">       t      꼬리 부분은 남기고 앞에 나오는 모든 경로명 부분을 제거한다.</div><div class="line">       p      새로운 명령을 출력하지만 실행하지는 않는다.</div><div class="line">       q      치환된 단어를 쿼우트하여 더 이상 치환이 일어나지 않도록 해석금지시킨다.</div><div class="line">       x      q 과 함께 사용하여 치환된 단어를 쿼우트한다.  그러나 공백 과 개행문자에서 단어를 분리한다.</div><div class="line">       s/예전것/새것/</div><div class="line">              이벤트 행에서 처음 나오는 예전것 을 새것 으로 교체한다. / 대신 어떤 분리자도 사용 가능하다.  마지막 분리자가 이벤트 행의 마지막 단어일 때는 생략 가능하다.  예전것 과 새것 안에서 단일 백슬래쉬를 사용하여 분리자를 쿼우트할 수 있다.  새것 안에 &amp; 이 있으면 그 문자는 예전것 으로 치환된다.  단일 백슬래쉬를 사용하여 &amp; 를 쿼우트할 수 있다.</div><div class="line">       &amp;      이전 치환을 반복한다.</div><div class="line">       g      변화 내용을 전체 이벤트 행에 적용하도록 한다.  `:s<span class="string">' (예, `:gs/예전것/새것/'</span>) 또는 `:&amp;<span class="string">'와 사용한다.  If used with `:s'</span>와 사용하면 / 대신 어떤 분리자든 사용할 수 있으며 마지막 분리자가 이벤트 행의 마지막 문자일 때는 생략할 수 있다.</div><div class="line"></div><div class="line">산술 평가(ARITHMETIC EVALUATION)</div><div class="line">       쉘은 특정 상황에서 산술 표현식을 계산할 수 있도록 해준다.  ( <span class="built_in">let</span> 내부 명령과 연산 확장 참고 ) 평가는 오버플로우 점검 없이 long 형 정수로 이루어진다. 0 으로 나누는 것은 잡아내어 에러로 표시한다.  다음 연산자 목록은 같은 우선 순위를 갖는 것끼리 모았다.  나열한 순위는 내림 차순이다.</div><div class="line"></div><div class="line">       - +    단일 마이너스와 플러스</div><div class="line">       ! ~    논리적 그리고 비트수준 부정</div><div class="line">       * / %  곱하기, 나누기, 나머지 연산</div><div class="line">       + -    더하기, 빼기</div><div class="line">       &lt;&lt; &gt;&gt;  왼쪽, 오른쪽 비트 쉬프트</div><div class="line">       &lt;= &gt;= &lt; &gt;</div><div class="line">              비교</div><div class="line">       == !=  같다, 같지 않다</div><div class="line">       &amp;      비트수준 AND</div><div class="line">       ^      비트수준 배타적(exclusive) OR</div><div class="line">       |      비트수준 OR</div><div class="line">       &amp;&amp;     논리적 AND</div><div class="line">       ||     논리적 OR</div><div class="line">       = *= /= %= += -= &lt;&lt;= &gt;&gt;= &amp;= ^= |=</div><div class="line">              지정</div><div class="line"></div><div class="line">       피연산자로 쉘 변수를 사용할 수 있다; 표현식을 평가하기 전에 매개변수 확장이 수행된다.  매개변수의 갑은 표현식 안에서 long 형 정수로 강제 전환한다. 표현식에 사용하기 위해 쉘 변수의 정수 속성을 켤 필요는 없다.</div><div class="line"></div><div class="line">       0으로 시작하는 상수는 8 진수로 해석한다.  0x 또는 0X로 시작하면 16 진수를 뜻한다.  그 외의 경우에 대해서는 [base<span class="comment">#]n 형태로 숫자를 받아들인다.  여기서 base는 진법을 나타내는 2 부터 36 사이의 10진수이며 n는 그 진법 안에서의 숫자이다.  base를 생략하면 10 진법을 사용한다.</span></div><div class="line"></div><div class="line">       연산자는 우선 순위에 의거하여 평가해 나간다. 괄호 안의 서브 표현식은 먼저 평가하며 위에서 말한 우선 순위를 무시하도록 한다.</div><div class="line"></div><div class="line">쉘 내부 명령(SHELL BUILTIN COMMANDS)</div><div class="line">       : [인수들]</div><div class="line">              아무런 효과도 없다; 인수들 을 확장하고 명시된 리다이렉션을 행하는 것을 제외하고 아무 일도 하지 않는다.  종료 상태값 0 을 반환한다.</div><div class="line"></div><div class="line">        .  파일명 [인수들]</div><div class="line">       <span class="built_in">source</span> 파일명 [인수들]</div><div class="line">              파일명 으로부터 명령을 읽어 현재 쉘 환경 안에서 실행한다.  파일명 에서 읽어 수행한 마지막 명령의 종료 상태값을 반환한다.  파일명 에 슬래쉬가 없으면 PATH 변수에 들어있는 경로명을 사용하여 파일명 을 검색한다.  PATH 변수에서 찾는 파일이 실행 파일일 필요는 없다.  PATH 에서 파일을 찾을 수 없으면 현재 디렉토리를 찾는다.  인수들을 적으면  파일을</div><div class="line">              실행할 때 위치 매개변수로 사용한다.  그렇지 않으면 위치 매개변수는 변하지 않는다.  스크립트 내에서 종료한 마지막 명령의 상태값을 반환하고(아무 명령도 실행되지 않았으면 0) 파일명 을 찾을 수 없으면 거짓을 반환한다.</div><div class="line"></div><div class="line">       <span class="built_in">alias</span> [이름[=값] ...]</div><div class="line">              아무런  인수 없이 Alias를 실행하면 표준 출력에 이름=값의 형식으로 앨리어스 목록을 출력해준다.  인수를 제공하면 각각의 이름에 대하여 값을 앨리어스로 정의한다.  값 뒤에 스페이스를 두면 앨리어스 확장 시 그 다음 단어에 대해서도 앨리어스 확장이 가능한지 점검하도록 할 수 있다.  인수 목록에서 값을 주지 않은 이름에 대해서는 앨리어스의 이름과 값을</div><div class="line">              출력한다.  주어진 이름에 대한 앨리어스가 정의되어 있지 않은 경우가 아니라면 참값을 반환한다.</div><div class="line"></div><div class="line">       <span class="built_in">bg</span> [작업명세]</div><div class="line">              &amp; 를 붙여 실행한 것처럼 작업명세가 가리키는 작업을 백그라운드로 보낸다.  작업명세가 없으면 현재 작업에 해당하는 작업이 사용된다.  <span class="built_in">bg</span> 작업명세 는 작업 제어가 불가능한 상태에서 실행하거나, 작업 제어는 가능하지만 작업명세를 찾을 수 없거나 작업 제어 없이 시작한 경우를 제외하고 0 을 반환한다.</div><div class="line"></div><div class="line">       <span class="built_in">bind</span> [-m 키맵] [-lvd] [-q 이름]</div><div class="line">       <span class="built_in">bind</span> [-m 키맵] -f 파일명</div><div class="line">       <span class="built_in">bind</span> [-m 키맵] 키시퀀스:함수이름</div><div class="line">              readline 의 현재 키, 함수 바인딩을 표시하거나 readline 함수나 매크로에 키 시퀀스를 결합한다.  바인딩 문법은 .inputrc 의 문법과 같지만 각 바인딩을 개별적인 인수로 전달해야 한다; 예를 들어, <span class="string">'"\C-x\C-r": re-read-init-file'</span>.  옵션을 적는 경우에는 다음과 같은 의미를 가진다:</div><div class="line">              -m 키맵</div><div class="line">                     뒤이어 나오는 바인딩에 의해 영향을 받는 키맵으로 키맵 을 사용한다.  가능하 키맵 이름으로는 emacs, emacs-standard, emacs-meta, emacs-ctlx, vi, vi-move, vi-command, 그리고 vi-insert 이 있다.  vi는 vi-command와 같다; emacs는 emacs-standard와 같다.</div><div class="line">              -l     모든 readline 함수의 이름을 나열한다.</div><div class="line">              -v     현재 함수 이름과 바인딩을 나열한다.</div><div class="line">              -d     다시 읽을 수 있는 형태로 함수 이름과 바인딩을 덤프한다.</div><div class="line">              -f 파일명</div><div class="line">                     filename으로부터 키 바인딩을 읽는다.</div><div class="line">              -q 함수</div><div class="line">                     함수를 실행시키는 키에 대하여 알아본다.</div><div class="line"></div><div class="line">              알 수 없는 옵션이 주어졌거나 에러가 발생한 경우가 아닐 때에는 0 이 반환된다.</div><div class="line"></div><div class="line">       <span class="built_in">break</span> [n]</div><div class="line">              <span class="keyword">for</span>, <span class="keyword">while</span>, until 루프 안에서 탈출한다.  n을 명시하면 n 레벨을 탈출한다.  n 은 ≥ 1 여야 한다.  n 이 둘러 싸고 있는 루프의 갯수보다 크면 모든 루프를 탈출한다.  <span class="built_in">break</span> 이 실행될 때 루프를 실행 중이 아닌 경우를 제외하고 0 을 반환한다.</div><div class="line"></div><div class="line">       <span class="built_in">builtin</span> 쉘-내부명령 [인수들]</div><div class="line">              명시한 쉘 내부 명령에 인수들 을 주어 실행하고 종료 상태값을 반환한다.  쉘 내부 명령과 같은 이름의 함수를 정의하고 그 함수 안에서 내부 명령의 기능을 활용하고자 할 때 유용하다.  보통 <span class="built_in">cd</span> 내부 명령을 이런 식으로 재정의하곤 한다.  쉘-내부명령 이 쉘 내부 명령이 아닐 때 거짓을 반환한다.</div><div class="line"></div><div class="line">       <span class="built_in">cd</span> [디렉토리]</div><div class="line">              현재 디렉토리를 디렉토리로 변경한다.  HOME 변수 값이 기본 디렉토리 값이다.  CDPATH 변수는 디렉토리 를 포함하는 디렉토리에 대한 검색 경로를 정의한다.  서로 다른 디렉토리는 콜론(:)으로 구분한다.  CDPATH 에 널 디렉토리 이름을 넣으면 현재 디렉토리 즉 ``.<span class="string">''</span>와 같다.  디렉토리 가 슬래쉬(/)로 시작하면 CDPATH 는 사용되지 않는다.  전달인수로  -  를</div><div class="line">              사용하면 <span class="variable">$OLDPWD</span> 와 같다.  성공적으로 디렉토리를 변경하면 참, 그렇지 않으면 거짓을 반환한다.</div><div class="line"></div><div class="line">       <span class="built_in">command</span> [-pVv] 명령 [인수 ...]</div><div class="line">              보통의  쉘 함수 찾아보기를 하지 않고 명령 을 인수 와 함께 실행한다.  내부 명령 또는 PATH 에서 찾을 수 있는 명령만을 실행한다.  are executed.  If the -p 옵션을 주면 PATH 의 기본값을 사용하여 명령 에 대한 검색을 하므로 표준 유틸리티를 찾을 수 있도록 보장해 준다.  -V 또는 -v 옵션을 주면 명령 에 대한 설명을 출력한다.  -v 옵션은 명령 을 호출할</div><div class="line">              때 사용할 명령 또는 경로명을 가리키는 간단한 단어를 출력한다; -V 옵션은 좀 더 자세한 설명을 출력한다.  -- 를 전달 인수로 적으면 나머지 인수에 대한 옵션 점검을 하지 않는다.  -V 또는 -v 옵션을 주었을 때 종료 상태값은 명령 이 발견되면 0, 그렇지 않으면 1 이 된다. 두 옵션 모두 없고 에러가 발생하거나 명령 을 찾을 수 없으면 종료 상태값은 127  이</div><div class="line">              된다.  그렇지 않을 때 <span class="built_in">command</span> 내부 명령의 종료 상태값은 명령 의 종료 상태값이다.</div><div class="line"></div><div class="line">       <span class="built_in">continue</span> [n]</div><div class="line">              둘러 싸고 있는 <span class="keyword">for</span>, <span class="keyword">while</span>, until 루프의 다음 순차 작업을 재개한다.  n 을 명시하면, n 번째 루프를 재개한다.  n 은 ≥ 1 여야 한다.  n 이 둘러 싸고 있는 루프 갯수보다 크면 가장 바깥쪽의 루프(`최상위 레벨<span class="string">' 루프)를 재개한다.  continue 명령을 실행할 때 쉘이 루프를 실행하고 있지 않은 경우가 아니라면 반환값은 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       declare [-frxi] [이름[=값]]</span></div><div class="line"><span class="string">       typeset [-frxi] [이름[=값]]</span></div><div class="line"><span class="string">              변수를 선언하거나 변수에 속성을 부여한다.  아무런 이름도 주어지지 않았을 때에는 변수의 값을 표시한다.  옵션을 사용하여 특정 속성의 변수에 대해서만 출력하도록 제한할 수 있다.</span></div><div class="line"><span class="string">              -f     함수 이름만 사용</span></div><div class="line"><span class="string">              -r     이름을 읽기 전용으로 만든다.  그 뒤에는 지정문을 사용하여 값을 지정할 수 없다.</span></div><div class="line"><span class="string">              -x     이름을 그 뒤에 나오는 명령에게 환경을 통해 export하도록 한다.</span></div><div class="line"><span class="string">              -i     변수를 정수처럼 취급한다;  변수에 값을 지정하면 산술 평가( 산술 평가 참고 )를 수행한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              이  옵션을 끄려면 `-'</span> 대신 `+<span class="string">'를 사용한다.  함수 안에서 사용하면 local 명령처럼 이름을 지역적으로 만든다.  잘못된 옵션을 만났다든지, "-f foo=bar"를 사용하여 함수를 정의하려고 시도했다든지, 이름이 적접한 쉘 변수 이름이 아니라든지, 읽기 전용 변수의 읽기 전용 상태를 해제하려 한다든지, 또는 -f 를 가지고 존재하지 않은 함수를 표시하려 한 경우가</span></div><div class="line"><span class="string">              아니라면 반환값은 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       dirs [-l] [+/-n]</span></div><div class="line"><span class="string">              현재까지 기억하고 있는 디렉토리 목록을 표시한다.  디렉토리를 목록에 추가할 때에는 pushd 명령을 사용한다; popd 명령은 목록으로부터 최근 디렉토리를 꺼내고 그 디렉토리로 이동하도록 한다.</span></div><div class="line"><span class="string">              +n     옵션은 아무 옵션 없이 dirs 를 실행했을 때 보이는 목록의 왼쪽부터 세어 n번째 항목을 보여준다.  0 부터 시작한다.</span></div><div class="line"><span class="string">              -n     옵션은 아무 옵션 없이 dirs 를 실행했을 때 보이는 목록의 오른쪽부터 세어 n번째 항목을 보여준다.  0 부터 시작한다.</span></div><div class="line"><span class="string">              -l     긴 목록을 만들어 보여준다; 기본 목록 나열 형식에서는 홈 디렉토리를 나타낼 때 틸드를 사용한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              틀린 옵션을 주거나 n 이 디렉토리 스택 범위를 넘어서는 경우가 아니라면 반환값은 0 이 된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       echo [-neE] [인수 ...]</span></div><div class="line"><span class="string">              스페이스로 구분되어 있는 인수들을 출력한다.  반환값은 항상 0 이다.  -n을 명시하면 마지막의 개행문자를 출력하지 않는다.  -e 옵션을 주면 백슬래쉬 이스케이프 문자를 해석할 수 있도록 해준다.  -E 옵션은 시스템에서 기본적으로 이스케이프 문자를 해석하는 상황이라 할 지라도 이스케이프 문자를 해석하지 않도록 지시한다.</span></div><div class="line"><span class="string">              \a     경고 (벨)</span></div><div class="line"><span class="string">              \b     백스페이스</span></div><div class="line"><span class="string">              \c     마지막 개행문자를 생략함</span></div><div class="line"><span class="string">              \f     폼 피드</span></div><div class="line"><span class="string">              \n     개행문자</span></div><div class="line"><span class="string">              \r     캐리지 리턴</span></div><div class="line"><span class="string">              \t     수평 탭</span></div><div class="line"><span class="string">              \v     수직 탭</span></div><div class="line"><span class="string">              \\     백슬래쉬</span></div><div class="line"><span class="string">              \nnn   ASCII 코드가 nnn (8진수)인 문자</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       enable [-n] [-all] [이름 ...]</span></div><div class="line"><span class="string">              쉘 내부 명령을 켜거나 큰다.  이 기능을 사용하면 쉘 내부 명령과 같은 이름을 갖는 디스크 명령에 대하여 완전한 경로명을 적지 않고도 실행할 수 있다.  -n을 사용하면 각 이름의 사용을 끈다;  그렇지 않으면 이름의 사용을 켠다.  예를 들어, 쉘 내부 명령 버전 대신 PATH 에서 찾을 수 있는 test 바이너리를 사용하려면 ``enable  -n  test'</span><span class="string">'  라고  실행한다.</span></div><div class="line"><span class="string">              인수가 없으면 사용 가능한 모든 쉘 내부 명령 목록을 출력한다.  -n만 주면 사용 불능 상태의 내부 명령 목록을 출력한다.  -all만 주면 모두 내부 명령에 대하여 가능, 불가능 여부를 표시하여 출력해준다.  enable 명령은 -all 대신 -a 도 받아들인다.  이름 이 쉘 내부 명령이 아닌 경우를 제외하고 반환값은 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       eval [인수 ...]</span></div><div class="line"><span class="string">              모든 인수를 읽어 하나의 명령으로 결합한다.  그 다음 이 명령을 읽어 쉘에서 실행하고 종료 상태값을 eval 명령의 반환값으로 돌려준다.  인수 가 하나도 없거나 널 인수이면 eval 은 참을 반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       exec [[-] 명령 [인수]]</span></div><div class="line"><span class="string">              명령  을  명시하면  그  명령으로  쉘  프로세스를 교체한다.  새로운 프로세스는 만들어지지 않는다.  인수 는 명령의 인수가 된다.  첫번째 인수가 - 이면 쉘은 명령 에 전달하는 0 번째 인수에 대쉬를 넣는다.  이 과정은 로그인이 하는 일과 같다.  어떤 이유에서든 파일을 실행할 수 없으면 쉘 변수 no_exit_on_failed_exec가 존재하여 거짓을 반환하는 경우를</span></div><div class="line"><span class="string">              제외하고 비대화형 쉘은 종료한다.  파일을 실행할 수 없을 때 대화형 쉘은 거짓을 반환한다.  명령 을 명시하지 않으면 현재 쉘에서 리다이렉션만 효력을 발휘하고 반환값은 0 이 된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       exit [n]</span></div><div class="line"><span class="string">              상태값 n을 가지고 쉘을 종료한다.  n 을 생략하면 실행한 마지막 명령의 종료 상태값을 갖는다.  쉘을 종료하기 전에 EXIT 에 대한 트랩(trap) 루틴이 실행된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       export [-nf] [이름[=단어]] ...</span></div><div class="line"><span class="string">       export -p</span></div><div class="line"><span class="string">              나열한 이름 을 그 다음에 나오는 명령들의 환경에 자동적으로 export되도록 기억해 둔다.  -f 옵션을 주면 이름 은 함수를 가리킨다.  아무런 이름 도 적지 않거나 또는 -p 옵션을 주면 쉘에서 export되는 모든 이름 목록을 출력한다.  -n 옵션은 주어진 이름의 변수로부터 export 속성을 제거하도록 한다.  -- 인수를 주면 그 나머지 인수에 대한 옵션 점검을 하지</span></div><div class="line"><span class="string">              않도록 한다.  잘못된 옵션을 만나거나 이름이 적법한 쉘 변수 이름이 아니거나 또는 함수가 아닌 이름 에 대하여 -f 옵션을 준 경우가 아니라면 export 는 종료 상태값 0 을 반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       fc [-e 편집기이름] [-nlr] [처음] [마지막]</span></div><div class="line"><span class="string">       fc -s [패턴=치환텍스트] [명령]</span></div><div class="line"><span class="string">              명령을  수정한다.   첫번째  형식에서, 명령의 범위는 처음 부터 마지막 범위에 있는 명령을 히스토리 목록에서 선택한다.  처음 과 마지막 은 문자열(그 문자열로 시작하는 최근 명령을 찾고자 할 때) 또는 숫자 (히스토리 목록의 인덱스로 사용하며 음수일 때에는 현재 명령 번호로부터 떨어진 만큼을 뜻한다)로 명시할 수 있다.  마지막 을 명시하지 않으면 현재</span></div><div class="line"><span class="string">              명령으로 설정되고(따라서 fc -l -10 은 최근 10 개의 명령을 출력하게 된다) 그렇지 않으면 처음 까지 출력한다.  If 처음 을 명시하지 않으면 편집을 위해 이전 명령으로 설정하고 표시를 위해 -16 을 설정한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              -n 플래그를 적으면 나열할 때 명령 번호가 나타나지 않게 한다.  -r 플래그는 명령의 표시 순서를 반대로 한다.  -l 플래그가 있으면 명령을 표준 출력에 나열한다.  그렇지 않을 때에는 편집기이름 이 가리키는 편집기에서 이 명령들을 포함하는 파일을 열면서 시작한다.  편집기이름 이 없으면 FCEDIT 변수의 값을 사용하며 FCEDIT 가 설정되어 있지 않을  때에는</span></div><div class="line"><span class="string">              EDITOR 값을 사용한다.  둘 다 설정되어 있지 않으면 vi 를 사용한다.  편집을 마친 후에는 편집한 명령들이 화면에 표시되고 실행된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              두번째 형태에서, 명령은 패턴이 치환텍스트로 교체된 후에 다시 실행된다.  유용한 앨리어스로는 ``r=fc -s'</span><span class="string">'가 있다.  앨리어스 적용 후 ``r cc'</span><span class="string">' 라고 치면 ``cc'</span><span class="string">'로 시작하는 최근 명령을 실행하고 ``r'</span><span class="string">'이라고 치면 마지막 명령을 다시 실행하게 된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              첫번째  형태를  사용하면  잘못된  옵션이  있거나  처음 또는 마지막 이 히스토리 행 범위를 벗어나지만 않으면 반환값 0 을 갖는다.  -e 옵션을 주면 마지막 실행 명령의 값이 반환값이 되거나 명령의 임시 파일에서 오류가 발생하는 경우 실패 값을 가진다.  두번째 형태를 사용하면 명령 이 유효한 히스토리 행을 가리키지 못하여 fc 가 실패를 반환하는 경우가</span></div><div class="line"><span class="string">              아니라면 재실행한 명령의 반환값을 반환값으로 사용한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       fg [작업스펙]</span></div><div class="line"><span class="string">              작업스펙 이 가리키는 바를 포그라운드에 놓고 현재 작업이 되도록 한다.  작업스펙 이 존재하지 않으면 쉘에서 현재 작업이라고 부르는 것을 사용한다.  반환값은 포그라운드에 놓인 명령의 반환값이거나 작업 제어 불가능 상태에서 실행된 경우에는 실패이다.  그리고 작업 제어 가능한 상태에서도 작업스펙 이 유효한 작업을 가리키지 않거나  작업스펙  이  작업</span></div><div class="line"><span class="string">              제어 없이 실행된 작업을 가리킬 때에도 실패이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       getopts 옵션문자열 이름 [인수]</span></div><div class="line"><span class="string">              getopts  는  위치  매개변수를  파싱하기 위해 사용하는 쉘 프로시져이다.  옵션문자열 은 인식하고자 하는 옵션 문자를 포함한다; 문자 뒤에 콜론이 오면 옵션 다음에 화이트스페이스로 분리된 인수가 온다는 뜻이다.  매번 실행될 때마다, getopts 는 다음 옵션을 쉘 변수 이름 에 넣는다.  이름 이 존재하지 않을 때에는 초기화한다.  그리고 처리할 다음 인수의</span></div><div class="line"><span class="string">              인덱스는 OPTIND 변수에 넣는다.  OPTIND 는 쉘 또는 쉘 스크립트가 실행될 때마다 1 로 초기화된다.  옵션에서 인수를 필요로 할 때에는 getopts 에서 그 인수를 OPTARG 변수에 넣는다.  쉘이 자동으로 OPTIND 변수를 재설정하지는 않는다;같은 쉘 실행 상태에서 새로운 매개변수 집합을 사용하려면 getopts 를 부를 때마다 수동으로 재설정해 주어야 한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              getopts 는 두 가지 방식으로 오류를 보고할 수 있다.  옵션문자열 의 첫번째 문자가 콜론이면 조용한 오류 보고가 사용된다.  정상 동작 상태에서는 잘못된 옵션 또는 누락된 인수의 경우 증상을 설명하는 메시지가 출력된다.  OPTERR 변수를 0 으로 설정하면 옵션문자열 의 첫번째 문자가 콜론이 아니라 하더라도 오류 메시지를 출력하지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              잘못된 옵션을 만나면, getopts 는 이름 에 ? 를 넣고 조용하게 보고하는 상태가 아닌 경우, 오류 메시지를 출력하고 OPTARG 를 unset 한다.  getopts 이 조용한 모드에 있는 경우 찾아낸 옵션 문자를 OPTARG 에 넣고 증상 설명 메시지를 출력하지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              필요한 인수를 찾을 수 없으며 getopts 가 조용한 모드에 있지 않을 때에는 물음표를 (?) 이름 에 넣고 OPTARG 를 unset 하며 증상 설명 메시지를 출력한다.  getopts 가 조용한 모드에 있으면 콜론을 (:) 이름 에 넣고 OPTARG 을 찾아낸 옵션 문자로 설정한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              getopts 는 보통 위치 매개변수를 파싱하지만 인수 부분에 더 많은 인수를 주면 getopts 는 대신 그 인수를 파싱한다.  getopts 는 명시한 것이든 명시하지 않은 것이든 옵션을 찾으면 참을 반환한다.  옵션의 끝이거나 에러가 발생하면 거짓을 반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       hash [-r] [이름]</span></div><div class="line"><span class="string">              각 이름 에 대하여, 그 이름이 가리키는 명령의 완전한 경로명을 결정하여 기억해 둔다.  -r 옵션을 주면 기억해 둔 위치를 모두 잊도록 지시한다.  아무런 인수도 적지 않으면 기억해 둔 명령에 대한 정보를 출력한다.  -- 라는 인수를 주면 그 뒤에 있는 인수에 점검을 하지 않도록 지시한다.  이름 이 없거나 잘못된 옵션이 주어진  경우가  아닌  경우에는  참을</span></div><div class="line"><span class="string">              반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       help [패턴]</span></div><div class="line"><span class="string">              내부명령에 대한 도움말을 출력한다.  패턴 을 적으면, help 는 패턴과 일치하는 모든 명령에 대하여 자세한 도움말을 준다; 패턴을 적지 않으면 모든 내부명령 목록을 출력한다.  패턴과 일치하는 명령이 없는 경우를 제외하고 반환값은 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       history [n]</span></div><div class="line"><span class="string">       history -rwan [filename]</span></div><div class="line"><span class="string">              옵션이 없으면, 행 번호와 함께 명령 히스토리 목록을 표시한다.  * 표시가 있는 행은 수정한 적이 있다는 뜻이다.  n 인수를 주면 최근 n 행만을 표시한다.  옵션이 아닌 인수를 적으면, 히스토리 파일 이름으로 간주한다;없으면 HISTFILE 변수의 값을 사용한다.  옵션이 있는 경우 다음과 같은 뜻을 갖는다:</span></div><div class="line"><span class="string">              -a     히스토리 파일에 ``새로운'</span><span class="string">' 히스토리 행(현재 bash 세션의 시작부터 입력한 히스토리 행)을 추가한다.</span></div><div class="line"><span class="string">              -n     히스토리 파일로부터 현재 히스토리 목록으로 아직 읽어들이지 않는 히스토리 행을 읽어들인다.  현재 bash 세션 시작부터 히스토리 파일에 추가한 행을 말한다.</span></div><div class="line"><span class="string">              -r     히스토리 파일의 내용을 읽어 현재 히스토리로 사용한다.</span></div><div class="line"><span class="string">              -w     현재 히스토리를 히스토리 파일의 기존 내용에 덮어 쓴다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              옵션을 잘못 적거나 히스토리 파일을 읽거나 쓰는 도중 오류가 발생한 경우를 제외하고 반환값은 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       jobs [-lnp] [ 작업스펙 ... ]</span></div><div class="line"><span class="string">       jobs -x 명령 [ 인수 ... ]</span></div><div class="line"><span class="string">              첫번째 형태는 활동 중인 작업을 나열한다.  -l 옵션을 더하면 일반적인 정보에 프로세스 ID까지 더하여 나열하도록 한다; -p 옵션은 작업의 프로세스 그룹 리더의 프로세스 ID만 나열하도록 한다.  -n 옵션은 지난 번 통보 이후 상태 변화를 일으킨 작업만 표시하도록 한다.  작업스펙 을 적으면, 작업스펙에 맞는 작업에 대한 정보만으로 출력을 제한한다.  잘못된</span></div><div class="line"><span class="string">              옵션을 적거나 잘못된 작업스펙 을 적은 경우가 아니라면 반환값은 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              -x 옵션을 붙이면, jobs 명령은 명령 또는 인수 안 에서 작업스펙 을 발견할 때마다 해당 프로세스 그룹 ID로 치환하고 명령 에 인수 를 주어 실행하고 그 종료 상태값을 반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       kill [-s 시그널스펙 | -시그널스펙] [pid | 작업스펙] ...</span></div><div class="line"><span class="string">       kill -l [시그널번호]</span></div><div class="line"><span class="string">              pid 또는 작업스펙이 가리키는 프로세스에게 시그널스펙 이 가리키는 시그널을 보낸다.  시그널스펙 은 SIGKILL 과 같은 시그널 이름 또는 시그널 번호이다.  시그널스펙 이 시그널 이름인 경우, 대소문자는 구별하지 않으며 SIG 라는 접두어를 써도 되고 쓰지 않아도 된다.  시그널스펙 이 없으면, SIGTERM 이라고  가정한다.   -l  인수를  적으면  시그널  이름을</span></div><div class="line"><span class="string">              나열해 준다.  -l 이 있을 때에는 어떤 인수가 있으면, 특정 시그널의 이름을 나열하고 반환값은 0 이다.  -- 인수를 주면 그 후 나머지 인수에 대한 옵션 점검을 하지 않도록 강제한다.  kill 최소한 한 개의 시그널을 성공적으로 전송했으면 참을 반환한다.  오류가 발생하거나 잘못된 옵션을 만나면 거짓을 반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       let 인수 [인수 ...]</span></div><div class="line"><span class="string">              각각의 인수 는 계산한 수치 표현식이다.( 산술 평가 참고 ).  마지막 인수 를 평가하여 그 결과가 0 이면, let 은 1 을 반환한다;  나머지 경우에는 0 을 반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       local [이름[=값] ...]</span></div><div class="line"><span class="string">              각 인수에 대하여 이름 이라는 지역 변수를 만들고 값 을 할당한다.  local 을 함수 안에서 사용하면, 이름 변수의 가시 범위(scope)를 그 함수와 자식 함수로 제한한다.  피연산자가 없으면, local 은 지역변수 목록을 표준 출력으로 출력한다.  local 를 함수 안에서 사용하지 않는 것은 오류이다.  local 을 함수 외부에서 사용했거나 잘못된 이름 을 적은 경우가</span></div><div class="line"><span class="string">              아니라면 반환 상태값은 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       logout 로그인 쉘을 마친다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       popd [+/-n]</span></div><div class="line"><span class="string">              디렉토리 스택에서 항목을 제거한다.  인수가 없으면 스택의 최상위 디렉토리를 제거하고 그 새로운 상위 디렉토리로 cd 한다.</span></div><div class="line"><span class="string">              +n     dirs 명령 결과 보이는 목록의 왼쪽부터 세기 시작하여 n번째 항목을 제거한다.  0 부터 센다.  예를 들어, ``popd +0'</span><span class="string">'는 첫번째 디렉토리를, ``popd +1'</span><span class="string">'는 두번째 디렉토리를 제거한다.</span></div><div class="line"><span class="string">              -n     dirs 명령 결과 보이는 목록의 오른쪽부터 세기 시작하여 n번째 항목을 제거한다.  0 부터 센다.  예를 들어, ``popd -0'</span><span class="string">'는 맨 마지막 디렉토리를, ``popd -1'</span><span class="string">'는 맨 마지막 바로 전 디렉토리를 제거한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              popd 명령이 성공적이면, dirs 명령도 실행하며 반환 상태값은 0 이다.  popd 는 잘못된 옵션을 적거나, 디렉토리 스택이 비어 있거나, 존재하지 않는 디렉토리 스택 항목을 명시하거나 디렉토리 이동이 실패할 경우 거짓을 반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       pushd [디렉토리]</span></div><div class="line"><span class="string">       pushd +/-n</span></div><div class="line"><span class="string">              디렉토리를 디렉토리 스택의 맨 위에 추가하거나, 스택을 회전시켜 스택의 최 상위 항목을 현재 작업 디렉토리로 만든다.  인수가 없으면, 최상위 두 디렉토리를 교환한다.  디렉토리 스택이 비어 있지 않으면 0을 반환한다.</span></div><div class="line"><span class="string">              +n     n번째 디렉토리( dirs 명령이 보여주는 목록의 맨 왼쪽부터 센다) 이 맨 위에 놓이도록 스택을 회전시킨다.  )</span></div><div class="line"><span class="string">              -n     n번째 디렉토리(오른쪽부터 센다)가 맨 위에 놓이도록 스택을 회전시킨다.</span></div><div class="line"><span class="string">              디렉토리</span></div><div class="line"><span class="string">                     디렉토리 를 디렉토리 스택 맨 위에 추가하여 새로운 작업 디렉토리가 되도록 한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              pushd 명령이 성공적이면, dirs 명령도 수행한다.  첫번째 형식을 사용하면, pushd 는 디렉토리 로 cd 하는 것을 실패하지 않는 한, 0 을 반환한다.  두번째 형식을 사용하면, pushd 는 디렉토리 스택이 비어 있거나, 존재하지 않는 디렉토리 스택 항목을 선택하거나, 지정한 새 현재 디렉토리로 이동하는데 실패한 경우가 아니면 0을 반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       pwd    현재 디레토리의 절대 경로명을 출력한다.  set 내부명령의 -P 옵션이 설정되어 있으면 경로명에 심볼릭 링크를 포함하지 않는다.  ( 쉘 변수 섹션에서 nolinks 에 대한 설명을 참고하라.)  above).  현재 디렉토리의 경로명을 읽는 도중 오류가 발생하지 않았다면 결과 반환값은 0이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       read [-r] [이름 ...]</span></div><div class="line"><span class="string">              표준 입력으로부터 한 줄을 읽어들여 그 첫번째 단어를 첫번째 이름 에 할당하고 두번째 단어를 두번째 이름 에 할당하고 나머지 남은 단어들을 마지막 이름 에 할당한다.  IFS 에 있는 단어만을 단어 구분자로 인식한다.  아무런 이름 도 적지 않으면 읽어들인 행을 REPLY 변수에 할당한다.  파일 끝 문자를 만난 경우를 제외하고 반환값은 0 이다.  -r 옵션을 주면</span></div><div class="line"><span class="string">              백슬래쉬-개행 문자 쌍을 무시하지 않고 백슬래쉬를 행의 일부로 인식한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       readonly [-f] [이름 ...]</span></div><div class="line"><span class="string">       readonly -p</span></div><div class="line"><span class="string">              주어진  이름들을 읽기 전용으로 표기하고 다음에 나올 대입문에 의해 이름들의 값이 바뀌지 않도록 해 준다.  -f 옵션을 더하면, 이름에 해당하는 함수를 읽기 전용으로 표기한다.  아무런 인수도 없거나 -p 옵션을 주어져 있는 경우에는, 모든 읽기 전용 변수 목록을 출력한다.  -- 인수는 나머지 인수에 대한 점검을 하지 않도록 지시한다.  잘못된 옵션이 있거나</span></div><div class="line"><span class="string">              이름들 중 하나라도 적접한 쉘 변수 이름이 아닌 경우 또는 -f 다음에 나온 이름 이 함수가 아닌 경우를 제외하고는 반환 상태값이 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       return [n]</span></div><div class="line"><span class="string">              함수를 상태 반환값 n 을 갖고 종료하도록 한다.  n 을 생략하면 함수 몸체 안에서 실행한 마지막 명령의 반환 상태값을 사용한다.  함수 밖에서 사용했지만 .  (source) 명령으로 실행한 스크립트에서 사용하면, 쉘은 그 스크립트 실행을 멈추고 n 또는 스크립트에서 실행한 마지막 명령의 종료  상태값을  스크립트의  종료  상태값으로  반환한다.   함수  밖에서</span></div><div class="line"><span class="string">              사용했으며 .\[uB85C] 실행한 스크립트가 아니라면 반환 상태값은 거짓이 된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       set [--abefhkmnptuvxldCHP] [-o 옵션] [인수 ...]</span></div><div class="line"><span class="string">              -a      뒤이어 나올 명령의 환경으로 export하기 위해 수정 또는 생성할 변수를 자동으로 표기한다.</span></div><div class="line"><span class="string">              -b      종료한 백그라운드 작업의 상태를 다음 번 주 프롬프트 전에 보여 주는 것이 아니라 즉시 보여 주도록 한다.  ( 쉘 변수 섹션에서 notify 참고)</span></div><div class="line"><span class="string">              -e      간단한-명령 ( 쉘 문법 참고)이 0 아닌 상태값을 갖고 종료하면 즉시 종료한다.  만약 실패한 명령이 until 또는 while 루프의 일부, if 문의 일부, &amp;&amp; 의 일부, or ⎪⎪ 목록의 일부이거나 또는 명령의 반환값이 !  으로 반전되면 종료하지 않는다.</span></div><div class="line"><span class="string">              -f      경로명 확장을 하지 않는다.</span></div><div class="line"><span class="string">              -h      함수를 정의할 때 함수 명령을 찾아 기억해 둔다.  함수를 실행할 때 함수 명령을 정상적으로 찾아 본다.</span></div><div class="line"><span class="string">              -k      명령 이름 앞에 적은 것 뿐 아니라, 모든 키워드 인수를 명령의 환경에 둔다.</span></div><div class="line"><span class="string">              -m      모니터(감시) 모드.  작업 제어를 사용한다.  지원하는 시스템에서 실행하는 대화형 쉘에 대해서는 이 플래그가 자동으로 켜진다.  ( 작업 제어 참고).  백그라운드 작업은 별도의 프로세스 그룹 안에서 실행되며 실행을 완료하면 종료 상태값을 포함하는 행을 출력한다.</span></div><div class="line"><span class="string">              -n      명령을 읽지만 실행하지는 않는다.  쉘 스크립트 문법 오류를 점검할 때 사용할 수 있다.  대화형 쉘에서는 무시한다.</span></div><div class="line"><span class="string">              -o 옵션-이름</span></div><div class="line"><span class="string">                      옵션-이름은 다음 중 한 가지이다:</span></div><div class="line"><span class="string">                      allexport</span></div><div class="line"><span class="string">                              -a 와 같다.</span></div><div class="line"><span class="string">                      braceexpand</span></div><div class="line"><span class="string">                              쉘이 중괄호 확장을 행한다.  ( 앞서 나온 중괄호 확장 참고) 선택하지 않아도 기본값이다.</span></div><div class="line"><span class="string">                      emacs   이맥스 스타일의 명령행 편집 인터페이스를 사용한다.  쉘을 시작할 때 -nolineediting 옵션을 붙이지 않은 한, 쉘이 대화형 모드일 때의 기본값이다.</span></div><div class="line"><span class="string">                      errexit -e와 같다.</span></div><div class="line"><span class="string">                      histexpand</span></div><div class="line"><span class="string">                              -H와 같다.</span></div><div class="line"><span class="string">                      ignoreeof</span></div><div class="line"><span class="string">                              마치 쉘 명령 `IGNOREEOF=10'</span>을 실행한 것과 같은 효과를 발휘한다.  (앞서 나온 쉘 변수 참고).</div><div class="line">                      interactive-comments</div><div class="line">                              어떤 단어를 <span class="comment"># 로 시작하면 그 단어와 그 뒤의 모든 문자를 대화형 쉘에서 무시하도록 한다.  (앞서 나온 주석 참고).</span></div><div class="line">                      monitor -m와 같다.</div><div class="line">                      noclobber</div><div class="line">                              -C와 같다.</div><div class="line">                      noexec  -n와 같다.</div><div class="line">                      <span class="built_in">noglob</span>  -f와 같다.</div><div class="line">                      nohash  -d와 같다.</div><div class="line">                      notify  -b와 같다.</div><div class="line">                      nounset -u와 같다.</div><div class="line">                      physical</div><div class="line">                              -P와 같다.</div><div class="line">                      posix   POSIX 1003.2 표준과 기본적으로 다른 bash의 행동방식을 POSIX 표준을 따르도록 만든다.</div><div class="line">                      privileged</div><div class="line">                              -p와 같다.</div><div class="line">                      verbose -v와 같다.</div><div class="line">                      vi      vi 스타일의 명령행 편집 인터페이스를 사용한다.</div><div class="line">                      xtrace  -x와 같다.</div><div class="line">                      옵션-이름을 적지 않으면 현재 옵션값을 출력한다.</div><div class="line">              -p      privileged 모드를 켠다.  이 모드에서는 <span class="variable">$ENV</span> 파일을 처리하지 않으며, 쉘 함수를 환경으로부터 상속하지 않는다.  유효 사용자 (그룹) ID와 실제 사용자 (그룹) ID가 일치하지 않으면 시동할 때 자동으로 작동한다.  이 옵션을 끄면 유효 사용자, 그룹 ID를 실제 사용자, 그룹 ID로 설정한다.</div><div class="line">              -t      명령 하나를 읽어 실행한 후 종료한다.</div><div class="line">              -u      매개변수 확장 시 설정되어 있지 않은 변수를 오류로 간주한다.  미설정 변수에 대한 확장을 시도하면, 쉘은 에러 메시지를 출력하고 대화형 모드가 아니면 0 아닌 상태를 갖고 종료한다.</div><div class="line">              -v      쉘에서 행 입력을 받을 때마다 그 입력행을 출력한다.</div><div class="line">              -x      각각의 간단한-명령 을 확장한 후, bash PS4, 의 확장값을 표시하고 명령과 확장된 인수를 표시한다.</div><div class="line">              -l      <span class="keyword">for</span> 이름 [<span class="keyword">in</span> 단어] 명령의 이름 바인딩을 저장하고 복원한다.  (앞서 나온 쉘 문법 참고).</div><div class="line">              -d      실행하기 위해 참조하는 명령 해쉬를 사용하지 않는다.  보통 명령을 해쉬 테이블에 기억해 두고 일단 발견하면 다시는 참조할 필요 없다.</div><div class="line">              -C      쉘 명령 `noclobber=<span class="string">'을 실행한 것과 같은 효력을 발휘한다.  (앞서 나온 쉘 변수 참고).</span></div><div class="line"><span class="string">              -H      !  스타일의 히스토리 치환을 사용한다.  쉘이 대화형 모드이면 기본으로 켜지는 플래그이다.</span></div><div class="line"><span class="string">              -P      설정하면, 현재 디렉토리를 변경하는 cd 와 같은 명령 실행 중 심볼릭 링크를 따르지 않는다.  대신 물리적인 디렉토리를 사용한다.</span></div><div class="line"><span class="string">              --      이 플래그 뒤에 아무런 인수도 나오지 않으면 위치 매개변수를 unset한다.  만약 나오면, - 로 시작하는 것이 있다 할 지라도 위치 매개변수를 인수로 설정한다.</span></div><div class="line"><span class="string">              -       옵션의 끝을 나타내며, 그 뒤에 나오는 모든 인수들을 위치 매개변수로 설정한다.  -x 와 -v 옵션이 꺼진다.  만약 아무런 인수도 없다면, 위치 매개변수는 그대로이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              다른  식으로  언급하지  않는 한, 이 플래그는 기본적으로 꺼져 있다.  - 대신 + 를 사용하면 플래그를 끈다.  쉘을 실행할 때 옵션으로 적을 수 있다.  현재 플래그 상태는 $- 를 보면 알 수 있다.  옵션 인수를 처리한 후, 나머지 n 개의 인수는 위 매개변수의 값으로 간주하고 차례대로 $1, $2, ...  $n 에 할당한다.  아무런 옵션도 없고 인수도 없으면 모든 쉘</span></div><div class="line"><span class="string">              변수를 출력한다.  잘못된 옵션이 없는 한, 반환 상태값은 항상 참이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       shift [n]</span></div><div class="line"><span class="string">              n+1 부터의 위치 매개변수 이름을 $1 ....  로 변경한다.  $#부터 $#-n+1까지의 매개변수는 unset된다.  n 이 0 이면, 매개변수의 변화는 없다.  n 이 주어지지 않으면 1 로 간주한다.  n 은 $#보다 작거나 같은 음수 아닌 숫자여야 한다.  n 이 $#보다 크면, 위치 매개변수의 변화는 없다.  n 이 $# 보다 크거나 0 보다 작으면 반환 상태값은 0 보다  크다;  그렇지</span></div><div class="line"><span class="string">              않으면 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       suspend [-f]</span></div><div class="line"><span class="string">              SIGCONT 시그널을 받을 때까지 쉘의 실행을 정지시킨다.  -f 옵션은 로그인 쉘이라 할 지라도  불평 메시지를 출력하지 않도록 한다; 어찌 되었든 일시 정지한다.  쉘이 로그인 쉘이면서도 -f 이 없거나 또는 작업 제어 기능이 작동 중인 상태가 아니면 반환 상태값은 0 이 된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       test 표현식</span></div><div class="line"><span class="string">       [ 표현식 ]</span></div><div class="line"><span class="string">              조건 표현식 을 평가하여 0 (참) 또는 1 (거짓)을 상태값으로 반환한다.  표현식은 일항 또는 이항 표현식일 수 있다.  일항 표현식은 주로 파일의 상태를 점검할 때 사용한다.  문자열 연산자와 수치 비교 연산자도 있다.  각 연산자와 피연산자는 개별적인 인수 형태를 띠어야 한다.  파일이 /dev/fd/n의 형태일 때에는, 파일 기술자 n를 점검한다.</span></div><div class="line"><span class="string">              -b 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 블럭 특수 파일이면 참.</span></div><div class="line"><span class="string">              -c 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 문자 특수 파일이면 참.</span></div><div class="line"><span class="string">              -d 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 디렉토리이면 참.</span></div><div class="line"><span class="string">              -e 파일</span></div><div class="line"><span class="string">                     파일이 존재하면 참.</span></div><div class="line"><span class="string">              -f 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 일반 파일이면 참.</span></div><div class="line"><span class="string">              -g 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 set-group-id이면 참.</span></div><div class="line"><span class="string">              -k 파일</span></div><div class="line"><span class="string">                     파일에 ``스틱키(sticky)'</span><span class="string">' 비트가 설정되어 있으면 참.</span></div><div class="line"><span class="string">              -L f파일</span></div><div class="line"><span class="string">                     파일이 존재하고 심볼릭 링크이면 참.</span></div><div class="line"><span class="string">              -p 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 명명된(named) 파이프이면 참.</span></div><div class="line"><span class="string">              -r 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 읽을 수 있으면 참.</span></div><div class="line"><span class="string">              -s 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 그 크기가 0 보다 크면 참.</span></div><div class="line"><span class="string">              -S 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 소켓이면 참.</span></div><div class="line"><span class="string">              -t fd  fd (파일 기술자)가 열린 상태이고 터미널이면 참.</span></div><div class="line"><span class="string">              -u 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 set-user-id 비트가 설정되어 있으면 참.</span></div><div class="line"><span class="string">              -w 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 쓸 수 있으면 참.</span></div><div class="line"><span class="string">              -x 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 실행 가능하면 참.</span></div><div class="line"><span class="string">              -O 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 유효(effective) 사용자 ID의 소유이면 참.</span></div><div class="line"><span class="string">              -G 파일</span></div><div class="line"><span class="string">                     파일이 존재하고 유효 그룹 ID의 소유이면 참.</span></div><div class="line"><span class="string">              파일1 -nt 파일2</span></div><div class="line"><span class="string">                     파일1이 (수정 일시에 의거하여) 파일2보다 새로운 파일이면 참.</span></div><div class="line"><span class="string">              파일1 -ot 파일2</span></div><div class="line"><span class="string">                     파일1이 파일2보다 오래 된 파일이면 참.</span></div><div class="line"><span class="string">              파일1 -ef 파일2</span></div><div class="line"><span class="string">                     파일1과 파일2가 같은 장치이며 아이노드 번호가 같으면 참.</span></div><div class="line"><span class="string">              -z 문자열</span></div><div class="line"><span class="string">                     문자열의 길이가 0이면 참.</span></div><div class="line"><span class="string">              -n 문자열</span></div><div class="line"><span class="string">              문자열 문자열 의 길이가 0이 아니면 참.</span></div><div class="line"><span class="string">              문자열1 = 문자열2</span></div><div class="line"><span class="string">                     두 문자열이 같으면 참.</span></div><div class="line"><span class="string">              문자열1 != 문자열2</span></div><div class="line"><span class="string">                     두 문자열이 같지 않으면 참.</span></div><div class="line"><span class="string">              ! 표현식</span></div><div class="line"><span class="string">                     표현식 이 거짓이면 참.</span></div><div class="line"><span class="string">              표현식1 -a 표현식2</span></div><div class="line"><span class="string">                     표현식1 과 표현식2 둘 다 참이면 참.</span></div><div class="line"><span class="string">              표현식1 -o 표현식2</span></div><div class="line"><span class="string">                     표현식1 또는 표현식2 둘 중 하나가 참이면 참.</span></div><div class="line"><span class="string">              인수1 연산자 인수2</span></div><div class="line"><span class="string">                     연산자 는 -eq, -ne, -lt, -le, -gt, 또는 -ge 중 하나이다.  위와 같은 수치 이항 연산자는 각각 인수1이 인수2와 같거나, 같지 않거나, 작거나, 작거나 같거나, 크거나, 크거나 같을 때에 참이다.  인수1 과 인수2 는 양의 정수, 음의 정수 또는 -l 문자열과 같이 문자열 의 길이로 평가되는 특별한 표현식이 될 수 있다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       times  쉘과 쉘로부터 실행한 프로세스들에 대하여 사용자 영역에서의 소모 시간, 시스템 영역에서의 소모 시간을 출력한다.  반환값은 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       trap [-l] [인수] [시그널스펙]</span></div><div class="line"><span class="string">              쉘이  시그널스펙 이 가리키고 있는 시그널을 받으면 인수 로 주어진 명령을 읽어 실행하도록 한다.  인수 가 없거나 - 이면, 제시한 모든 시그널에 대하여 원래의 값으로 돌아간다.  (즉 쉘을 시작했을 때의 값) 인수 가 널 문자열이면 쉘과 쉘이 실행한 명령이 그 시그널을 무시해 버린다.  시그널스펙 은 &lt;signal.h&gt;에 정의되어 있으면 시그널 이름이거나, 시그널</span></div><div class="line"><span class="string">              번호이다.  시그널스펙 이 EXIT (0) 이면 인수 로 주어진 명령을 쉘 종료 시에 실행한다.  아무런 인수도 없으면, trap 은 각 시그널 번호와 연관된 명령 목록을 출력한다.  -l 옵션을 주면 시그널 이름과 해당하는 번호 목록을 출력한다.  -- 인수는 그 뒤에 나오는 인수에 대한 옵션  점검을  하지  않도록  한다.   쉘을  시작할  때  무시한  시그널에  대해서는</span></div><div class="line"><span class="string">              가로채거나 재설정할 수 없다.  가로 챈 시그널은 자식 프로세스가 새롭게 생성될 때 원래의 값으로 재설정된다.  가로채기 이름 또는 번호가 유효하지 않으면 거짓이고 그렇지 않으면 trap 은 참을 반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       type [-all] [-type | -path] 이름 [이름 ...]</span></div><div class="line"><span class="string">              옵션없이  사용하면,  이름  이  명령 이름으로 사용하였을 때 어떻게 해석할 것인지 알려 준다.  -type 플래그를 사용하면, type 은 이름 이 각각 앨리어스, 쉘의 예약된 단어, 함수, 내부함수, 또는 디스크 파일일 때, alias, keyword, function, builtin, 그리고 file 중 하나를 출력한다.  이름을 찾을 수 없으면 아무 것도 출력하지 않고 반환값은 거짓이 된다.</span></div><div class="line"><span class="string">              -path 플래그를 사용하면, type 은 이름 이 명령 이름으로 사용되었을 때 실행될 디스크 파일 이름을 반환하거나, -type 이 file 을 반환하지 않을 때에는 아무 것도 반환하지 않는다.  명령이 해쉬된 상태이면, -path 는 PATH 상에서 처음으로 나오는 파일이 아니라 해쉬 값을 반환할 것이다.  -all 플래그를 사용하면, type 은 이름 이라는 이름을  포함하는  실행</span></div><div class="line"><span class="string">              파일이 포함된 모든 장소를 포함한다.  -path 플래그를 함께 사용하지 않을 때에만, 앨리어스와 함수를 포함한다.  -all 을 사용할 때에는 해쉬 명령 테이블을 참조하지 않는다.  type 은 -all, -type, 과 -path 대신 각각 -a, -t, 과 -p 를 받아들인다.  -- 인수는 그 뒤에 나오는 인수에 대한 옵션 점검을 하지 않도록 한다.  type 은 인수를 발견했을 때에만 참을</span></div><div class="line"><span class="string">              반환하고 발견하지 못했을 때에는 거짓을 반환한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       ulimit [-SHacdfmstpnuv [제한]]</span></div><div class="line"><span class="string">              Ulimit 은 제한 기능을 지원하는 시스템 상에서 쉘과 쉘이 실행한 프로세스에 대하여 사용 자우너을 제한할 수 있도록 해 준다.  제한 값은 각 자원에 대한 단위 값이거나 unlimited 라는 값을 가질 수 있다.  H와 S 옵션은 주어진 자원에 대한 하드(hard) 또는 소프트(soft) 설정을 명시한다.  하드 제한은 일단 설정되면 더 이상 늘릴 수 없다; 한편 소프트 제한은</span></div><div class="line"><span class="string">              하드 제한 값까지 늘릴 수도 있다.  H 와 S 중 아무 것도 명시되어 있지 않으면 소프트 제한이라고 간주한다.  제한 을 생략하면 H 옵션이 없는 한, 자원의 현재 소프트 제한 값을 출력한다.  여러 개의 자원을 명시했다면 값 앞에 제한 이름과 단위를 출력해 준다.  기타 다른 옵션은 다음과 같이 해석한다:</span></div><div class="line"><span class="string">              -a     모든 현재 제한 사항을 보고한다.</span></div><div class="line"><span class="string">              -c     코어 파일의 최대 크기</span></div><div class="line"><span class="string">              -d     프로세스의 데이터 세그먼트의 최대 크기</span></div><div class="line"><span class="string">              -f     쉘이 만들 수 있는 파일의 최대 크기</span></div><div class="line"><span class="string">              -m     상주 설정(resident size) 최대 크기</span></div><div class="line"><span class="string">              -s     최대 스택 크기</span></div><div class="line"><span class="string">              -t     초 단위의 최대 CPU 시간</span></div><div class="line"><span class="string">              -p     512 바이트 블럭 단위로 파이프의 크기(설정 가능하지 않을 수 있음)</span></div><div class="line"><span class="string">              -n     열 수 있는 파일 기술자의 최대 크기 (대부분의 시스템에서는 설정을 허용하지 않고 오로지 출력만 한다.)</span></div><div class="line"><span class="string">              -u     단일 사용자에게 허용하는 프로세스 최대 갯수</span></div><div class="line"><span class="string">              -v     쉘에 허용하는 가상 메모리의 최대량</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              --  인수는  그 뒤에 나오는 인수에 대한 옵션 점검을 금지한다.  제한 이 주어지면, 명시한 자원에 대한 새로운 값이 된다.( -a 옵션은 표시할 때만 사용한다.)  아무런 옵션도 없으면 -f 로 간주한다.  값은 초 단위의 -t, 512 바이트의 블럭 단위인 -p, 그리고 단위가 없는 -n 과 -u 를 제외하고, 1024 바이트 단위로 생각한다.  잘못된 옵션이 있거나, 제한 값에</span></div><div class="line"><span class="string">              unlimited 이외의 수치 아닌 인수를 적거나 또는 새로운 제한을 설정하는데 오류가 발생한 경우를 제외하고 반환 상태값은 0 이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       umask [-S] [모드]</span></div><div class="line"><span class="string">              사용자 파일 생성 매스크를 모드 로 설정한다.  모드 가 숫자로 시작하면 8 진수로 해석한다.  그렇지 않으면 chmod(1) 와 비슷한 심볼릭 매스크로 해석한다.  모드 를 생략하거나, -S 옵션을 적으면, 현재의 매스크 값을 출력한다.  -S 옵션은 매스크 값을 심볼릭 형태로 출력하도록 한다; 기본 출력 형태는 8 진수이다.  -- 인수는 뒤에 나오는 인수에  대한  옵션</span></div><div class="line"><span class="string">              점검을 금지시킨다.  모드를 성공적으로 변경하거나 아무런 모드 값도 적지 않으면 반환 상태값은 0 이고 그 나머지 경우에 대해서는 거짓이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       unalias [-a] [이름 ...]</span></div><div class="line"><span class="string">              정의된 앨리어스 목록에서 이름을 제거한다.  -a 를 적으면 모든 앨리어스 정의를 제거한다.  적은 이름 이 정의되어 있는 앨리어스가 아닌 경우를 제외하고 반환값은 참이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       unset [-fv] [이름 ...]</span></div><div class="line"><span class="string">              각각의  이름 에 대하여, 해당하는 변수를 제거하거나, -f 옵션의 경우 함수를 제거한다.  -- 인수는 뒤에 나오는 인수에 대한 옵션 점검을 금지시킨다.  PATH, IFS, PPID, PS1, PS2, UID, 그리고 EUID 는 unset할 수 없다.  RANDOM, SECONDS, LINENO, 또는 HISTCMD 중 하나를 unset하면, 그 값은 나중에 다시 설정한다 할 지라도 고유의 특성을 잃게 된다.  이름 이</span></div><div class="line"><span class="string">              존재하지 않거나 unset할 수 없는 것이 아닌 한, 종료 상태값은 참이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       wait [n]</span></div><div class="line"><span class="string">              특정 프로세스를 기다리다가 종료값을 반환한다.  n 은 프로세스 ID이거나 작업 스펙이다; 작업 스펙이면 그 작업의 파이프라인에 존재하는 모든 프로세스를 기다린다.  n 을 적지 않으면, 현재 활성 중인 모든 프로세스를 기다리며 반환값은 0 이다.  n 이 존재하지 않는 프로세스 또는 작업을 가리키는 경우 반환 상태값은 127  이다.   그렇지  않으면,  반환값은</span></div><div class="line"><span class="string">              기다렸던 마지막 프로세스 또는 작업의 종료 상태값이 된다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">호출(INVOCATION)</span></div><div class="line"><span class="string">       로그인 쉘이란 0 번째 인수의 첫번째 문자가 - 이거나 플래그를 주어 시작한 쉘이다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       대화형(interactive) 쉘이라면 쉘의 표준 입력과 표준 출력 둘 다 터미널에 연결되어 있는 쉘 (그 여부는 isatty(3) 를 통해 판단한다.) 또는 -i 옵션을 주어 시작한 쉘이다.  bash 가 대화형 모드일 때에는 쉘 스크립트나 시동 파일에서 두 가지 상태를 판단할 수 있도록 PS1 를 설정하고 $- 에 i 를 포함한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       로그인 쉘:</span></div><div class="line"><span class="string">         로그인할 때 (-noprofile 옵션에 따라 달라진다):</span></div><div class="line"><span class="string">               만약 /etc/profile이 있으면, 그것을 소스(source)한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">               만약 ~/.bash_profile이 있으면 소스한다.</span></div><div class="line"><span class="string">                 그렇지 않고 ~/.bash_login이 존재하면 그것을 소스한다.</span></div><div class="line"><span class="string">                   그렇지 않고 ~/.profile이 존재하면 그것을 소스한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">         종료할 때:</span></div><div class="line"><span class="string">               만약 ~/.bash_logout이 존재하면 소스한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       로그인이 아닌 대화형 쉘:</span></div><div class="line"><span class="string">         시동할 때 (-norc와 -rcfile 옵션에 따라 달라진다):</span></div><div class="line"><span class="string">               만약 ~/.bashrc이 존재하면 소스한다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       대화형 쉘이 아닌 쉘:</span></div><div class="line"><span class="string">         시동할 때:</span></div><div class="line"><span class="string">               if the environment variable ENV is non-null, expand</span></div><div class="line"><span class="string">            만약 환경 변수 ENV가 널이 아니면, 확장한 뒤, 가리키는</span></div><div class="line"><span class="string">            파일을 소스한다.  마치 다음과 같은 루틴이라고 보면 된다.</span></div><div class="line"><span class="string">                       if [ "$ENV" ]; then . $ENV; fi</span></div><div class="line"><span class="string">            그러나 경로명에 탐색을 위해서는 PATH를 사용하지 않는다.</span></div><div class="line"><span class="string">            POSIX 모드로 시동하지 않았다면, bash는 ENV를 찾기 전에</span></div><div class="line"><span class="string">               BASH_ENV를 찾는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       bash를 sh 라는 이름으로 호출하면, 가능한 최대한 sh 의 행동 방식을 흉내내려 한다.  로그인 쉘의 경우, /etc/profile 와 ~/.profile, 만을 순서대로 소스한다.  -noprofile 옵션을 주면 이런 행동 방식을 방지할 수 있다.  sh 라는 이름으로 호출할 쉘은 기타 다른 시동 파일을 소스하지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       -posix 명령행 옵션을 주어 bash 를 posix 모드로 시작하면 시동 파일에 대하여 POSIX 표준에 따른다.  이 모드에서는 ENV 변수를 확장하여 그 파일을 소스한다;  다른 시동 파일을 읽지 않는다.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">참고 사항</span></div><div class="line"><span class="string">       Bash Features, Brian Fox and Chet Ramey</span></div><div class="line"><span class="string">       The Gnu Readline Library, Brian Fox and Chet Ramey</span></div><div class="line"><span class="string">       The Gnu History Library, Brian Fox and Chet Ramey</span></div><div class="line"><span class="string">       A System V Compatible Implementation of 4.2BSD Job Control, David Lennert</span></div><div class="line"><span class="string">       Portable Operating System Interface (POSIX) Part 2: Shell and Utilities, IEEE</span></div><div class="line"><span class="string">       sh(1), ksh(1), csh(1)</span></div><div class="line"><span class="string">       emacs(1), vi(1)</span></div><div class="line"><span class="string">       readline(3)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">파일</span></div><div class="line"><span class="string">       /bin/bash</span></div><div class="line"><span class="string">              bash 실행파일</span></div><div class="line"><span class="string">       /etc/profile</span></div><div class="line"><span class="string">              시스템 전역 초기화 파일로서 로그인 쉘에서 실행</span></div><div class="line"><span class="string">       ~/.bash_profile</span></div><div class="line"><span class="string">              개인 초기화 파일로서 로그인 쉘에서 실행</span></div><div class="line"><span class="string">       ~/.bashrc</span></div><div class="line"><span class="string">              각각의 대화형 쉘에 대한 개별 시동 파일</span></div><div class="line"><span class="string">       ~/.inputrc</span></div><div class="line"><span class="string">              개별적인 readline 초기화 파일</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">저자</span></div><div class="line"><span class="string">              Brian Fox, Free Software Foundation (주 개발자)</span></div><div class="line"><span class="string">              bfox@ai.MIT.Edu</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">              Chet Ramey, Case Western Reserve University</span></div><div class="line"><span class="string">              chet@ins.CWRU.Edu</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">버그 보고</span></div><div class="line"><span class="string">       bash 에서 버그를 발견하면 보고해야 한다.  우선 진짜로 버그인지 확실히 하고 최신 버전의 bash 인지 확인하라.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">       일단 정말로 버그가 있다고 생각했다면 bashbug 명령을 사용하여 버그를 보고한다.  고친 내용이 있다면 그 내용을 메일로 보낸다면 환영이다!  제안 사항이나 `철학적인'</span> 버그 보고는 bug-bash@prep.ai.MIT.Edu에 메일을 쓰거나 유즈넷 뉴스그룹인 gnu.bash.bug 에 글을 적는다.</div><div class="line"></div><div class="line">       모든 버그 보고는 다음을 포함해야 한다:</div><div class="line"></div><div class="line">       bash의 버전 번호</div><div class="line">       하드웨어와 운영체계</div><div class="line">       컴파일 시 사용한 컴파일러</div><div class="line">       버그에 대한 설명</div><div class="line">       버그를 내는 간단한 스크립트 또는 <span class="string">'recipe'</span></div><div class="line"></div><div class="line">       bashbug 는 버그 보고 시에 사용하는 템플릿에 처음 나오는 3 가지 항목을 자동으로 추가해 준다.</div><div class="line"></div><div class="line">       매뉴얼 페이지에 대한 언급과 버그 보그는 chet@ins.CWRU.Edu 로 보낸다.</div><div class="line"></div><div class="line">버그</div><div class="line">       너무 크고 너무 느리다.</div><div class="line"></div><div class="line">       bash 와 전통적인 sh 버전 간에 약간의 미묘한 차이점이 존재한다.  그 중 대부분은 POSIX 스펙에 의한 것이다.</div><div class="line"></div><div class="line">       앨리어스는 일부 사용법에서 혼란스럽다.</div><div class="line"></div><div class="line">번역자</div><div class="line">              이 만 용, 알짜 리눅스</div><div class="line">              Man-Yong Lee, ALZZA LINUX</div><div class="line"></div><div class="line">              yong@alzzalinux.com</div><div class="line">              geoman@nownuri.net</div><div class="line"></div><div class="line">              번역에 대한 버그 보고 또는 제한 사항은 위 메일로 보내기 바란다.</div><div class="line"></div><div class="line">GNU                                                                                                                                                                         1995 May 5                                                                                                                                                                     BASH(1)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
            <tag> bash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[외부명령어 요약]]></title>
      <url>/2017/11/02/centos-%EC%99%B8%EB%B6%80%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%9A%94%EC%95%BD/</url>
      <content type="html"><![CDATA[<h3 id="외부-명령어"><a href="#외부-명령어" class="headerlink" title="외부 명령어"></a>외부 명령어</h3><h4 id="파일-관리-명령어"><a href="#파일-관리-명령어" class="headerlink" title="파일 관리 명령어"></a>파일 관리 명령어</h4><ul>
<li>ls        | 파일의 리스트를 보여줌.</li>
<li>touch        | 파일의 생성일자를 변경. 파일이 없다면 새로운 파일을 만듦.</li>
<li>cat        | 파일의 내용을 보여줌.</li>
<li>more        | 파일의 내용을 보여줌.(화면단위)</li>
<li>head        | 파일의 내용을 파일의 처음을 기준으로 10줄 보여줌.</li>
<li>tail        | 파일의 내용을 파일의 끝을 기준으로 10줄 보여줌.</li>
<li>less        | 파일의 내용을 보여주는 프로그램. man page 기본프로그램</li>
<li>which        | 명령어의 위치를 알려줌.(명령어가 어느것인지 <code>$PATH</code>에서만 찾음)</li>
<li>whereis    | 명령어의 위치를 알려줌.(명령어가 어디에 있는지 <code>/bin;/etc;/man</code> 에서찾음)</li>
<li>find        | 파일을 찾아줌.</li>
<li>file        | 파일의 정보를 알려줌.</li>
<li>cp        | 파일을 복사.</li>
<li>rm        | 파일을 지움.</li>
<li>mv        | 파일을 이동시킴.</li>
<li>grep        | 단어(키워드)를 찾아줌.</li>
<li>ln        | 링크를 만들어줌.</li>
<li>mkdir        | 디렉토리를 만들어줌.</li>
<li>rmdir        | 디렉토리를 삭제해줌.</li>
<li>wc        | 파일의 통계(라인수, 단어수, 문자수)를 보여줌.</li>
<li>grep        | 패턴을 검색</li>
<li>egrep        | 확장된 옵션으로 패턴을 검색</li>
<li>fgrep        | 패턴을 검색(문자열로만)</li>
<li>ed        | 라인 에디터</li>
<li>sed        | 스트리밍 에디터</li>
<li>vi        | 텍스트 편집 에디터</li>
<li>df        | 디스크의 남은 용량을 보여줌.</li>
<li>dd         | 지정한 블럭 크기만큼 파일을 복사한다.</li>
</ul>
<h4 id="권한-소유-관리"><a href="#권한-소유-관리" class="headerlink" title="권한 소유 관리"></a>권한 소유 관리</h4><ul>
<li>id        | 사용자 모든 id 정보를 보여줌.</li>
<li>whoami    | 사용자의 id를 보여줌</li>
<li>finger    | 사용자의 시스템 사용 현황을 보여줌.</li>
<li>chmod        | 파일의 권한을 수정함.</li>
<li>chown        | 파일의 소유권을 수정함.</li>
<li>sudo        | 다른 사용자로 실행 (옵션이 없으면 root)</li>
<li>passwd    | 비밀번호를 수정</li>
<li>useradd    | 사용자를 추가함.(사용 권한이 있어야 함.)</li>
<li>w            | 시스템에 로그인된 사용자를 보여줌.</li>
<li>who        | 현재 사용자의 사용정보를 보여줌.</li>
</ul>
<h4 id="프로세스관리"><a href="#프로세스관리" class="headerlink" title="프로세스관리"></a>프로세스관리</h4><ul>
<li>top        | 시스템 사용 현황을 보여줌. </li>
</ul>
<h4 id="기본-응용"><a href="#기본-응용" class="headerlink" title="기본 응용"></a>기본 응용</h4><ul>
<li>cal        | 달력을 보여줌.</li>
<li>date        | 날짜와 시간을 보여줌.</li>
<li>time         | 프로그램이 실행된 실간을 출력.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
            <tag> 외부명령어 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[히스토리]]></title>
      <url>/2017/11/02/centos-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC/</url>
      <content type="html"><![CDATA[<h3 id="히스토리"><a href="#히스토리" class="headerlink" title="히스토리"></a>히스토리</h3><p>리눅스는 명령을 수행하면 모든 명령을 history log에 담아 둡니다.</p>
<ul>
<li><code>history</code> 명령히스토리를 보여줍니다.</li>
<li><code>Ctrl + p</code> 이전 명령을 프롬프트에 나타내 줍니다.</li>
<li><code>!!</code> 이전 명령을 다시 실행해 줍니다.</li>
</ul>
<p>history -rwan [filename]<br>    옵션이  없으면,  행  번호와  함께 명령 히스토리 목록을 표시한다.  * 표시가 있는 행은 수정한 적이 있다는 뜻이다.  n 인수를 주면 최근 n 행만을 표시한다.  옵션이  아닌  인수를  적으면,  히스토리  파일  이름으로 간주한다;없으면 HISTFILE 변수의 값을 사용한다.  옵션이 있는 경우 다음과 같은 뜻을 갖는다:<br>    -a     히스토리 파일에 새로운 히스토리 행(현재 bash 세션의 시작부터 입력한 히스토리 행)을 추가한다.<br>    -n     히스토리  파일로부터 현재 히스토리 목록으로 아직 읽어들이지 않는 히스토리 행을 읽어들인다.  현재 bash 세션 시작부터 히스토리 파일에 추가한 행을 말한다.<br>    -r     히스토리 파일의 내용을 읽어 현재 히스토리로 사용한다.<br>    -w     현재 히스토리를 히스토리 파일의 기존 내용에 덮어 쓴다.<br>    옵션을 잘못 적거나 히스토리 파일을 읽거나 쓰는 도중 오류가 발생한 경우를 제외하고 반환값은 0 이다.</p>
<p>히스토리(HISTORY)<br>    대화형  모드에서 쉘은 이전에 입력한 명령 목록인 명령 히스토리를 접근할 수 있도록 해준다.  최근 HISTSIZE 갯수의 명령 텍스트는(기본 500) 히스토리 목록에 저장된다.  쉘은 각  명령에  대하여  매개변수  확장과  변수  확장  전에 히스토리  목록에  저장한다.   (  확장  참고  ) 그러나 command_oriented_history 와 HISTCONTROL 변수의 값에 따라 히스토리 확장을 수행한 후에 저장하기도 한다.   시동할  때,  히스토리는  HISTFILE  변수가  가리키는  파일로부터 초기화된다.   (기본값  ~/.bash_history).   HISTFILESIZE  보다  커지지  않도록  필요할  때에는  HISTFILE 파일을 잘라낸다.  내부 명령 fc ( 쉘 내부 명령 참고)을 사용하여 히스토리를 보거나 일부  명령을  편집하여  재실행할  수 있다.   history  내부  명령을 사용하여 히스토리 목록을 표시하고 히스토리 파일을 조작할 수 있다.  명령행 편집을 사용할 때 각 모드마다 히스토리 목록을 검색할 수 있는 명령이 있다.  대화형 쉘을 종료하면 최근 HISTSIZE 행만큼이 히스토리  목록으로부터  HISTFILE  로  복사된다.   HISTFILE  을  unset하거나  히스토리  파일에  쓸 수 없을 때는 히스토리를 저장하지 않는다.</p>
<p>히스토리 확장(HISTORY EXPANSION)</p>
<ul>
<li><p>쉘에서는 csh 의 히스토리 확장과 유사한 히스토리 확장 기능을 지원한다.  이 섹션에서는 사용 가능한 기능의 문법을 설명한다.  대화형 쉘에서는 기본 동작하며 +H option to the set 내부 명령에 +H 옵션을 주어 해제할 수 있다.  ( 쉘 내부 명령 참고) 비대화형 모드 쉘에서는 히스토리 확장을 수행하지 않는다.</p>
</li>
<li><p>히스토리 확장은 완전한 행이 읽히고 쉘이 단어로 분리하기 전에 즉시 수행된다.  두 부분에서 일어난다.  우선  이전 히스토리로부터  어떤  행을  가져가  치환에 사용할 것인지 결정한다.  두번째는 현재 행에 포함시키기 위해 그 행의 일부분을 선택한다.  이전 히스토리로부터 선택된 행을 이벤트(event)라 하며 행동이 취해 질 그 행의 일부분을 단어(words)라고 한다. 행은 입력을 읽어 들일 때와 같은 방식으로 단어로 분리되며 따라서 몇 가지 메타문자에 의해 구분된 단어가 쿼우트로 둘러 싸이면는 하나의 단어로 취급한다.  오로지 백슬래쉬()와  싱글  쿼우트만이  히스토리 이스케이프 문자를 (기본값 !) 쿼우트할 수 있다.</p>
</li>
<li><p>히스토리 확장 메커니즘에서 사용하는 다양한 문자를 제어할 수 있다.  ( 쉘 변수 섹션에서 histchars 설명 참고 )</p>
<ul>
<li><p>이벤트 지시자(Event Designators)<br> 이벤트 지시자는 히스토리 목록의 명령행 항목에 대한 참조이다.</p>
<p> !      그 뒤에 공백, 개행문자, = 또는 ( 가 나오는 경우를 제외하고 히스토리 치환을 시작하도록 한다.<br> !!     이전 명령을 가리킨다. <code>!-1</code>와 동의어이다.<br> !n     n 번 명령행을 가리킨다.<br> !-n    현재 명령행에서 n 를 뺀 행을 가리킨다.<br> !문자열</p>
<pre><code>문자열 로 시작하는 가장 최근 명령을 가리킨다.
</code></pre><p> !?문자열[?]</p>
<pre><code>문자열 을 포함하는 가장 최근 명령을 가리킨다.
</code></pre><p> ^문자열1^문자열2^</p>
<pre><code>빠른 치환. 지난 번 명령에 대하여 문자열1 을 문자열2 로 바꾸어 실행한다.  ``!!:s/문자열1/문자열2/``와 같다.  (변경자(Modifiers) 참고).
</code></pre><p> !#     지금까지 입력한 전체 명령행.</p>
</li>
</ul>
</li>
</ul>
<pre><code>- 단어 지시자
 : 는 단어 지시자로부터 이벤트 명시를 분리한다.  단어 지시자가 ^, $, *, % 로  시작할  때에는  생략할  수  있다.
 단어는 행의 처음부터 시작하여 세며 첫번째 단어는 0(숫자 영) 으로 나타낸다.

 0 (숫자 영)
        0 번째 단어. 쉘에 있어 명령 단어에 해당한다.
 n      n번째 단어.
 ^      첫번째 인수 즉 단어 1 이다.
 $      마지막 인수.
 %      가장 최근의 ``?문자열?`` 검색과 일치하는 단어
 x-y    단어의 범위; ``-y`` 는 ``0-y``와 같이 줄여 쓴다.
 *      0  번째를  제외한  모든  단어.   ``1-$``와 동의어이다 이벤트에 단어 하나만 있을 때에도 * 를 사용하는 것은
        에러가 아니다;  이 경우 빈 문자열이 반환된다.
 x*     x-$를 줄여 쓴 것이다.
 x-     x*와 같이 x-$를 줄여 쓴 것이지만 마지막 단어를 제외한다.
</code></pre><p>   변경자(Modifiers)<br>       선택적인 단어 지시자 뒤에 앞에 <code>:</code>를 붙여 다음과 같은 변경자를 추가할 수 있다.</p>
<pre><code>h      머리 부분만 남기도 뒷부분 경로명 부분을 제거한다.
r      베이스 이름만 남기고 .xxx 형태의 뒷부분 꼬리말을 제거한다.
e      꼬리말을 제외하고 모두 제거한다.
t      꼬리 부분은 남기고 앞에 나오는 모든 경로명 부분을 제거한다.
p      새로운 명령을 출력하지만 실행하지는 않는다.
q      치환된 단어를 쿼우트하여 더 이상 치환이 일어나지 않도록 해석금지시킨다.
x      q 과 함께 사용하여 치환된 단어를 쿼우트한다.  그러나 공백 과 개행문자에서 단어를 분리한다.
s/예전것/새것/
       이벤트 행에서 처음 나오는 예전것 을 새것 으로 교체한다. / 대신 어떤  분리자도  사용  가능하다.   마지막 분리자가  이벤트 행의 마지막 단어일 때는 생략 가능하다.  예전것 과 새것 안에서 단일 백슬래쉬를 사용하여
       분리자를 쿼우트할 수 있다.  새것 안에 &amp; 이 있으면 그 문자는  예전것  으로  치환된다.   단일  백슬래쉬를 사용하여 &amp; 를 쿼우트할 수 있다.
&amp;      이전 치환을 반복한다.
g      변화  내용을 전체 이벤트 행에 적용하도록 한다.  ``:s`` (예, ``:gs/예전것/새것/``) 또는 ``:&amp;``와 사용한다.  If used with ``:s``와 사용하면 ``/`` 대신 어떤 분리자든 사용할 수 있으며 마지막 분리자가 이벤트 행의 마지막 문자일 때는 생략할 수 있다.
</code></pre>]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
            <tag> history </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[경로이동하기]]></title>
      <url>/2017/11/01/centos-%EA%B2%BD%EB%A1%9C%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0/</url>
      <content type="html"><![CDATA[<h3 id="경로이동하기"><a href="#경로이동하기" class="headerlink" title="경로이동하기"></a>경로이동하기</h3><ul>
<li><code>pwd</code> 현재의 경로를 확인합니다.</li>
<li><code>.</code> 현재의 경로를 의미합니다.<ul>
<li><code>./abc</code> 현재경로에 있는 abc파일을 실행합니다.</li>
</ul>
</li>
<li><code>..</code> 상위경로를 의미합니다.<ul>
<li><code>cd ..</code> 부모경로로 이동합니다. </li>
</ul>
</li>
<li>cd 디렉토리명으로 경로를 이동할 수 있습니다.<ul>
<li><code>cd temp</code></li>
<li>디렉토리 이름을 쓸때 Tab키를 누르면 자동완성</li>
</ul>
</li>
<li>바로전 경로로 이동하려면 <ul>
<li><code>cd -</code></li>
</ul>
</li>
<li>홈디렉토리로 이동하려면<ul>
<li><code>cd ~</code></li>
</ul>
</li>
<li>현재의 경로를 저장하려면<ul>
<li>pushd .</li>
<li>절대경로로 지정<ul>
<li>pushd /etc/apache2/conf</li>
</ul>
</li>
</ul>
</li>
<li>저장된 경로로 이동하려면<ul>
<li>popd</li>
</ul>
</li>
</ul>
<h3 id="상대-경로와-절대-경로"><a href="#상대-경로와-절대-경로" class="headerlink" title="상대 경로와 절대 경로"></a>상대 경로와 절대 경로</h3><h4 id="상대경로"><a href="#상대경로" class="headerlink" title="상대경로"></a>상대경로</h4><ul>
<li>현재 위치의 경로를 기준<br>../ 부모 경로로 이동</li>
</ul>
<h4 id="절대경로"><a href="#절대경로" class="headerlink" title="절대경로"></a>절대경로</h4><ul>
<li>/를 기준</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cd </tag>
            
            <tag> pushd </tag>
            
            <tag> popd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[복사하기]]></title>
      <url>/2017/11/01/centos-%EB%B3%B5%EC%82%AC%ED%95%98%EA%B8%B0/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h3 id="cp-복사하기"><a href="#cp-복사하기" class="headerlink" title="cp(복사하기)"></a>cp(복사하기)</h3><p>리눅스에서 파일을 복사하는 명령입니다.<br>파일 하나만 복사할 수도 있도 여러개를 복사할 수도 있습니다.<br>물론 디렉토리도 복사할 수 있습니다.</p>
<ul>
<li>파일하나 복사<ul>
<li><code>cp abc.txt anydir</code> abc.txt 파일을 현재위치의 anydir/abc.txt 로 복사</li>
<li><code>cp abc.txt anydir/cde.txt</code> 이름을 바꾸어 저장할 수도 있습니다.</li>
</ul>
</li>
<li><p>여러개의 파일을 복사</p>
<ul>
<li><code>cp abc.txt bcd.txt anydir</code> 여러개의 파일을 직접 지정해서 복사 할 수 있습니다.</li>
<li><code>cp * anydir</code> 모든 파일을 anydir로 복사합니다. 와일드 카드 사용법을 참고하세요.</li>
<li><code>cp *.txt anydir</code> 모든 .txt로 끝나는 파일을 anydir로 복사합니다.</li>
<li><code>cp *[[:alpha:]a][].txt anydir</code> 모든 .txt로 끝나는 파일을 anydir로 복사합니다.</li>
<li><p><code>cp $(ls *.txt) anydir</code></p>
  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls *.txt</div><div class="line">$ cp !! anydir</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>디렉토리를 복사</p>
<ul>
<li><code>cp -R sodir anydir</code> 현재 경로의 sodir디렉토리및 하위 디렉토리 까지  anydir로 복사합니다.</li>
</ul>
</li>
</ul>
<h2 id="파일과-디렉토리"><a href="#파일과-디렉토리" class="headerlink" title="파일과 디렉토리"></a>파일과 디렉토리</h2><p>리눅스에서는 엄밀히 디렉토리라는 것이 없습니다 편의상 그렇게 부르는것 뿐입니다. 장치나 디렉토리나 모두 파일로 간주 합니다. 다만 파일의 특성이 있는 겁니다. 리눅스에서 디렉토리라고 부르는 파일의 특성은 자식파일을 갖을 수 있습니다. 자신의 권한과 소유권을 자식에게 승계 합니다. 자식 파일을 갖는 파일은 생성시 mkdir명령으로 생성합니다. ls의 <code>-l</code> 옵션으로 특성을 확인 할 수 있습니다. ls는 파일의 리스트를 확인 하는 프로그램입니다. 앞으로 편의상 디렉토리로 부를 겁니다. ^^;</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ ``ls -l``</div><div class="line">합계 24</div><div class="line">drwxr-xr-x. 2 root   root      20 11월  1 15:17 anyfolder</div><div class="line">-rw-r--r--. 1 root   root    6072 11월  1 14:48 cp.doc</div><div class="line">-rw-rw-r--. 1 korcow korcow 13439 10월 28 09:33 ls.doc</div><div class="line"></div><div class="line">$ touch aaa</div><div class="line">$ mkdir aaa</div><div class="line">mkdir: `aaa` 디렉토리를 만들 수 없습니다: 파일이 있습니다</div></pre></td></tr></table></figure>
<p>cp 명령을 사용하다 에러가 나면 man page를 확인하세요. 대부분 권한, 소유권, 하위에 디렉토리 여부, 소프트링크 관련 에러 입니다.<br>복사가 힘들다고 불평하지 마세요. 보안의 강화 때문입니다. 소중한 자료를 아무나 허락 없이 가져가면 안되죠…</p>
<h4 id="cp-한글-man-page"><a href="#cp-한글-man-page" class="headerlink" title="cp 한글 man page"></a>cp 한글 man page</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line">CP(1)                       General Commands Manual                      CP(1)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">NAME</div><div class="line">       cp - 파일 복사</div><div class="line"></div><div class="line">SYNOPSIS</div><div class="line">       cp [options] source dest</div><div class="line">       cp [options] source... directory</div><div class="line">       Options:</div><div class="line">       [-abdfilprsuvxPR]  [-S  backup-suffix]  [-V &#123;numbered,existing,simple&#125;]</div><div class="line">       [--backup] [--no-dereference]  [--force]  [--interactive]  [--one-file-</div><div class="line">       system]   [--preserve]  [--recursive]  [--update]  [--verbose]  [--suf‐</div><div class="line">       fix=backup-suffix]       [--version-control=&#123;numbered,existing,simple&#125;]</div><div class="line">       [--archive] [--parents] [--link] [--symbolic-link] [--help] [--version]</div><div class="line"></div><div class="line">DESCRIPTION</div><div class="line">       이 문서는 더이상 최신 정보를 담고 있지않다.  그래서,  몇몇 틀릴  경우도</div><div class="line">       있고,  부족한  경우도  있을  것이다.  완전한 매뉴얼을  원하면,  Texinfo</div><div class="line">       문서를 참조하기 바란다.</div><div class="line"></div><div class="line">       이  매뉴얼 페이지는 cp 명령의 GNU  버전에  대한  것이다.  마지막 명령행</div><div class="line">       인자로 경로가 지정되면, cp 명령은  지정한  source  파일들을  그  경로로</div><div class="line">       안으로  복사한다.   한편  명령행  인자로  두개의  파일 이름이 사용되면,</div><div class="line">       첫번째 파일을 두번째 파일로  복사한다.   마지막  명령행  인자가  경로가</div><div class="line">       아니고, 두개 이상의 파일이 지정되면, 오류 메시지를 보여준다. 초기값으로</div><div class="line">       경로는 복사하지 않는다.</div><div class="line"></div><div class="line">   OPTIONS</div><div class="line">       -a, --archive</div><div class="line">              원본 파일의 속성, 링크 정보들을 그대로 유지하면서 복사한다.   이</div><div class="line">              옵션은 -dpR 옵션과 같은 역활을 한다.</div><div class="line"></div><div class="line">       -b, --backup</div><div class="line">              복사할  대상이  이미  있어,  이것을 덮어쓰거나 지울경우에 대비해</div><div class="line">              백업본을 만든다.</div><div class="line"></div><div class="line">       -d, --no-dereference</div><div class="line">              만약 복사할 원본이 심블릭 파일이면, cp 명령은 그  심블릭  대상이</div><div class="line">              되는  파일을  복사한다.  이렇게  하지  않고, 단지 그 심블릭 파일</div><div class="line">              자체를 심블릭 정보와 함께 복사하고 할 때, 이 옵션을 사용한다.</div><div class="line"></div><div class="line">       -f, --force</div><div class="line">              만약 복사 대상 파일이 이미 있으면 강제로 지우고 복사한다.</div><div class="line"></div><div class="line">       -i, --interactive</div><div class="line">              만약 복사 대상 파일 이미 있으면 사용자에게 어떻게 처리 할 것인지</div><div class="line">              물어보는 프롬프트를 나타나게 한다.</div><div class="line"></div><div class="line">       -l, --link</div><div class="line">              하드링크  형식으로  복사한다.  물론  하드  링크형식이기에 경로는</div><div class="line">              복사할 수 없다.</div><div class="line"></div><div class="line">       -P, --parents</div><div class="line">              원본 파일에 지정을 경로와 같이 했을 경우, 그  경로  그대로  복사</div><div class="line">              된다.   이때는  대상으로  사용될  수 있는 것은 경로 이름이어야만</div><div class="line">              한다.  예를  들어,  ``cp  --parents  a/b/c  existing_dir``  명령이</div><div class="line">              사용된다면, 이것의 결과는 existing_dir/a/b/c 이런 식이 된다.</div><div class="line"></div><div class="line">       -p, --preserve</div><div class="line">              원본  파일의  소유주,  그룹,  권한, 시간정보들이 그대로 보존되어</div><div class="line">              복사된다.</div><div class="line"></div><div class="line">       -r     일반 파일이면, 그냥 복사되고, 만약 원본이 경로면, 그 경로와 함께</div><div class="line">              경로 안에 있는 모든 하위경로, 파일들이 복사된다.</div><div class="line"></div><div class="line">       -s, --symbolic-link</div><div class="line">              경로가  아닌  일반 파일을 심블릭 링크 형식으로 복사한다.  이때는</div><div class="line">              복사할 원본 파일 이름은 절대경로(``/``로 시작하는  경로)로  지정된</div><div class="line">              파일이름이어야  한다.   심블릭  링크를  지원하지 않는 시스템에서</div><div class="line">              이옵션을 사용할 경우에는 오류 메시지를 보여준다.</div><div class="line"></div><div class="line">       -u, --update</div><div class="line">              복사할 대상이 이미 있는데, 이  파일의  변경  날짜가  같거나,  더</div><div class="line">              최근의 것이면 복사하지 않는다.</div><div class="line"></div><div class="line">       -v, --verbose</div><div class="line">              각 파일의 복사 상태를 자세히 보여준다.</div><div class="line"></div><div class="line">       -x, --one-file-system</div><div class="line">              원복과 대상 파일의 파일 시스템이 다를 경우에는 복사하지 않는다.</div><div class="line"></div><div class="line">       -R, --recursive</div><div class="line">              경로를  복사할  경우에는 그 안에 포함된 모든 하위경로와 파일들을</div><div class="line">              모두 복사한다.</div><div class="line"></div><div class="line">       --help 도움말을 보여주고 마친다.</div><div class="line"></div><div class="line">       --version</div><div class="line">              버전 정보를 보여주고 마친다.</div><div class="line"></div><div class="line">       -S, --suffix backup-suffix</div><div class="line">              만약에 복사 대상이 이미  있어,  백업을  해야할  경우에  그  백업</div><div class="line">              파일에서  사용할  파일 이름의 꼬리 문자를 지정한다.  이것은 이미</div><div class="line">              지정되어 있는 SIMPLE_BACKUP_SUFFIX 환경  변수를  무시하게  된다.</div><div class="line">              만약  이  환경변수도  지정되어  있지  않고,  이  옵션도 사용하지</div><div class="line">              않는다면, 초기값으로 Emacs과 같이 ``~`` 문자를 사용한다.</div><div class="line"></div><div class="line">       -V, --version-control &#123;numbered,existing,simple&#125;</div><div class="line">              백업하는 방법을 지정하는데, 이 옵션은 이미  지정되어  있는  VER‐</div><div class="line">              SION_CONTROL 환경 변수를 무시한다.  만약 이 환경 변수도 지정되어</div><div class="line">              있지 않고, 이 옵션도 사용하지 않는다면, 초기값으로  ``existing``을</div><div class="line">              사용한다.   여기서 사용하는 백업방법은 GNU Emacs의 ``version-con‐</div><div class="line">              trol`` 값과 같다.  아래와 같이 보다  짧은  지시어들도  사용될  수</div><div class="line">              있다.  여기서 사용될 수 있는 백업 방법은 아래와 같다.</div><div class="line"></div><div class="line">              ``t`` 또는 ``numbered``</div><div class="line">                     항상 번호 있는 백업본을 만든다.</div><div class="line"></div><div class="line">              ``nil`` or ``existing``</div><div class="line">                     대상 파일이 이미 있을 경우에만 백업본을 만든다.</div><div class="line"></div><div class="line">              ``never`` or ``simple``</div><div class="line">                     간단한 백업을 만듬.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">FSF                           GNU File Utilities                         CP(1)</div><div class="line">---</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
            <tag> cp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CtrlP 플러그인]]></title>
      <url>/2017/10/31/vim-ctrlp-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8/</url>
      <content type="html"><![CDATA[<h3 id="기본사용법"><a href="#기본사용법" class="headerlink" title="기본사용법"></a>기본사용법</h3><ul>
<li><code>Ctrl+p</code>를 누르면 하단에 파일검색 모드가 열립니다.</li>
<li><code>Ctrl+f</code>를 누르면 모드가 바뀝니다. 현재열린 버퍼 &gt; 파일 &gt; 전체</li>
<li><code>Ctrl+j</code>, <code>Ctrl+k</code> 아래, 위로 이동(파일선택)</li>
</ul>
<h4 id="Command-line에서는-아래와-같이"><a href="#Command-line에서는-아래와-같이" class="headerlink" title="Command-line에서는 아래와 같이"></a>Command-line에서는 아래와 같이</h4><ul>
<li>Run :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode.</li>
<li>Run :CtrlPBuffer or :CtrlPMRU to invoke CtrlP in find buffer or find MRU file mode.</li>
<li>Run :CtrlPMixed to search in Files, Buffers and MRU files at the same time.</li>
</ul>
<h4 id="Check-help-ctrlp-commands-and-help-ctrlp-extensions-for-other-commands"><a href="#Check-help-ctrlp-commands-and-help-ctrlp-extensions-for-other-commands" class="headerlink" title="Check :help ctrlp-commands and :help ctrlp-extensions for other commands."></a>Check :help ctrlp-commands and :help ctrlp-extensions for other commands.</h4><h4 id="Once-CtrlP-is-open"><a href="#Once-CtrlP-is-open" class="headerlink" title="Once CtrlP is open:"></a>Once CtrlP is open:</h4><ul>
<li>Press <code>&lt;F5&gt;</code> to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.</li>
<li>Press <code>&lt;c-f&gt;</code> and <code>&lt;c-b&gt;</code> to cycle between modes.</li>
<li>Press <code>&lt;c-d&gt;</code> to switch to filename only search instead of full path.</li>
<li>Press <code>&lt;c-r&gt;</code> to switch to regexp mode.</li>
<li>Use <code>&lt;c-j&gt;</code>, <code>&lt;c-k&gt;</code> or the arrow keys to navigate the result list.</li>
<li>Use <code>&lt;c-t&gt;</code> or <code>&lt;c-v&gt;</code>, <code>&lt;c-x&gt;</code> to open the selected entry in a new tab or in a new split.</li>
<li>Use <code>&lt;c-n&gt;</code>, <code>&lt;c-p&gt;</code> to select the next/previous string in the prompt’s history.</li>
<li>Use <code>&lt;c-y&gt;</code> to create a new file and its parent directories.</li>
<li>Use <code>&lt;c-z&gt;</code> to mark/unmark multiple files and <code>&lt;c-o&gt;</code> to open them.</li>
</ul>
<h4 id="Run-help-ctrlp-mappings-or-submit-in-CtrlP-for-more-mapping-help"><a href="#Run-help-ctrlp-mappings-or-submit-in-CtrlP-for-more-mapping-help" class="headerlink" title="Run :help ctrlp-mappings or submit ? in CtrlP for more mapping help."></a>Run :help ctrlp-mappings or submit ? in CtrlP for more mapping help.</h4><ul>
<li>Submit two or more dots .. to go up the directory tree by one or multiple levels.</li>
<li>End the input string with a colon : followed by a command to execute it on the opening file(s):<ul>
<li>Use :25 to jump to line 25.</li>
<li>Use :diffthis when opening multiple files to run :diffthis on the first 4 files.</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
            <tag> vundle </tag>
            
            <tag> ctrlp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shell이란]]></title>
      <url>/2017/10/31/centos-shell%EC%9D%B4%EB%9E%80/</url>
      <content type="html"><![CDATA[<p>리눅스 시스템이 부팅이 완료되고 로그인을 하면 커서가 깜빡이며 명령 수행을 대기합니다. 이것을 shell prompt 라고합니다.<br>shell은 interpreter 입니다. 명령을 해석하고 올바른 명령이라면 kernel로 명령을 전달하고 처리 합니다.</p>
<p>shell이 interpreter라고 했습니다.</p>
<p>컴파일러는 명령을 모두 해석해서 한번에 처리합니다.<br>인터프리터는 명령을 한줄씩 해석해서 처리 합니다.</p>
<p>둘다 컴퓨터 언어 이기 때문에 변수, 상수, 자료형, 연산자, 예약어, 조건문, 반복문, 함수, 배열등이 존재 합니다.</p>
<p>shell의 내부명령어는 예약어 입니다. cd, pwd, type, bg, fg 등…</p>
<p>언어 이기 때문에 계산도 가능합니다.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$echo</span> $((1+1))</div><div class="line">2</div><div class="line">$</div></pre></td></tr></table></figure>
<p>사칙연산과 우선순위도 있습니다.<br>프로그래밍도 가능합니다.<br>bash script programming 부분에서 프로그래밍을 다루고 지금은 shell은 인터프리터라는 것만 기억 하시면 됩니다. 컴퓨터를 켜면 커서가 깜빡이는데 우리가 입력하는 것은 프로그램 명령이구나 이정도만 기억 하시면 됩니다.</p>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[와일드카드]]></title>
      <url>/2017/10/31/centos-%EC%99%80%EC%9D%BC%EB%93%9C%EC%B9%B4%EB%93%9C/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<p>와일드 카드는 반드시 알고 있어야 하는 명령입니다.<br>물론 정규식을 사용해도 되지만 왠만한 것은 와일드카드로 문제 없이 사용가능합니다.</p>
<p>여러개의 파일의 일괄처리가 필요할 경우, 파일의 삭제, 복사, 이동, 문자열 추가, 삭제, 치환등을 처리할때 꼭 필요합니다.</p>
<h4 id="와일드카드"><a href="#와일드카드" class="headerlink" title="와일드카드"></a>와일드카드</h4><table>
<thead>
<tr>
<th>문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>모든 문자 0개 이상</td>
</tr>
<tr>
<td><code>?</code></td>
<td>문자하나 반드시 1문자</td>
</tr>
<tr>
<td><code>[characters]</code></td>
<td>characters 문자 집합에 포함된 1문자</td>
</tr>
<tr>
<td><code>[!characters]</code></td>
<td>characters 문자 집합에 포함 되지 않은 1문자</td>
</tr>
<tr>
<td><code>[[:class:]]</code></td>
<td>알파벳과 숫자를 지정</td>
</tr>
<tr>
<td><code>[:alnum:]</code></td>
<td>알파벳과 숫자를 지정</td>
</tr>
<tr>
<td><code>[:alpha:]</code></td>
<td>알파벳 지정</td>
</tr>
<tr>
<td><code>[:digit:]</code></td>
<td>숫자를 지정</td>
</tr>
<tr>
<td><code>[:lower:]</code></td>
<td>모든 소문자</td>
</tr>
<tr>
<td><code>[:upper:]</code></td>
<td>모든 대문자</td>
</tr>
</tbody>
</table>
<p>ls 명령을 사용해 와일드 카드를 사용해 보겠습니다.<br>ls명령과 와일드카드 명령 2개를 같이 사용하는 겁니다.</p>
<h5 id="테스트용-디렉토리와-파일-만들기"><a href="#테스트용-디렉토리와-파일-만들기" class="headerlink" title="테스트용 디렉토리와 파일 만들기"></a>테스트용 디렉토리와 파일 만들기</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> ~</div><div class="line"><span class="variable">$mkdir</span> myTest</div><div class="line"><span class="variable">$cd</span> <span class="built_in">test</span></div><div class="line"><span class="variable">$touch</span> a&#123;a..d&#125;&#123;a..c&#125;&#123;1..3&#125;.txt</div></pre></td></tr></table></figure>
<h5 id="ls-a"><a href="#ls-a" class="headerlink" title="ls a*"></a><code>ls a*</code></h5><p>a로 시작하는 모든 파일을 보여줍니다.</p>
<h5 id="ls-a-txt"><a href="#ls-a-txt" class="headerlink" title="ls a*.txt"></a><code>ls a*.txt</code></h5><p>a로 시작하고 .txt로 끝나는 모든 파일을 보여줍니다.</p>
<h5 id="ls-b-txt"><a href="#ls-b-txt" class="headerlink" title="ls ?b?.txt"></a><code>ls ?b?.txt</code></h5><p>첫문자는 아무 문자나 와도 되고 두번째는 b 세번째는 아무문자 마지막에 .txt로 끝나는 파일을 보여줍니다.</p>
<h5 id="ls-txt"><a href="#ls-txt" class="headerlink" title="ls *.txt"></a><code>ls *.txt</code></h5><p>.txt로 끝나는 모든 파일을 보여줍니다.</p>
<h5 id="ls-digit-1-txt"><a href="#ls-digit-1-txt" class="headerlink" title="ls *[[:digit:]1].txt"></a><code>ls *[[:digit:]1].txt</code></h5><p>1.txt앞에 숫자 1만 있으면 그앞에 어떤 문자가 와도 모두 보여줍니다.</p>
<h5 id="ls-abc"><a href="#ls-abc" class="headerlink" title="ls *[abc]*"></a><code>ls *[abc]*</code></h5><p>파일명 중간이 abc로 된 파일을 모두 보여줍니다.</p>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 와일드카드 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ls]]></title>
      <url>/2017/10/31/centos-ls/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h3 id="외부명령어"><a href="#외부명령어" class="headerlink" title="외부명령어"></a>외부명령어</h3><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>디렉토리의 파일 목록을 보는 명령입니다. 파일의 목록을 볼때 어떻게 확인할지 옵션을 주어 파일을 볼수 있습니다.</p>
<p>ls –help 또는 man ls로 설명을 볼 수 있습니다.</p>
<p>내부명령의 파이프라인과 리다이렉션을 이용해 목록의 출력 방향을 조정 하거나 리스트 결과를 다른 프로그램의 인자로 전달 할 수 있습니다.</p>
<h4 id="와일드카드"><a href="#와일드카드" class="headerlink" title="와일드카드"></a>와일드카드</h4><table>
<thead>
<tr>
<th>문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>모든 문자 0개 이상</td>
</tr>
<tr>
<td><code>?</code></td>
<td>문자하나 반드시 1문자</td>
</tr>
<tr>
<td><code>[characters]</code></td>
<td>characters 문자 집합에 포함된 1문자</td>
</tr>
<tr>
<td><code>[!characters]</code></td>
<td>characters 문자 집합에 포함 되지 않은 1문자</td>
</tr>
<tr>
<td><code>[[:class:]]</code></td>
<td>아래 클래스를 지정합니다.</td>
</tr>
<tr>
<td><code>[:alnum:]</code></td>
<td>알파벳과 숫자를 지정</td>
</tr>
<tr>
<td><code>[:alpha:]</code></td>
<td>알파벳 지정</td>
</tr>
<tr>
<td><code>[:digit:]</code></td>
<td>숫자를 지정</td>
</tr>
<tr>
<td><code>[:lower:]</code></td>
<td>소문자</td>
</tr>
<tr>
<td><code>[:upper:]</code></td>
<td>대문자</td>
</tr>
</tbody>
</table>
<ul>
<li><code>ls</code>명령은 와일드카드와 같이 사용합니다.</li>
<li><code>ls</code>: 디렉토리의 파일 리스트를 출력합니다.</li>
<li><code>ls a*</code>: a로 시작하는 모든 파일을 보여 달라는 명령입니다.</li>
<li><code>ls a???</code>: a로 시작하고 문자의 길이가 총4개인 파일만 보여 달라는 명령입니다.</li>
<li><code>ls -a</code>: 숨김 파일도 보여 줍니다.</li>
<li><code>ls -ld .?*</code> 숨김 파일만 보여줍니다.</li>
<li><code>ls -l</code>: 리스트의 형태로 목록을 보여 줍니다.</li>
<li><code>ls -al</code>: 옵션을 조합해서 사용할 수 있습니다. 리스트의 형태로 숨김파일까지 보여 달라는 명령입니다.</li>
<li><code>ls -al [[:alpha:][:alpha:][:alpha:][:digit:]].txt</code> 알파벳3글자와숫자1로된 <code>.txt</code>로 끝나는 파일을 보여달라는 명령입니다.</li>
</ul>
<p>ls 명령은 <strong>find, grep, more, sed, vim, cp, mv, rename, rm</strong> 등 외부 명령과 조합 해서 사용할 수 있어야 합니다. 단순히 파일 목록만 확인 하는 것이 아니라 파일을 찾은후 파일에 문자열을 추가, 삭제, 실행 등의 작업을 할 수 있습니다. 이부분은 해당 명령에서 다루도록 하겠습니다.</p>
<p>리눅스의 명령은 유닉스, macos의 명령과 100% 같지 않습니다. 기본적인 기능은 거의 같지만 옵션이 틀릴수 있으니 동작이 안된다면 해당 OS의 man page를 참고해야 합니다.<br>windows의 batch script도 알아 두면 좋습니다. 상호간의 통신을 위해 어려운 프로그램 개발을 안해도 됩니다. </p>
<hr>
<h3 id="참고로-아래는-centos의-한글-man-page-입니다"><a href="#참고로-아래는-centos의-한글-man-page-입니다" class="headerlink" title="참고로 아래는 centos의 한글 man page 입니다."></a>참고로 아래는 centos의 한글 man page 입니다.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div></pre></td><td class="code"><pre><div class="line">LS(1)               General Commands Manual               LS(1)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">NAME</div><div class="line">       ls, dir, vdir - 경로의 내용을 나열한다.</div><div class="line"></div><div class="line">SYNOPSIS</div><div class="line">       ls   [-abcdfgiklmnpqrstuxABCFGLNQRSUX1]  [-w  cols]  [-T</div><div class="line">       cols]  [-I  pattern]  [--all]  [--escape]  [--directory]</div><div class="line">       [--inode] [--kilobytes] [--numeric-uid-gid] [--no-group]</div><div class="line">       [--hide-control-chars]       [--reverse]        [--size]</div><div class="line">       [--width=cols]      [--tabsize=cols]      [--almost-all]</div><div class="line">       [--ignore-backups] [--classify]  [--file-type]  [--full-</div><div class="line">       time]   [--ignore=pattern]  [--dereference]  [--literal]</div><div class="line">       [--quote-name]                             [--recursive]</div><div class="line">       [--sort=&#123;none,time,size,extension&#125;] [--format=&#123;long,ver‐</div><div class="line">       bose,commas,across,vertical,single-column&#125;]</div><div class="line">       [--time=&#123;atime,access,use,ctime,status&#125;]        [--help]</div><div class="line">       [--version]                     [--color[=&#123;yes,no,tty&#125;]]</div><div class="line">       [--colour[=&#123;yes,no,tty&#125;]] [name...]</div><div class="line"></div><div class="line">DESCRIPTION</div><div class="line">       이  문서는  더이상  최신  정보를 담고 있지않다.  그래서,</div><div class="line">       몇몇 틀릴  경우도  있고,  부족한  경우도  있을   것이다.</div><div class="line">       완전한 매뉴얼을 원하면, Texinfo 문서를 참조하기 바란다.</div><div class="line"></div><div class="line">       이  매뉴얼 페이지는 ls 명령의 GNU  버전에  대한  것이다.</div><div class="line">       dir과 vdir 명령은 ls 명령의 심블릭 파일로 그 출력 양식을</div><div class="line">       다르게 보여주는 풀그림들이다.  인자로 파일이름이나, 경로</div><div class="line">       이름이 사용된다.  경로의 내용은 초기값으로 알파벳 순으로</div><div class="line">       나열된다.    ls의   경우는   출력이   표준   출력(터미날</div><div class="line">       화면)이면, 세로로 정열된  것이  가로로  나열된다.   다른</div><div class="line">       방식의  출력이면  한줄에 하나씩 나열된다.  dir의 경우는,</div><div class="line">       초기값으로 ls와 같으나, 모든  출력에서  세로로  정열해서</div><div class="line">       가로로   나열한다.(다른  방식의  출력에서도  항상  같음)</div><div class="line">       vdir의 경우는, 초기값으로 목록을 자세히 나열한다.</div><div class="line"></div><div class="line">   OPTIONS</div><div class="line">       -a, --all</div><div class="line">              경로안의 모든 파일을 나열한다. ``.``으로  시작하는</div><div class="line">              파일 들도 포함된다.</div><div class="line"></div><div class="line">       -b, --escape</div><div class="line">              알파벳  형식을  사용하는  파일  이름안에서 그래픽</div><div class="line">              문자가 아닌 문자들을 사용한다. C와 같이  여덟가지</div><div class="line">              역슬래쉬 문자(`\&apos;)와 함께 오는 문자들을 사용한다.</div><div class="line"></div><div class="line">       -c, --time=ctime, --time=status</div><div class="line">              파일  최근  변경  시간에 따라 정열 해서 보여준다.</div><div class="line">              자세한 나열(-l 옵션)이면,  그  파일의  최근  변경</div><div class="line">              시간을 보여준다.</div><div class="line"></div><div class="line">       -d, --directory</div><div class="line">              경로안의   내용을   나열하지   않고,   그  경로를</div><div class="line">              보여준다.(이것은   쉘    스크립트에서    유용하게</div><div class="line">              쓰인다.)</div><div class="line"></div><div class="line">       -f     경로  내용을  정열하지  않는다:  이것은  디스크에</div><div class="line">              저장된 순으로  보여준다.   -a와  -U  옵션과  같은</div><div class="line">              뜻이며, -l, -s, -t.  옵션과 반대뜻이다.</div><div class="line"></div><div class="line">       --full-time</div><div class="line">              시간을 간략히 표시하지 않고, 모두 보여 준다.</div><div class="line"></div><div class="line">       -g     무시: 유닉스 호환을 위해서 있음.</div><div class="line"></div><div class="line">       -i, --inode</div><div class="line">              파일 왼쪽에 색인 번호를 보여준다.</div><div class="line"></div><div class="line">       -k, --kilobytes</div><div class="line">              파일  크기가  나열되면,  kb  단위로 보여준다.  이</div><div class="line">              옵션은 POSIXLY_CORRECT 환경 변수를 무시한다.</div><div class="line"></div><div class="line">       -l, --format=long, --format=verbose</div><div class="line">              파일 나열에 있어, 파일 형태,  사용권한,  하드링크</div><div class="line">              번호,   owner   이름,   group  이름,  파일  크기,</div><div class="line">              시간(따로   지정하지   않으면   파일이   만들어진</div><div class="line">              날자다)을  자세하게 나열한다.  시간은 여섯달 이전</div><div class="line">              것이면, 시간이 생략되고, 파일의 연도가 포함된다.</div><div class="line"></div><div class="line">       -m, --format=commas</div><div class="line">              파일을 가로로 나열한다.  가로로  나열할  수  있는</div><div class="line">              만큼 최대한 나열한다.</div><div class="line"></div><div class="line">       -n, --numeric-uid-gid</div><div class="line">              이름의 나열에서 UID,GID 번호를 사용한다.</div><div class="line"></div><div class="line">       -p     파일 형태를 지시하는 문자를 각파일에 추가한다.</div><div class="line"></div><div class="line">       -q, --hide-control-chars</div><div class="line">              파일 이름에 그래픽 문자가 아닌 것이 있으면, ``?``로</div><div class="line">              표시한다.</div><div class="line"></div><div class="line">       -r, --reverse</div><div class="line">              정열 순서를 내림차순으로 한다.</div><div class="line"></div><div class="line">       -s, --size</div><div class="line">              파일 크기를 1Kb 단위로 나타낸다.  POSIXLY_CORRECT</div><div class="line">              환경 변수가 지정되면, 512b 단위로 지정된다.</div><div class="line"></div><div class="line">       -t, --sort=time</div><div class="line">              파일  시간  순으로  정열한다.   최근  파일이 제일</div><div class="line">              먼저.</div><div class="line"></div><div class="line">       -u, --time=atime, --time=access, --time=use</div><div class="line">              파일 사용 시간 순으로 정열한다.  자세한 나열이면,</div><div class="line">              시간  표시는  만들어진  날자대신,  사용된  날자를</div><div class="line">              보여준다.</div><div class="line"></div><div class="line">       -x, --format=across, --format=horizontal</div><div class="line">              정열 방식을 가로로 한다.</div><div class="line"></div><div class="line">       -A, --almost-all</div><div class="line">              ``.``,  ``..``  경로를  제외하고  디렉토리안의   모든</div><div class="line">              파일을 나열한다.</div><div class="line"></div><div class="line">       -B, --ignore-backups</div><div class="line">              파일 끝이 `~&apos;인 파일은 목록 나열에 제외된다.</div><div class="line"></div><div class="line">       -C, --format=vertical</div><div class="line">              정열 방식을 세로로 한다.</div><div class="line"></div><div class="line">       -F, --classify</div><div class="line">              파일  형식을 알리는 문자를 각 파일 뒤에 추가한다.</div><div class="line">              일반적으로 실행파일은  &quot;*&quot;,  경로는  &quot;/&quot;,  심블릭</div><div class="line">              링크는  &quot;@&quot;,  FIFO는  &quot;|&quot;,  소켓은  &quot;=&quot;, 일반적인</div><div class="line">              파일은 없다.</div><div class="line"></div><div class="line">       -G, --no-group</div><div class="line">              자세한 목록 나열에서 group 정보를 제외한다.</div><div class="line"></div><div class="line">       -L, --dereference</div><div class="line">              심블릭 링크 파일들을 그냥 파일로 보여준다.</div><div class="line"></div><div class="line">       -N, --literal</div><div class="line">              이름이 영문이 아닌 경우, C에서 사용하는  역슬래쉬</div><div class="line">              문자(`\&apos;)와   함께   사용하는  표기  대신  그대로</div><div class="line">              출력한다.</div><div class="line"></div><div class="line">       -Q, --quote-name</div><div class="line">              -N 옵션과 반대.</div><div class="line"></div><div class="line">       -R, --recursive</div><div class="line">              하위 경로와 그 안에 있는 모든 파일들도 나열한다.</div><div class="line"></div><div class="line">       -S, --sort=size</div><div class="line">              파일 크기가 가장 큰 것 부터 정열해서 나열한다.</div><div class="line"></div><div class="line">       -U, --sort=none</div><div class="line">              정열을  하지  않고,  디스크에   저장된   순서대로</div><div class="line">              보여준다.  이  옵션은  -f  옵션을 사용할 수 없다.</div><div class="line">              유닉스 용 ls -f는 -a 옵션은 가능하나, -l, -s,  -t</div><div class="line">              옵션이 불가능하기 때문이다.</div><div class="line"></div><div class="line">       -X, --sort=extension</div><div class="line">              파일   확장자  순으로  정열한다.   확장자가  없는</div><div class="line">              파일이 제일 먼저 나열된다.</div><div class="line"></div><div class="line">       -1, --format=single-column</div><div class="line">              한 줄에 한 파일씩 나열.</div><div class="line"></div><div class="line">       -w, --width cols</div><div class="line">              가로 길이를  값으로  지정한다.   기본적으로는  한</div><div class="line">              화면의  가로  값이된다.   또한  COLUMNS 환경 변수</div><div class="line">              값으로 지정할 수 있다.  초기값은 80이다.</div><div class="line"></div><div class="line">       -T, --tabsize cols</div><div class="line">              탭이 사용될 때, cols 값으로  지정한다.   초기값은</div><div class="line">              8이다.  0으로 지정되면 탭 문자는 무시된다.</div><div class="line"></div><div class="line">       -I, --ignore pattern</div><div class="line">              pattern   패턴으로   지정된   파일들은   목록에서</div><div class="line">              제외된다. 이때,  명령행에서  그  파일이  지정되면</div><div class="line">              물론 나열된다.</div><div class="line"></div><div class="line">       --color, --colour, --color=yes, --colour=yes</div><div class="line">              파일의   형태에  따라  그  파일의  색깔을  다르게</div><div class="line">              보여주는 기능한다.  자세한 이야기는 아래  DISPLAY</div><div class="line">              COLORIZATION 부분을 참조한다.</div><div class="line"></div><div class="line">       --color=tty, --colour=tty</div><div class="line">              --color   옵션과  같으나,  단지  표준  출력에서만</div><div class="line">              색깔을 사용한다.   이  옵션은  칼라  제어  코드를</div><div class="line">              지원하지   않는   보기   풀그림을   사용하는   쉘</div><div class="line">              스크립트나, 명령행 사용에서 아주 유용하게 쓰인다.</div><div class="line"></div><div class="line">       --color=no, --colour=no</div><div class="line">              색깔   사용하지   않는다.   이것이    초기값이다.</div><div class="line">              이옵션은  색깔  사용을  이미 하고 있다면, 이 값을</div><div class="line">              무시한다.</div><div class="line"></div><div class="line">       --help 도움말을 보여주고 마친다.</div><div class="line"></div><div class="line">       --version</div><div class="line">              버전 정보를 보여주고 마친다.</div><div class="line"></div><div class="line">   DISPLAY COLORIZATION</div><div class="line">       --color 옵션을 사용할  때,  이  버전의  ls  명령은  파일</div><div class="line">       이름이나,  파일  형태에  따라  파일의 색깔별로 나열할 수</div><div class="line">       있다.   이  칼라화는  초기값으로  파일  형태에  따라서만</div><div class="line">       사용된다.  사용되는 코드는 ISO 6429 (ANSI)이다.</div><div class="line"></div><div class="line">       이런  초기  색깔 지정은 LS_COLORS (또는 LS_COLOURS) 환경</div><div class="line">       변수 지정으로 바꿀 수 있다.  이  변수들의  형식은  term‐</div><div class="line">       cap(5)  파일  포멧의 방식을 사용한다.  각 항목은 &quot;:&quot;으로</div><div class="line">       하며,  각  항목은  &quot;xx=문자열&quot;로  한다.   xx에는  두개의</div><div class="line">       문자가 오는데, 여기서 사용할 수 있는 문자는 다음과 같다.</div><div class="line"></div><div class="line">         no       0       파일 이름이 아닌 일반 텍스트</div><div class="line">         fi       0       일반 파일</div><div class="line">         di       32      경로</div><div class="line">         ln       36      심블릭 링크</div><div class="line">         pi       31      FIFO(파이프)</div><div class="line">         so       33      소켓</div><div class="line">         bd       44;37   블럭 장치</div><div class="line">         cd       44;37   캐릭터 장치</div><div class="line">         ex       35      실행 파일</div><div class="line">         mi       (없음)  잃어버린 파일 (초기값은 fi)</div><div class="line">         or       (없음)  심블릭 링크 대상이 없는 파일(초기값은 ln)</div><div class="line">         lc       \e[    왼쪽 코드</div><div class="line">         rc       m       오른쪽 코드</div><div class="line">         ec       (없음)  마침 코드 (lc+no+rc로 바뀜)</div><div class="line"></div><div class="line">       색깔을 바꿀 경우는 그 해당 변수만 바꾸면 된다.</div><div class="line"></div><div class="line">       파일  이름은 파일의 확장자에 따라 색깔을 지정할 수 있다.</div><div class="line">       LS_COLORS 환경 변수에 포함하면 되고,  그  사용법은  위와</div><div class="line">       같다.   문법은  &quot;*ext=문자열&quot;이다.  예를  들어,  C  소스</div><div class="line">       파일을 파란색으로 지정하려면, &quot;*.c=34&quot;이다.</div><div class="line"></div><div class="line">       제어  문자는  C에서와  갈이  `\&apos;문자로  시작하는  문자를</div><div class="line">       사용하거나, stty와 같이 `^&apos;문자로 시작하는 문자를 사용할</div><div class="line">       수 있다. C 스타일일 경우는 \e는  Esc,  \_  공백문자,  \?</div><div class="line">       Delete  이다.  추가로, \ escape 문자는 \, ^, :, =의 초기</div><div class="line">       처리 방식을 무시하는데 사용될 수 있다.</div><div class="line"></div><div class="line">       각 파일은 &lt;lc&gt; &lt;색깔값&gt; &lt;rc&gt; &lt;파일이름&gt; &lt;ec&gt; 형태로 지정</div><div class="line">       된다.  만약  &lt;ec&gt; 코드를 지엉하지 않으면, &lt;lc&gt; &lt;no&gt; &lt;rc&gt;</div><div class="line">       가 대치된다. 이 방법은 보다 많은 변환을 하지만  일반적인</div><div class="line">       방법은  아니다. 왼쪽, 오른쪽, 마지막 코드는 일반적인 ISO</div><div class="line">       6429 코드를 지원하지 않는 터미날을  위한  값으로  특별한</div><div class="line">       경우가 아니면, 사용할 필요가 없다.</div><div class="line"></div><div class="line">       ISO  6429  코드일  경우  사용될  수 있는 코드값은 다음과</div><div class="line">       같다.  (물론 lc, rc, ec 값은 제외된다.)</div><div class="line"></div><div class="line">          0     초기 색깔로 다시 돌린다.</div><div class="line">          1     강조색</div><div class="line">          4        밑줄</div><div class="line">          5        깜빡이는 글자.</div><div class="line">         30        까만색 전경</div><div class="line">         31        빨강 전경</div><div class="line">         32        녹색 전경</div><div class="line">         33        노랑(또는 갈색) 전경</div><div class="line">         34        파랑 전경</div><div class="line">         35        보라 전경</div><div class="line">         36        청록색 전경</div><div class="line">         37        흰색(또는 회색) 전경</div><div class="line">         40        까만색 배경</div><div class="line">         41        빨강 배경</div><div class="line">         42        녹색 배경</div><div class="line">         43        노랭(또는 갈색) 배경</div><div class="line">         44        파랑 배경</div><div class="line">         45        보라 배경</div><div class="line">         46        청록색 배경</div><div class="line">         47        흰색(또는 회색) 배경</div><div class="line"></div><div class="line">       모든 명령이 모든 시스템이나 디스플레이  장치에서  제대로</div><div class="line">       동작하는 것은 아니다.</div><div class="line"></div><div class="line">       몇 터미날은 초기 마지막코드(ec)가 인식되지 않을 수 있다.</div><div class="line">       만약,  색들을  사용했다면,  no,  fi  값을  0으로  지정해</div><div class="line">       초기값으로 되돌려 놓아야 한다.</div><div class="line"></div><div class="line">BUGS</div><div class="line">       BSD  시스템에서는,   -s 옵션이 HP-UX 시스템으로 부터 NFS</div><div class="line">       마운트된 파일을 위한 파일 크기가 반으로 잘못  보여진다고</div><div class="line">       한다.   HP-UX  시스템에서는,  BSD  시스템으로  부터  NFS</div><div class="line">       마운트된  파일을  위한  파일의  크기가   반대로   두배로</div><div class="line">       나타난다.   이런  현상은  HP-UX ls 풀그림도 마찬가지라고</div><div class="line">       한다.</div><div class="line"></div><div class="line">       영어권 문자셋을 사용할 경우는 별 문제가 없지만, 한국어와</div><div class="line">       같이  2바이트  문자권에서는 자국어로 된 파일 이름을 보기</div><div class="line">       위해 특별한 옵션을 지정해 주어야한다.</div><div class="line">       ``-N --color=tty`` 옵션이 그 옵션이다.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">FSF                    GNU File Utilities                 LS(1)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
            <tag> ls </tag>
            
            <tag> 외부명령어 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[외부명령어]]></title>
      <url>/2017/10/31/centos-%EC%99%B8%EB%B6%80%EB%AA%85%EB%A0%B9%EC%96%B4-1/</url>
      <content type="html"><![CDATA[<h3 id="외부명령어"><a href="#외부명령어" class="headerlink" title="외부명령어"></a>외부명령어</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[solarized_theme적용하기]]></title>
      <url>/2017/10/31/vim-solarized-theme%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h3 id="터미널-Solarized-Theme-적용"><a href="#터미널-Solarized-Theme-적용" class="headerlink" title="터미널 Solarized Theme 적용"></a>터미널 Solarized Theme 적용</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mkdir</span> -p ~/.mysetting/Solarized</div><div class="line"><span class="variable">$cd</span> ~/.mysetting/Solarized</div><div class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/sigurdga/gnome-terminal-colors-solarized.git</div><div class="line"><span class="variable">$cd</span> gnome-terminal-colors-solarized</div><div class="line">$./install.sh</div><div class="line"></div><div class="line">그럼 다음과 같은 순서 대로 물어 물어 옵니다.</div><div class="line">색상 선택: 1번을 선택</div><div class="line">Please select a color scheme:</div><div class="line">1) dark</div><div class="line">2) dark_alternative</div><div class="line">3) light</div><div class="line"><span class="comment">#? 1</span></div><div class="line"></div><div class="line">프로파일 선택: 1번을 선택</div><div class="line">Please select a Gnome Terminal profile:</div><div class="line">1) 이름 없음</div><div class="line"><span class="comment">#? 1</span></div><div class="line"></div><div class="line">You have selected:</div><div class="line"></div><div class="line">  Scheme: dark</div><div class="line">  Profile: 이름 없음 (b1dcc9dd-5262-4d8d-a863-c897e6d979b9)</div><div class="line"></div><div class="line">프로파일을 덮어쓰겠냐고 물으면 yes를 입력</div><div class="line">Are you sure you want to overwrite the selected profile?</div><div class="line">(YES to <span class="built_in">continue</span>) yes</div><div class="line">Confirmation received -- applying settings</div><div class="line"></div><div class="line">A dircolors adapted to solarized can be automatically downloaded.</div><div class="line"></div><div class="line">1) Download seebi<span class="string">' dircolors-solarized: https://github.com/seebi/dircolors-solarized</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">2) [DEFAULT] I don'</span>t need any dircolors.</div><div class="line"></div><div class="line">디렉토리및파일 색상 변경을 설치하겠냐고 물으면 2번을 눌러 설치 안함을 선택.</div><div class="line">Enter your choice : [2] 2</div></pre></td></tr></table></figure>
<hr>
<p>터미널을 종료했다 다시 실행하면 됩니다.</p>
<h3 id="터미널-디렉토리및-파일-색상-설정-CentOS-만"><a href="#터미널-디렉토리및-파일-색상-설정-CentOS-만" class="headerlink" title="터미널 디렉토리및 파일 색상 설정(CentOS 만)"></a>터미널 디렉토리및 파일 색상 설정(CentOS 만)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> ~/.mysetting/solarized</div><div class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/seebi/dircolors-solarized</div><div class="line"></div><div class="line"><span class="variable">$vi</span> ~/.bash_profile</div></pre></td></tr></table></figure>
<p>맨밑에 아래 줄을 붙여 넣으세요.</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span> `dircolors ~/.mysetting/solarized/dircolors-solarized/dircolors.ansi`</div><div class="line"></div><div class="line">:<span class="keyword">wq</span></div></pre></td></tr></table></figure>
<p>터미널을 종료 하고 재실행하면 반영됩니다.<br>또는</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$suource</span> ~/.bash_profile</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
            <tag> vundle </tag>
            
            <tag> solarized </tag>
            
            <tag> theme </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vundle 설치]]></title>
      <url>/2017/10/31/vim-vundle-%EC%84%A4%EC%B9%98/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h3 id="프로그래밍을-위한-vim-세팅"><a href="#프로그래밍을-위한-vim-세팅" class="headerlink" title="프로그래밍을 위한 vim 세팅"></a>프로그래밍을 위한 vim 세팅</h3><h4 id="복사-붙여넣기"><a href="#복사-붙여넣기" class="headerlink" title="복사/붙여넣기"></a>복사/붙여넣기</h4><ul>
<li>vi가 익숙하지 않을 경우 gedit을 이용해도 됩니다.</li>
<li>맥용 virtualbox 5.1.28에서 macos용이 게스트 확장이 안되고 있습니다. 클립보드 공유와 화면크기 자동조정, 마우스 통합등. 맥사용자는 불편하더라도 당분간 아래 방법을 써야 합니다. 아님 paralls, vmware를 이용하는 것도 무방합니다.</li>
<li>centOS에서 브라우저 내용을 복사해서 터미널로 붙여 넣을 때는 <code>Shift+Ctrl+v</code></li>
<li>또는 <code>Alt + 마우스 왼쪽클릭</code> 하면 팝업메뉴가 나옵니다. 붙여넣기 선택</li>
<li>또는 터미널 메뉴의 편집 <code>&gt;</code> 붙여넣기를 선택합니다.</li>
</ul>
<h4 id="git-설치"><a href="#git-설치" class="headerlink" title="git 설치"></a>git 설치</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># centos</span></div><div class="line"><span class="variable">$sudo</span> yum install git</div><div class="line"></div><div class="line"><span class="comment"># ubuntu</span></div><div class="line"><span class="variable">$sudo</span> apt_get install git</div><div class="line"></div><div class="line"><span class="comment"># macos</span></div><div class="line"><span class="variable">$brew</span> install git</div></pre></td></tr></table></figure>
<ul>
<li>sudo 가붙은 명령은 관리자 비밀번호 입력해야 합니다.</li>
</ul>
<h4 id="gvim설치-설치-되어-있다면-통과"><a href="#gvim설치-설치-되어-있다면-통과" class="headerlink" title="gvim설치(설치 되어 있다면 통과)"></a>gvim설치(설치 되어 있다면 통과)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># centos</span></div><div class="line"><span class="variable">$sudo</span> yum install gvim</div><div class="line"></div><div class="line"><span class="comment"># ubuntu</span></div><div class="line"><span class="variable">$sudo</span> apt_get install gvim</div><div class="line"></div><div class="line"><span class="comment"># macos</span></div><div class="line"><span class="variable">$brew</span> install macvim</div></pre></td></tr></table></figure>
<ul>
<li>gvim을 설치하는 이유는 클립보드로 복사, 붙여넣기를 해야 하기 때문입니다.</li>
<li>vim에서 클립보드 내용을 붙여 넣으려면 “+P</li>
<li>vim의 내용을 클립보드로 복사 하려면 “+Y</li>
<li>이 동작은 .vimrc 에 set clipboard=unnamed 를 추가해야 동작 됩니다. 이 후 한꺼번에 추가하도록 하겠습니다.</li>
</ul>
<p>터미널에서 vi를 실행하면 gvim이 실행되도록 .bash_profile을 수정합니다.</p>
<h4 id="bash-profile-수정"><a href="#bash-profile-수정" class="headerlink" title=".bash_profile 수정"></a>.bash_profile 수정</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> ~</div><div class="line"><span class="variable">$vi</span> .bash_profile</div></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">" 마지막에 줄에 아래문장을 붙여 넣습니다.</span></div><div class="line">alias <span class="keyword">vi</span>=<span class="string">"gvim -v"</span></div><div class="line"></div><div class="line">:<span class="keyword">wq</span></div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$source</span> .bash_profile</div></pre></td></tr></table></figure>
<h4 id="vim-디렉토리-생성-및-vundle-clone"><a href="#vim-디렉토리-생성-및-vundle-clone" class="headerlink" title=".vim 디렉토리 생성 및 vundle clone"></a>.vim 디렉토리 생성 및 vundle clone</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="variable">$mkdir</span> -p .vim/bundle</div><div class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure>
<h4 id="vimrc-생성"><a href="#vimrc-생성" class="headerlink" title=".vimrc 생성"></a>.vimrc 생성</h4><p><code>.vimrc</code> 파일을 오픈합니다.</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$<span class="keyword">gvim</span></div><div class="line">:<span class="keyword">e</span> ~/.vimrc</div></pre></td></tr></table></figure>
<p><code>.vimrc</code> 파일이 열리면 아래 내용을 복사해서 붙여 넣습니다.<br>vim에서 붙여넣기 할 때는 편집 메뉴에 있는 붙이기를 선택합니다. </p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">"=================================================</span></div><div class="line"><span class="comment">" Vundle</span></div><div class="line"><span class="comment">" https://github.com/gmarik/vundle</span></div><div class="line"><span class="comment">"=================================================</span></div><div class="line"><span class="keyword">set</span> nocompatible</div><div class="line"><span class="keyword">filetype</span> off</div><div class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></div><div class="line"><span class="keyword">call</span> vundle#begin()</div><div class="line"></div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line">Plugin <span class="string">'tpope/vim-fugitive'</span></div><div class="line"></div><div class="line"><span class="comment">" All of your Plugins must be added before the following line</span></div><div class="line">Plugin <span class="string">'altercation/vim-colors-solarized'</span>  <span class="comment">" solarized 테마</span></div><div class="line">Plugin <span class="string">'scrooloose/nerdtree'</span> <span class="comment">" 파일/폴더관리</span></div><div class="line">Plugin <span class="string">'terryma/vim-multiple-cursors'</span>  <span class="comment">" 멀티커서 </span></div><div class="line">Plugin <span class="string">'kien/ctrlp.vim'</span></div><div class="line"><span class="comment">"==============    SnipMate  =====================  # 코드단축</span></div><div class="line">Plugin <span class="string">'MarcWeber/vim-addon-mw-utils'</span></div><div class="line">Plugin <span class="string">'tomtom/tlib_vim'</span></div><div class="line">Plugin <span class="string">'garbas/vim-snipmate'</span></div><div class="line">Plugin <span class="string">'honza/vim-snippets'</span></div><div class="line"><span class="comment">"=================================================</span></div><div class="line"></div><div class="line">Plugin <span class="string">'davidhalter/jedi-vim'</span>	<span class="comment">"파이썬 ide</span></div><div class="line">Plugin <span class="string">'vim-airline/vim-airline'</span>	<span class="comment">"vim 꾸미기</span></div><div class="line">Plugin <span class="string">'vim-airline/vim-airline-themes'</span>	<span class="comment">"vim 꾸미기 테마</span></div><div class="line">Plugin <span class="string">'tpope/vim-surround'</span>		<span class="comment">"문자 감싸기</span></div><div class="line">Plugin <span class="string">'suan/vim-instant-markdown'</span>  <span class="comment">" 마크다운 미리보기</span></div><div class="line">Plugin <span class="string">'VisIncr'</span>  <span class="comment">" 자동증감01234</span></div><div class="line">Plugin <span class="string">'klen/python-mode'</span> <span class="comment">" ide</span></div><div class="line"><span class="comment">"==============  마크다운   ======================</span></div><div class="line">Plugin <span class="string">'godlygeek/tabular'</span> </div><div class="line">Plugin <span class="string">'plasticboy/vim-markdown'</span></div><div class="line">Plugin <span class="string">'mzlogin/vim-markdown-toc'</span></div><div class="line"><span class="comment">"=================================================</span></div><div class="line"><span class="comment">"Plugin 'joshdick/onedark.vim'</span></div><div class="line"><span class="comment">"Plugin 'vim-pandoc/vim-pandoc'</span></div><div class="line"><span class="comment">"Plugin 'vim-pandoc/vim-pandoc-syntax' </span></div><div class="line"><span class="comment">"Plugin 'junegunn/goyo.vim'</span></div><div class="line"><span class="comment">"=====================================</span></div><div class="line"><span class="string">"Plugin 'dbext.vim' "</span> dbms관리</div><div class="line"><span class="comment">"=====================================</span></div><div class="line"><span class="comment">"</span></div><div class="line"><span class="keyword">call</span> vundle#end()</div><div class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></div><div class="line"><span class="comment">" To ignore plugin indent changes, instead use:</span></div><div class="line"><span class="comment">" filetype plugin on</span></div><div class="line"><span class="comment">"</span></div><div class="line"></div><div class="line"><span class="comment">" Brief help</span></div><div class="line"><span class="comment">" :PluginList       - 설치된 플러그인 목록 보기</span></div><div class="line"><span class="comment">" :PluginInstall    - 플러그인설치; append`!` 추가된 플러그인만 설치</span></div><div class="line"><span class="comment">" :PluginUpdate		- 플러그인 업데이트</span></div><div class="line"><span class="comment">" :PluginSearch foo - 플러그인 검색; append`!` 로컬 캐시를 갱신 </span></div><div class="line"><span class="comment">" :PluginClean      - 플러그인 삭제; append`!` 사용하지 않은 플러그인 삭제</span></div><div class="line"><span class="comment">" .vimrc에 플러그인을 추가했으면</span></div><div class="line"><span class="comment">":w 저장 </span></div><div class="line"><span class="string">":source %  "</span>.vimrc 다시 로드</div><div class="line"><span class="string">":PluginInstall				"</span>플러그인 설치</div><div class="line"><span class="string">" http://vimawesome.com		"</span>플러그인 조회 사이트</div><div class="line"><span class="string">" http://vimcast.org		"</span>강좌</div><div class="line"><span class="string">" see :h vundle				"</span>도움말</div><div class="line"><span class="string">"============================================================="</span></div><div class="line"></div><div class="line"><span class="string">" When started as "</span>evim<span class="comment">", evim.vim will already have done these settings.</span></div><div class="line"><span class="keyword">if</span> <span class="variable">v:progname</span> =~? <span class="string">"evim"</span></div><div class="line">  <span class="keyword">finish</span></div><div class="line"><span class="keyword">endif</span></div><div class="line"></div><div class="line"><span class="comment">" This must be first, because it changes other options as a side effect.</span></div><div class="line"><span class="keyword">set</span> nocompatible</div><div class="line"></div><div class="line"><span class="comment">" allow backspacing over everything in insert mode</span></div><div class="line"><span class="keyword">set</span> backspace=<span class="built_in">indent</span>,eol,start</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">"vms"</span>)</div><div class="line">  <span class="keyword">set</span> nobackup		<span class="comment">" do not keep a backup file, use versions instead</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="keyword">set</span> backup		<span class="comment">" keep a backup file</span></div><div class="line"><span class="keyword">endif</span></div><div class="line"></div><div class="line"><span class="keyword">set</span> <span class="keyword">history</span>=<span class="number">50</span>		<span class="comment">" keep 50 lines of command line history</span></div><div class="line"><span class="keyword">set</span> ruler		    <span class="comment">" show the cursor position all the time</span></div><div class="line"><span class="keyword">set</span> showcmd		    <span class="comment">" display incomplete commands</span></div><div class="line"><span class="keyword">set</span> incsearch		<span class="comment">" do incremental searching</span></div><div class="line"></div><div class="line"><span class="comment">" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries</span></div><div class="line"><span class="string">" let &amp;guioptions = substitute(&amp;guioptions, "</span>t<span class="string">", "</span><span class="string">", "</span>g<span class="comment">")</span></div><div class="line"></div><div class="line"><span class="comment">" Don't use Ex mode, use Q for formatting</span></div><div class="line"><span class="keyword">map</span> Q gq</div><div class="line"></div><div class="line"><span class="comment">" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,</span></div><div class="line"><span class="comment">" so that you can undo CTRL-U after inserting a line break.</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;C-U&gt;</span> <span class="symbol">&lt;C-G&gt;</span><span class="keyword">u</span><span class="symbol">&lt;C-U&gt;</span></div><div class="line"></div><div class="line"><span class="comment">" In many terminal emulators the mouse works just fine, thus enable it.</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">'mouse'</span>)</div><div class="line">  <span class="keyword">set</span> mouse=<span class="keyword">a</span></div><div class="line"><span class="keyword">endif</span></div><div class="line"></div><div class="line"><span class="comment">" Switch syntax highlighting on, when the terminal has colors</span></div><div class="line"><span class="comment">" Also switch on highlighting the last used search pattern.</span></div><div class="line"><span class="keyword">if</span> &amp;t_Co &gt; <span class="number">2</span> || <span class="built_in">has</span>(<span class="string">"gui_running"</span>)</div><div class="line">  <span class="keyword">syntax</span> <span class="keyword">on</span></div><div class="line">  <span class="keyword">set</span> hlsearch</div><div class="line"><span class="keyword">endif</span></div><div class="line"></div><div class="line"><span class="comment">" Only do this part when compiled with support for autocommands.</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">"autocmd"</span>)</div><div class="line"></div><div class="line">  <span class="comment">" Enable file type detection.</span></div><div class="line">  <span class="comment">" Use the default filetype settings, so that mail gets 'tw' set to 72,</span></div><div class="line">  <span class="comment">" 'cindent' is on in C files, etc.</span></div><div class="line">  <span class="comment">" Also load indent files, to automatically do language-dependent indenting.</span></div><div class="line">  <span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></div><div class="line"></div><div class="line">  <span class="comment">" Put these in an autocmd group, so that we can delete them easily.</span></div><div class="line">  <span class="keyword">augroup</span> vimrcEx</div><div class="line">  au!</div><div class="line"></div><div class="line">  <span class="comment">" For all text files set 'textwidth' to 78 characters.</span></div><div class="line">  <span class="keyword">autocmd</span> FileType text <span class="keyword">setlocal</span> textwidth=<span class="number">78</span></div><div class="line"></div><div class="line">  <span class="comment">" When editing a file, always jump to the last known cursor position.</span></div><div class="line">  <span class="comment">" Don't do it when the position is invalid or when inside an event handler</span></div><div class="line">  <span class="comment">" (happens when dropping a file on gvim).</span></div><div class="line">  <span class="comment">" Also don't do it when the mark is in the first line, that is the default</span></div><div class="line">  <span class="comment">" position when opening a file.</span></div><div class="line">  <span class="keyword">autocmd</span> BufReadPost *</div><div class="line">    \ <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">"'\""</span>) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">"'\""</span>) &lt;= <span class="built_in">line</span>(<span class="string">"$"</span>) |</div><div class="line">    \   <span class="keyword">exe</span> <span class="string">"normal! g`\""</span> |</div><div class="line">    \ <span class="keyword">endif</span></div><div class="line"></div><div class="line">  <span class="keyword">augroup</span> END</div><div class="line"></div><div class="line"><span class="keyword">else</span></div><div class="line"></div><div class="line">  <span class="keyword">set</span> autoindent		<span class="comment">" always set autoindenting on</span></div><div class="line"></div><div class="line"><span class="keyword">endif</span> <span class="string">" has("</span><span class="keyword">autocmd</span><span class="comment">")</span></div><div class="line"></div><div class="line"><span class="comment">" Convenient command to see the difference between the current buffer and the</span></div><div class="line"><span class="comment">" file it was loaded from, thus the changes you made.</span></div><div class="line"><span class="comment">" Only define it when not defined already.</span></div><div class="line"><span class="keyword">if</span> !exists(<span class="string">":DiffOrig"</span>)</div><div class="line">  <span class="keyword">command</span> DiffOrig <span class="keyword">vert</span> <span class="keyword">new</span> | <span class="keyword">set</span> bt=nofile | r ++<span class="keyword">edit</span> # | <span class="number">0</span>d_ | <span class="keyword">diffthis</span></div><div class="line">		  \ | <span class="keyword">wincmd</span> <span class="keyword">p</span> | <span class="keyword">diffthis</span></div><div class="line"><span class="keyword">endif</span></div><div class="line"></div><div class="line"><span class="keyword">set</span> <span class="keyword">nu</span>		<span class="comment">" 줄번호를 보여줌</span></div><div class="line"><span class="comment">" 탭설정 하기</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">ts</span>=<span class="number">4</span>	<span class="comment">" 탭의 4의 공백 폭을 </span></div><div class="line"><span class="string">"set sts=4	 "</span>탭을 눌렀을 때 스페이스(<span class="keyword">ascii</span>-<span class="number">0</span>x20) <span class="number">4</span>개가 삽입되도록 합니다.</div><div class="line"><span class="keyword">set</span> <span class="keyword">sw</span>=<span class="number">4</span>	 <span class="comment">"'&lt;'나 '&gt;'키로 줄 전체를 밀거나 당길 때 참조되는 폭입니다.</span></div><div class="line"><span class="string">"set et		 "</span><span class="keyword">set</span> expandtab 탭을 공백으로 바꿈</div><div class="line"><span class="string">"retab		 "</span><span class="keyword">vim</span> 사용중 탭이 공백으로 바뀌지 않은 경우 et를 다시 적용</div><div class="line"><span class="keyword">set</span> bs+=<span class="built_in">indent</span>,eol,start	<span class="comment">"들여쓰기된 스페이스를 지울 때 백스페이스를 여러번 누르지 않도록 하기 위해 sts 설정값만큼 백스페이스가 적용됩니다.</span></div><div class="line"><span class="keyword">set</span> listchars=<span class="keyword">ta</span><span class="variable">b:</span>»\ ,<span class="built_in">extend</span><span class="variable">s:</span>›,precede<span class="variable">s:</span>‹,nbsp:·,trai<span class="variable">l:</span>∙</div><div class="line"><span class="keyword">set</span> showbreak=↪\</div><div class="line"><span class="comment">"========== instant_markdown  ======================</span></div><div class="line"><span class="comment">"마크다운 문서를 작성시 브라우저로 미리 보기</span></div><div class="line"><span class="comment">"let g:instant_markdown_slow = 1</span></div><div class="line"><span class="comment">"자동실행 방지 0</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:instant_markdown_autostart</span> = <span class="number">1</span> </div><div class="line"></div><div class="line"><span class="comment">"============ vim_markdown =========================</span></div><div class="line"><span class="comment">" 마크다운 편집옵션</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:vim_markdown_folding_disabled</span> = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:vim_markdown_toc_autofit</span> = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:vim_markdown_math</span> = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:vim_markdown_frontmatter</span> = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:vim_markdown_toml_frontmatter</span> = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:vim_markdown_json_frontmatter</span> = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">"====================================================</span></div><div class="line"><span class="comment">" 컴파일 , 키맵</span></div><div class="line"><span class="comment">" c언어,pytyon</span></div><div class="line"><span class="comment">" compile and Run</span></div><div class="line"><span class="comment">" java는 eclipse에서 컴파일</span></div><div class="line"><span class="comment">" :명령줄 실행</span></div><div class="line"><span class="comment">" &lt; 백스페이스</span></div><div class="line"><span class="comment">" % 파일명</span></div><div class="line"><span class="comment">" &lt;Enter&gt; 엔터입력&lt;CR&gt;과 동일</span></div><div class="line"><span class="keyword">au</span> FileType <span class="keyword">c</span> <span class="keyword">map</span> <span class="symbol">&lt;F5&gt;</span> :<span class="keyword">w</span><span class="symbol">&lt;Enter&gt;</span>:!gcc % -<span class="keyword">o</span> %&lt;.<span class="keyword">o</span><span class="symbol">&lt;Enter&gt;</span></div><div class="line"><span class="keyword">au</span> FileType <span class="keyword">python</span> <span class="keyword">map</span> <span class="symbol">&lt;F5&gt;</span> :<span class="keyword">w</span><span class="symbol">&lt;Enter&gt;</span>:!python %<span class="symbol">&lt;Enter&gt;</span></div><div class="line"><span class="keyword">au</span> FileType rube <span class="keyword">map</span> <span class="symbol">&lt;F5&gt;</span> :<span class="keyword">w</span><span class="symbol">&lt;Enter&gt;</span>:!rube %<span class="symbol">&lt;Enter&gt;</span></div><div class="line"></div><div class="line"><span class="comment">"외부에서 파일변경시 자동으로 읽어들임</span></div><div class="line"><span class="comment">"이클립스, xcode 사용시 </span></div><div class="line"><span class="keyword">set</span> autoread&lt; </div><div class="line"></div><div class="line"><span class="comment">"gvim설치시, 클립보드사용</span></div><div class="line"><span class="keyword">set</span> clipboard=unnamed</div><div class="line"></div><div class="line"><span class="comment">"===============  airline  ===============</span></div><div class="line"><span class="comment">" 화이트 스페이스 체크 안함. </span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#whitespace#enabled = <span class="number">0</span>		</div><div class="line"><span class="comment">" 확장탭라인을 사용</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#enabled = <span class="number">1</span> </div><div class="line"><span class="comment">" vim-airline 버퍼 목록 켜기</span></div><div class="line"><span class="comment">"let g:airline#extensions#tabline#fnamemod = ':t' </span></div><div class="line"><span class="comment">" vim-airline 버퍼 목록 파일명만 출력</span></div><div class="line"><span class="comment">" let g:airline#extensions#tabline#buffer_nr_show = 1 </span></div><div class="line"><span class="comment">" buffer number를 보여준다</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#buffer_nr_format = <span class="string">'%s:'</span> </div><div class="line"><span class="comment">" buffer number format</span></div><div class="line"><span class="comment">"let g:airline_powerline_fonts = 1</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline_theme</span>=<span class="string">'solarized'</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline_solarized_bg</span>=<span class="string">'dark'</span></div><div class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span></div><div class="line"><span class="keyword">colorscheme</span> solarized</div><div class="line"><span class="keyword">let</span> <span class="variable">g:solarized_termcolors</span>=<span class="number">256</span></div><div class="line"><span class="comment">"===============   airline =================</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> mapleader=<span class="string">","</span>  <span class="comment">" 리더키를 , 로 변경 주석처리하면 원상태</span></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">ex</span> !!$SHELL<span class="symbol">&lt;CR&gt;</span> <span class="comment">",ex로 외부명령을 실행</span></div><div class="line"><span class="comment">"새탭으로 오픈</span></div><div class="line"><span class="comment">"nnoremap &lt;Leader&gt;rc :tabnew $MYVIMRC&lt;CR&gt; </span></div><div class="line"><span class="comment">" 오른쪽에 오픈</span></div><div class="line"><span class="comment">"nnoremap &lt;Leader&gt;rc :rightbelow vnew $MYVIMRC&lt;CR&gt;</span></div><div class="line"><span class="comment">",rc로 .vimrc파일 오픈</span></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>rc :<span class="keyword">e</span> $MYVIMRC<span class="symbol">&lt;CR&gt;</span> </div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>n :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-F&gt;</span> :NERDTreeFind<span class="symbol">&lt;CR&gt;</span></div><div class="line"></div><div class="line"><span class="comment">"================  약어  (abbreviations)  ======================</span></div><div class="line"><span class="comment">" snippet은 tab을 눌러야하고 약어는 자동으로 바뀜</span></div><div class="line"><span class="comment">" snippet은 자동완성, </span></div><div class="line"><span class="comment">"ab la Los Angeles(L.A) 이렇게 사용해야함.</span></div><div class="line"><span class="comment">"한글 약어는 안되는 단어도 있음, 한글 약어가 안될땐 snippet에 추가.</span></div><div class="line"><span class="keyword">ab</span> 컨브 Ctrl+v</div><div class="line"><span class="keyword">ab</span> 컨씨 Ctrl+<span class="keyword">c</span></div><div class="line"><span class="keyword">ab</span> 컨엠 Ctrl+<span class="keyword">m</span></div><div class="line"><span class="keyword">ab</span> 이시 Ctrl+[ <span class="built_in">or</span> \&lt;Esc\&gt;</div><div class="line"><span class="keyword">ab</span> 노모 Normal <span class="keyword">mode</span></div><div class="line"><span class="keyword">ab</span> 커모 Command <span class="keyword">mode</span></div><div class="line"><span class="keyword">ab</span> 비모 Visual <span class="keyword">mode</span></div><div class="line"><span class="keyword">ab</span> 인모 Insert <span class="keyword">mode</span></div><div class="line"><span class="keyword">ab</span> 로렘 정당은 법률이 정하는 바에 의하여 국가의 보호를 받으며, 국가는 법률이 정하는 바에 의하여 정당운영에 필요한 자금을 보조할 수 있다. 대통령의 임기연장 또는 중임변경을 위한 헌법개정은 그 헌법개정 제안 당시의 대통령에 대하여는 효력이 없다. 위원은 탄핵 또는 금고 이상의 형의 선고에 의하지 아니하고는 파면되지 아니한다. 제<span class="number">3</span>항의 승인을 얻지 못한 때에는 그 처분 또는 명령은 그때부터 효력을 상실한다. 이 경우 그 명령에 의하여 개정 또는 폐지되었던 법률은 그 명령이 승인을 얻지 못한 때부터 당연히 효력을 회복한다.</div><div class="line"><span class="keyword">ab</span> 배요일 <span class="string">"월"</span>, <span class="string">"화"</span>, <span class="string">"수"</span>, <span class="string">"목"</span>, <span class="string">"금"</span>, <span class="string">"토"</span>, <span class="string">"일"</span></div><div class="line"><span class="keyword">ab</span> 배코이름 <span class="string">"유재석"</span>, <span class="string">"박명수"</span>, <span class="string">"강호동"</span>, <span class="string">"신동엽"</span>, <span class="string">"박미선"</span></div><div class="line"><span class="keyword">ab</span> 배색깔 <span class="string">"빨강"</span>, <span class="string">"주황"</span>, <span class="string">"노랑"</span>, <span class="string">"초록"</span>, <span class="string">"파랑"</span>, <span class="string">"남"</span>, <span class="string">"보라"</span></div><div class="line"><span class="keyword">ab</span> 브이아이 VI</div><div class="line"><span class="keyword">ab</span> 빔 VIM</div></pre></td></tr></table></figure>
<p>저장하고 .vimrc를 다시 읽어들입니다.</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">w</span></div><div class="line">:<span class="keyword">so</span> %</div></pre></td></tr></table></figure>
<p>오류가 많이 나는데 무시 해도 됩니다. 아직 플러그인 설치가 되지 않아서 발생하는 오류 입니다.<br>플러그인을 설치합니다.</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:PluginInstall</div></pre></td></tr></table></figure>
<p>vim을 종료했다 다시 시작합니다.<br>설치가 완료 되었습니다.</p>
]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
            <tag> bundle </tag>
            
            <tag> Vundle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim의 고급 사용법]]></title>
      <url>/2017/10/31/vim-%EA%B3%A0%EA%B8%89-%EC%82%AC%EC%9A%A9%EB%B2%95/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h3 id="vim-고급-사용법"><a href="#vim-고급-사용법" class="headerlink" title="vim 고급 사용법"></a>vim 고급 사용법</h3><p>고급사용법?</p>
<p>프로그래밍을 하다보면 어쩌다 한번씩 vim을 사용할 때가 있습니다. 서버의 환경변수를 수정할 때…</p>
<p>이럴때는 몇가지 기능만 쓸수 있으면 됩니다. 불편하지만 사용하는데 문제 되지 않습니다. 여기서 조금더 나아가 필수 명령을 숙지 한다면 vim을 다른 어떤 에디터 보다 편하고 빠르게 사용할 수 있습니다.</p>
<p>vim을 메인 에디터로 사용하기 위해 기본으로 알아야 사항을 최소한으로 요약 했읍니다. 물론 전체 기능의 10%도 안되는 내용이지만 아래 내용만 알아도 vim을 사용하는데 큰 불편함을 느끼지 않을 겁니다. 또 알아서 필요한 기능을 찾을 수 있는 레벨까지 올라 갈 겁니다. vim은 모든 사람들이 사용하는 패턴이 틀립니다. 자신만의 사용 패턴을 빨리 찾는 것이 중요합니다.</p>
<h4 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h4><p>vim은 크게 4가지 모드로 동작되어 집니다.</p>
<ul>
<li>Normal Mode</li>
<li>Insert Mode</li>
<li>Visual Mode</li>
<li>Commnd-Line Mode</li>
</ul>
<p>이중에 가장 기본이 되는 모드는 Normal Mode(command mode)라고도 합니다.<br>언제든 <code>Ctrl+[</code> 키를 입력하면 Normal Mode가 됩니다.<br>이곳에서 Insert mode , Visual mode, Command-Line mode 로 이동이 가능합니다. 반대로 각각의 모드에서 모드 전환을 하려면 반드시 Normal mode 로 이동해서 전환 해야 합니다.</p>
<h4 id="Normal-mode"><a href="#Normal-mode" class="headerlink" title="Normal mode"></a>Normal mode</h4><ul>
<li>모드이동 명령<ul>
<li>Normal Mode : <esc>, <code>Ctrl+[</code></esc></li>
<li>Insert Mode : i, I, a, A, o, O</li>
<li>Visual Mode : v, V, Ctrl+v(windows는 Ctrl+q)</li>
<li>Command-line Mode : <code>:</code></li>
</ul>
</li>
<li>커서이동 명령 h: motion.txt<ul>
<li>h, j, k, l : 좌우로 한칸, 위아래로 한줄씩 커서를 이동합니다. 명령앞에 숫자를 입력하면 숫자 만큼 명령을 수행 합니다.<ul>
<li>예) 10l : 오른쪽으로 10칸 이동</li>
<li>예) 10h : 왼쪽으로 10칸 이동</li>
</ul>
</li>
<li>단어단위로 이동 : w, W, b, B, e, gE</li>
<li><code>0, $, ^, [, {, (, ), }, ]</code> : 현재줄의 처음과 끝, 문장의 처음과 끝, 문단의 처음과 끝으로 이동</li>
<li>H, M, L<ul>
<li>H : 화면 맨위로</li>
<li>M : 화면 중간으로</li>
<li>L : 화면 끝으로</li>
</ul>
</li>
<li>gg, nG : 줄단위로 커서를 이동 시킵니다.<ul>
<li>gg는 문서 맨 위로 커서를 이동 시킵니다.</li>
<li>nG는 숫자 위치로 커서를 이동 시킵니다.</li>
</ul>
</li>
</ul>
</li>
<li><p>찾아서 커서 이동하기 명령</p>
<ul>
<li>f, F, t, T, /, ? : 특정 문자, 키워드를 찾아 이동합니다.<ul>
<li>f : 오른쪽으로 문자를 찾아 이동합니다. F는 왼쪽으로 찾아 이동합니다.</li>
<li>t : 오른쪽으로 문자를 찾아 찾은 문자 왼쪽에 커서를 위치 시킵니다. T는 왼쪽에서 찾아 오른쪽에 커서를 위치시킵니다.</li>
<li>/ : /는 키워드를 현재 커서 아래로 모두 찾아 하이라이트 해줍니다. n, N으로 이동 할 수 있습니다. 키워드와 단어는 조금 다릅니다. 키워드는 단어와 공백을 포함합니다.</li>
<li>? : ?는 현재 커서 위로 키워드를 찾아 이동합니다.</li>
</ul>
</li>
</ul>
</li>
<li><p>삭제 명령 :h deleting</p>
<ul>
<li>x, X, d, dd, D<ul>
<li>x는 커서위의 문자를 지웁니다. 또는 범위 설정된 부분을 지웁니다.</li>
<li>X는 커서위의 문자를 지우고 왼쪽문자에 붙입니다.</li>
<li>d는 삭제 대기 명령입니다. 어떻게 삭제할 지를 대기 하고 있습니다. 이동명령과 조합 가능합니다.<ul>
<li>dw : 커서 위치에서 부터 한단어 삭제, 주의 have 란 단어의 a에 커서가 있을 경우 ave만 삭제</li>
<li>d5l : 커서를 기준으로 오른쪽으로 5칸 삭제.</li>
<li>daw : 커서 위치의 단어를 삭제.</li>
<li>nd : d앞에 반복 숫자를 사용할 수 있음. 3dw : 3단어 삭제</li>
<li><code>d$</code> : 커서 위치부터 줄 끝까지 삭제.</li>
<li><code>d0</code> : 커서 위치부터 줄 처음까지 삭제.</li>
<li>dG : 커서 위치부터 마지막 까지 삭제.</li>
<li>dd : 현재줄 모두 삭제.</li>
<li>D : 커서 위치부터 줄끝까지 삭제.<ul>
<li>2D: 현재 커서 위치부터 2줄을 삭제. 현재줄 끝까지 삭제되고 추가로 2줄이 삭제됨.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>바꾸기 명령</p>
<ul>
<li>s, S, c, C</li>
<li>s : 커서위 문자를 지우고 insert mode가 됩니다.</li>
<li>S : 줄 전체를 지우고 insert mode 가 됩니다.</li>
<li>c : 바꾸기 대기 명령, 이동키와 조합 가능</li>
<li>cw : 현재 커서위치 부터 한단어를 지우고 insert mode</li>
<li>caw : 현재 커서위치의 단어를 지우고 insert mdoe</li>
<li>ci’ : ‘’ 안의 문자열을 지우고 insert mode</li>
<li>ca’ : ‘’ 포함해서 지우고 insert mode</li>
<li>ci” : “” 안의 문자열을 지우고 insert mode</li>
<li>ca” : “” 를 포함 문자열을 지우고 insert mode</li>
<li>C : 현재 커서부터 줄 끝까지 지우고 insert mode</li>
</ul>
</li>
<li><p>덮어쓰기 명령</p>
<ul>
<li>r, R</li>
<li>r : 현재 커서위의 1문자를 지우고 insert mode(1문자만), 이동 명령과 조합 가능.</li>
<li>10r : 현재 커서위치의 1문자를 지우고 입력대기(주의 최초r을 10번 반복). </li>
<li>v2lr : 현재 커서 위치부터 2칸을 지우고 입력대기<ul>
<li>==========================================<br>위와 같은 문자를 -로 바꾸려면<br>커서를 처음 =에 위치시키고 <code>v$r-</code></li>
</ul>
</li>
<li>R : 줄전체를 지우고 insert mode</li>
</ul>
</li>
<li><p>복사 명령/붙이기 명령</p>
<ul>
<li>y, yy, Y</li>
<li>y : 복사 대기 명령, 이동키와 조합 가능</li>
<li>3yW : 현재 커서 위치부터 3단어를 복사.</li>
<li>yy : 한줄을 복사.</li>
<li>Y : 현재 커서 줄부터 한줄을 복사.</li>
<li>2Y : 현재 커서 줄부터 2줄을 복사.</li>
<li>p : 현재 커서 뒤에 붙이기. 행을 복사한 경우 아랫줄에 붙여넣음.</li>
<li>P : 현재 커저 앞에 붙이기. 행을 복사한 경우 윗줄에 붙여넣음.<br>(주의)붙이기를 할때 복사 한것이 열을 복사한 것인지, 줄을 복사한 것인지에 따라 기준이 앞, 뒤, 윗줄, 아랫줄로 반영됩니다.</li>
</ul>
</li>
<li><p>스크롤 명령</p>
<ul>
<li>Ctrl+u, Ctrl+d, Ctrl+e, Ctrl+y, Ctrl+f, Ctrl+b<ul>
<li>Ctrl+u : 커서를 중앙에 두고 위로 한화면 스크롤</li>
<li>Ctrl+d : 커서를 중앙에 두고 아래로 한화면 스크롤</li>
<li>Ctrl+e : 한줄씩 위로</li>
<li>Ctrl+y : 한줄씩 아래로</li>
<li>Ctrl+f : 한화면 위로 커서는 화면 상단</li>
<li>Ctrl+b : 한화면 아래로 커서는 화면 하단</li>
</ul>
</li>
</ul>
</li>
<li>접고 펴기 명령 :h fold<ul>
<li>zf : 폴드 생성. 여러줄을 1줄로 압축 zip fold 해줍니다.</li>
<li>zo : 폴드를 열어줍니다. zip open</li>
<li>zc : 폴드를 닫아줍니다.</li>
<li>zd : 현재 위치의 폴드를 삭제해줍니다.</li>
<li>zR : 현재 문서의 모든 폴드 열기.</li>
<li>zM : 현재 문서의 모든 폴드 닫기.</li>
<li>zE : 현재 문서의 모든 폴드 삭제.</li>
<li>zD : 현재 위치의 겹쳐진 폴드 삭제.</li>
</ul>
</li>
</ul>
<h4 id="Insert-Mode"><a href="#Insert-Mode" class="headerlink" title="Insert Mode"></a>Insert Mode</h4><ul>
<li>i, I, a, A, o, O<ul>
<li>i : i명령은 커서 앞에 입력합니다. </li>
<li>I : 줄 처음에 입력을 합니다.</li>
<li>a : 커서 뒤에 입력을 합니다.</li>
<li>A : 줄 끝에 입력을 합니다.</li>
<li>o : 커서 아래에 새줄을 만들고 입력을 합니다.</li>
<li>O : 커서 위에 새줄을 만들고 입력을 합니다.</li>
</ul>
</li>
<li>문자를 지우려면 백스페이스 또는 <code>Ctrl+h</code>를 입력합니다.</li>
<li>단어를 지우려면 <code>Ctrl + w</code></li>
<li>줄을 지우려면 <code>Ctrl + u</code></li>
<li>Insert mode에서 커서이동은 마우스를 사용하거나 Normal Mode에서 하는 것이 편합니다.</li>
<li>단어 단위로 이동하려면 <code>Ctrl+좌우방향키</code></li>
<li>위 아래줄로 이동하려면 <code>Ctrl+gk</code> , <code>Ctrl+gj</code></li>
<li><code>Ctrl+n</code> 커서 이전에 입력한 단어를 모두 보여주고 자동완성 시켜줍니다. <code>Ctrl+p</code>는 후보를 반대로 찾음<ul>
<li>캘리포니아 란 단어를 입력 했었고, 다시 입력하려고 하면 캘 까지만 입력하고 Ctrl + n</li>
</ul>
</li>
</ul>
<h4 id="Visual-Mode"><a href="#Visual-Mode" class="headerlink" title="Visual Mode"></a>Visual Mode</h4><ul>
<li>v, V, Ctrl + V(windows Ctrl+q)</li>
<li>비주얼 모드는 범위를 지정할 때 사용하는 mode 입니다.</li>
<li>v : 라인을 기준으로 범위를 지정합니다. </li>
<li>V : 줄단위로 범위를 지정합니다.(단위가 줄입니다.)</li>
<li>Ctrl + v : 열을 기준으로 범위를 지정합니다.</li>
<li>이동키 또는 마우스로 범위를 지정할 수 있습니다.</li>
</ul>
<h4 id="Command-line-Mode"><a href="#Command-line-Mode" class="headerlink" title="Command-line Mode"></a>Command-line Mode</h4><ul>
<li>파일관리<ul>
<li>w, e, E, pwd, cd <ul>
<li>w : 파일을 저장합니다.</li>
<li>e : 파일을 오픈 합니다. 파일이 존재 하면 open, 없으면 새로 만듦.</li>
<li>E : netrw를 실행 합니다. vim용 파일 관리 매니저 입니다. 종료는 :bd</li>
<li>pwd : 현재 작업 디렉토리를 보여줍니다.</li>
<li>cd : 작업 디렉토리를 이동합니다.</li>
</ul>
</li>
</ul>
</li>
<li><p>버퍼관리</p>
<ul>
<li>ls, bn, bd, bp, b(숫자)<ul>
<li>ls : 버퍼 목록을 보여줍니다.</li>
<li>bn : 다음 버퍼로 이동합니다.</li>
<li>bp : 앞에 있는 버퍼로 이동합니다.</li>
<li>b(숫자) : 숫자에 해당하는 버퍼로 이동합니다. </li>
</ul>
</li>
</ul>
</li>
<li><p>창관리</p>
<ul>
<li>vs, sp, Ctrl+w</li>
<li>vs : 창을 세로로 나누어 줍니다.</li>
<li>sp : 창을 가로로 나누어 줍니다.</li>
<li>Ctrl + w : 찾을 이동합니다. 누를 때마다 창이 전환됩니다.</li>
</ul>
</li>
<li><p>외부명령</p>
<ul>
<li>!</li>
<li>외부명령을 실행 합니다.</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim의 기본사용법]]></title>
      <url>/2017/10/31/vim-%EA%B8%B0%EB%B3%B8%EC%82%AC%EC%9A%A9%EB%B2%95/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h3 id="기본-사용법"><a href="#기본-사용법" class="headerlink" title="기본 사용법"></a>기본 사용법</h3><h4 id="실행하기"><a href="#실행하기" class="headerlink" title="실행하기"></a>실행하기</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vi</span></div></pre></td></tr></table></figure>
<p>콘솔에서 vi를 입력하면 vi가 실행됩니다.</p>
<p>처음 실행이 되면 기본으로 normal mode 되고 이곳에 명령을 입력하면 됩니다.</p>
<p>텍스트를 입력하기 위해 i명령을 입력하면 하단의 상태줄 좌측에 입력하기 라고 변경됩니다.</p>
<p>이제 키보드로 타이핑하는 것이 입력이 됩니다. </p>
<p>텍스트를 입력해 보세요. ^^</p>
<ul>
<li>삭제 : 백스페이스를 누르면 키보드 앞의 1문자가 삭제되어 집니다. Ctrl + h 도 동일합니다.</li>
<li>이동 : 커서키 또는 마우스를 이용해서 이동합니다.</li>
<li>복사 : 마우스로 복사할 영역을 드래그하고 Y를 누릅니다. 이때 자동으로 visual mode 가 됩니다. 선택이 끝나면 자동으로 normal mode 가 됩니다. 다시 입력하려면 i 명령을 입력하세요.</li>
<li>붙여넣기 : 붙여넣기 할 위치에 마우스나 방향키를 이용해 커서를 위치시키고 P를 누릅니다. 다시 입력하려면 i 명령을 입력하세요.</li>
<li>저장하기 : <code>Ctrl + [</code> + <code>:</code> w abc.txt<ul>
<li>저장하기 명령을 내리려면 Command-lind mode로 이동해야 합니다. <code>&lt;Esc&gt;</code> 또는 <code>Ctrl + [</code> 를 누르고 : (콜론)을 입력하면 Command-line mode 로 이동됩니다.</li>
<li>vim 하단에 : 이 표시 되면 w 저장할파일명 을 입력합니다.<ul>
<li>파일명을 한글로 입력하지 마세요.</li>
<li>파일명에 띄어 쓰기를 하지 마세요.</li>
<li>파일명에 특수문자를 넣지 마세요.</li>
<li>컴퓨터를 사용하는 기본 규칙입니다.</li>
<li>파일명을 한글과 공백을 써야 한다면 “한글 파일명.md” 이렇게 써야 합니다.</li>
<li><code>Ctrl + [</code> + <code>:</code>  사용을 추천합니다.</li>
</ul>
</li>
</ul>
</li>
<li>종료 : <code>Ctrl+[</code> + <code>:</code> q</li>
<li>저장한 후 종료 해야 합니다. 저장하지 않고 종료하려면 <code>Ctrl+[</code> + <code>:</code> q!<ul>
<li>종료 명령도 normal mode에서 해야 합니다.</li>
</ul>
</li>
</ul>
<h4 id="파일-수정하기"><a href="#파일-수정하기" class="headerlink" title="파일 수정하기"></a>파일 수정하기</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vi</span> abc.txt</div></pre></td></tr></table></figure>
<ul>
<li>실행시 수정할 파일명을 같이 입력합니다.<br>  이후 사용법은 동일합니다. 입력을 하려면 i 명령을, 이동하려면 커서키나 마우스사용…</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim 실행과 종료]]></title>
      <url>/2017/10/31/vim-%EC%8B%A4%ED%96%89%EA%B3%BC-%EC%A2%85%EB%A3%8C/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h3 id="vim의-실행과-종료"><a href="#vim의-실행과-종료" class="headerlink" title="vim의 실행과 종료"></a>vim의 실행과 종료</h3><h4 id="실행하기"><a href="#실행하기" class="headerlink" title="실행하기"></a>실행하기</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vi</span></div></pre></td></tr></table></figure>
<p>콘솔에서 vi를 입력하면 vi가 실행됩니다.<br>처음 실행이 되면 기본으로 normal mode 되고 이곳에 명령을 입력하면 됩니다.</p>
<p>텍스트를 입력하기 위해 <strong>i명령</strong>을 입력하면 하단의 상태줄 좌측에 입력하기 라고 변경됩니다.<br>이제 키보드로 타이핑하는 것이 입력이 됩니다.<br>텍스트를 입력해 보세요. ^^</p>
<h4 id="시작과-종료하기"><a href="#시작과-종료하기" class="headerlink" title="시작과 종료하기"></a>시작과 종료하기</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">텍스트를 입력하세요.</div><div class="line">백스페이스는 누르면 글자가 지워집니다.</div><div class="line">마우스나 방향키나 마우스로 커서를 이동할 수 있습니다.</div><div class="line"></div><div class="line"><span class="comment">"Ctrl+[ or ``Esc key`` 입력하면 명령모드</span></div><div class="line">:<span class="keyword">w</span> <span class="keyword">abc</span>.txt	<span class="comment">"abc.txt로 저장, 저장하지 않고 종료하려면 :q!</span></div><div class="line">:q			<span class="comment">"종료</span></div></pre></td></tr></table></figure>
<h4 id="수정하기"><a href="#수정하기" class="headerlink" title="수정하기"></a>수정하기</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vi</span> abc.txt</div></pre></td></tr></table></figure>
<p>바로 전에 작성한 파일이 열립니다. </p>
<p>``` vim<br>텍스트를 입력하세요.<br>백스페이스는 누르면 글자가 지워집니다.<br>마우스나 방향키나 마우스로 커서를 이동할 수 있습니다.</p>
<p>텍스트를 추가하거나 수정해 보세요.<br>종료 하는 방법은 똑같습니다.</p>
<p>“Ctrl+[ or <code>Esc key</code> 입력하면 명령모드<br>:w abc.txt    “abc.txt로 저장, 저장하지 않고 종료하려면 :q!<br>:q            “종료<br>``</p>
]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim설치]]></title>
      <url>/2017/10/30/vim-%EC%84%A4%EC%B9%98/</url>
      <content type="html"><![CDATA[<h3 id="vim-설치하기"><a href="#vim-설치하기" class="headerlink" title="vim 설치하기"></a>vim 설치하기</h3><div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<p>대부분의 Unix계열은 기본으로 vim이 설치 되어 있습니다.<br>vim은 별도로 설치 하지 않아도 됩니다.<br>윈도우 계열은 vim.org에서 자신의 운영체제에 맞는 버젼을 다운받아 설치 하면 됩니다.<br>Unix계열은 gui를 사용 한다면 편의상 gvim을 설치하는 것이 좋습니다. 그래야 클립보드를 사용할 수 있습니다.</p>
<p>설치 방법은 아래와 같습니다.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#red hat 계열</span></div><div class="line">$ sudo yum install gvim </div><div class="line"></div><div class="line"><span class="comment"># macos</span></div><div class="line">$ brew install macvim-dev/macvim/macvim</div><div class="line"></div><div class="line"><span class="comment"># debian 계열</span></div><div class="line">$ suso apt-get install gvim</div></pre></td></tr></table></figure>
<p><code>.bash_profile</code> 또는 <code>.zshrc</code>에 다음과 같이 alias를 추가 합니다.</p>
<p><code>sh
alias vi=gvim -v</code></p>
]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[외부명령어]]></title>
      <url>/2017/10/29/centos-%EC%99%B8%EB%B6%80%EB%AA%85%EB%A0%B9%EC%96%B4/</url>
      <content type="html"><![CDATA[<h3 id="외부명령어"><a href="#외부명령어" class="headerlink" title="외부명령어"></a>외부명령어</h3><p>외부 명령어는 명령라기 보다는 프로그램이라고 생각하는 것이 편합니다.<br>운영체제의 기본 기능을 프로그램으로 만들어서 실행 하는 겁니다.</p>
<p>/bin 또는 /usr/bin에 들어 있습니다.</p>
<p>파일관리 : 파일의 목록을 확인하고, 복사하고, 지우고, 링크걸고, 찾고 하는 프로그램등이 있습니다.</p>
<p>보안관리 : 파일의 권한(읽기, 쓰기, 실행)을 바꾸거나 , 소유권을 바꾸는 프로그램이 있습니다.</p>
<p>프로세스관리: 내부명령에 기본으로 포함되어 있고, 외부 명령으로 기능이 확장되거나 관리가 용이 하도록 만든 프로그램들이 있습니다.</p>
<p>서버관리 : ssh, web, ftp, dns, db 등 많은 서버 프로그램이 있으며, 이들 서버를 관리하는 프로그램이 있습니다.</p>
<p>응용프로그램 : 업무를 도와 줄수 있는 워드, 엑셀, 데이타베이스, 그래픽, 사운드 관련 프로그램이 있습니다.</p>
<p>프로그램의 종류가 워낙 많고 사용법 또한 외우기 쉽지 않기 때문에 최대한 man page를 사용하는 것을 추천 합니다.</p>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[내부명령어]]></title>
      <url>/2017/10/29/centos-%EB%82%B4%EB%B6%80%EB%AA%85%EB%A0%B9%EC%96%B4/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h2 id="내부명령어"><a href="#내부명령어" class="headerlink" title="내부명령어"></a>내부명령어</h2><p>내부명령은 Shell에 들어있고 별도 파일로 존재 하지 않는다고 했습니다. 내부명령어는 프로그램 언어 이기 때문에 당연히 변수, 상수, 조건문, 반복문, 배열,등이 있겠죠. 그걸 내부 명령어라고 합니다.</p>
<p>컴퓨터는 명령을 내리면 결과를 돌려 줍니다. 받은 결과를 다른 명령령의 인자로 돌려 줄 수 있다는 것도 꼭 기억하시기 바랍니다.</p>
<p>Terminal에서</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># enable</span></div></pre></td></tr></table></figure>
<p>위와 같이 입력하면 현재 사용자가 쓸수 있는 내부 명령어를 보여 줍니다.<br>권한과 옵션에 따라 더많이 보일 수도 있고 적게 보일 수도 있습니다.</p>
<table>
<thead>
<tr>
<th>.</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th>.</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>:</td>
<td>[</td>
<td>alias</td>
<td>bg</td>
<td>bind</td>
</tr>
<tr>
<td>break</td>
<td>builtin</td>
<td>caller</td>
<td>cd</td>
<td>command</td>
<td>compgen</td>
</tr>
<tr>
<td>complete</td>
<td>compopt</td>
<td>continue</td>
<td>declare</td>
<td>dirs</td>
<td>disown</td>
</tr>
<tr>
<td>echo</td>
<td>enable</td>
<td>eval</td>
<td>exec</td>
<td>exit</td>
<td>export</td>
</tr>
<tr>
<td>fc</td>
<td>fg</td>
<td>getopts</td>
<td>hash</td>
<td>help</td>
<td>history</td>
</tr>
<tr>
<td>jobs</td>
<td>kill</td>
<td>let</td>
<td>local</td>
<td>logout</td>
<td>mapfile</td>
</tr>
<tr>
<td>popd</td>
<td>printf</td>
<td>pushd</td>
<td>pwd</td>
<td>read</td>
<td>readarray</td>
</tr>
<tr>
<td>readonly</td>
<td>return</td>
<td>set</td>
<td>shift</td>
<td>shopt</td>
<td>source</td>
</tr>
<tr>
<td>suspend</td>
<td>test</td>
<td>times</td>
<td>trap</td>
<td>true</td>
<td>type</td>
</tr>
<tr>
<td>typeset</td>
<td>ulimit</td>
<td>umask</td>
<td>unalias</td>
<td>unset</td>
<td>wait</td>
</tr>
<tr>
<td>false</td>
<td></td>
</tr>
</tbody>
</table>
<p>맨 마지막에 위 명령어의 설명이 있습니다. </p>
<p>bash script 명령은 파이프라인과 리다이렉션만 설명하고 bash script를 설명할 때 다루도록 하겠습니다.</p>
<p><strong>cd, pwd, bg, fg, fc, echo, exec, kill, umask, export, source, logout, times, type</strong> 이 정도가 많이 쓰입니다.</p>
<table>
<thead>
<tr>
<th>명령어</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>cd</td>
<td>경로를 이동합니다.</td>
</tr>
<tr>
<td>pwd</td>
<td>현재 위치한 경로를 알려줍니다.</td>
</tr>
<tr>
<td>bg</td>
<td>&amp;를 붙여 실행시 백그라운드로 보냅니다.</td>
</tr>
<tr>
<td></td>
<td>인수가 없으면 백그라운드로 실행되고 있는 프로그램을 포그라운드로 실행합니다.</td>
</tr>
<tr>
<td>fg</td>
<td>백그라운드에서 실행되는 프로그램을 포그라운드로 가져옵니다.</td>
</tr>
<tr>
<td>echo</td>
<td>문자를 출력합니다.</td>
</tr>
<tr>
<td>exec</td>
<td>프로그램을 실행합니다.</td>
</tr>
<tr>
<td>kill</td>
<td>실행되고 있는 프로세스를 종료합니다.</td>
</tr>
<tr>
<td>umask</td>
<td>사용자가 생성하는 파일을 mode로 설정합니다.</td>
</tr>
<tr>
<td>export</td>
<td>환경변수를 등록합니다.</td>
</tr>
<tr>
<td>source</td>
<td>bash script가 있는 파일을 실행합니다.</td>
</tr>
<tr>
<td>logout</td>
<td>현재 사용자를 로그아웃 시킵니다.</td>
</tr>
</tbody>
</table>
<h3 id="파이프라인과-리다이렉션"><a href="#파이프라인과-리다이렉션" class="headerlink" title="파이프라인과 리다이렉션"></a>파이프라인과 리다이렉션</h3><h4 id="파이프라인"><a href="#파이프라인" class="headerlink" title="파이프라인"></a>파이프라인</h4><p><code>|</code> 파이프라인 : 파이프라인을 기준으로 좌측 명령의 결과를 우측의 명령에 인자로 전달합니다.</p>
<h4 id="리다이렉션"><a href="#리다이렉션" class="headerlink" title="리다이렉션"></a>리다이렉션</h4><p><code>&gt;</code> 리다이렉션 : 왼쪽 명령 출력 방향을 오른쪽 옵션으로 바꾸어 줍니다. 옵션은 파일 또는 장치(장치도 파일)<br><code>&lt;</code> 리다이렉션 : 왼쪽 명령 입력 방향을 오른쪽 옵션으로 바꾸어 줍니다. 옵션은 파일 또는 장치(장치도 파일)<br><code>&gt;&gt;</code> 리다이렉션 : 왼쪽 명령 출력 방향을 오른쪽 옵션으로 바꾸어 추가해 줍니다. 옵션은 파일 또는 장치<br><code>&lt;&lt;</code> 리다이렉션 : 왼쪽 명령 입력 방향을 오른쪽 옵션으로 바꾸어 추가해 줍니다. 옵션은 파일 또는 장치</p>
<ul>
<li><p>처음엔 무슨 뜻인지 햇갈릴 겁니다.<br>  프로그램은 순차적으로 실행됩니다. 왼쪽에서 오른쪽으로.<br>  처음 실행되는 프로그램이 출력을 한다면 출력방향을 바꾸어 줍니다.<br>  처음 실행되는 프로그램 입력을 대기한다면 입력방향을 바꾸어 줍니다.</p>
</li>
<li><p>기본 출력방향은 모니터 입니다.</p>
</li>
<li>기본 입력방향은 키보드 입니다.<br><code>0&lt;</code> 표준입력: /dev/stdin 생략가능<br><code>1&gt;</code> 표준출력: /dev/stdout 생략가능<br><code>2&gt;</code> 표준에러출력: /dev/stderr 에러를 출력하기 위해서는 필수.</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$echo</span> <span class="string">"hello"</span></div><div class="line"><span class="variable">$echo</span> <span class="string">"hello"</span> &gt; aaa.txt</div><div class="line"><span class="variable">$cat</span> aaa.txt</div><div class="line">hello</div><div class="line"><span class="variable">$cat</span> &lt; /dev/stdin</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">^C</div></pre></td></tr></table></figure>
<ul>
<li><p>echo는 문자 또는 문자열을 출력해주는 프로그램입니다.<br>기본 방향이 모니터이기 때문에 모니터에 문자열을 출력해 주겠죠.<br>출력 방향을 aaa.txt(파일)로 바꾸면 화면에는 아무것도 출력되지 않고 aaa.txt을 생성해서 파일안에 hello라고 써 넣습니다.</p>
</li>
<li><p>cat이라는 프로그램은 파일을 출력해 주는 외부 명령어 입니다.<br>사용법은 cat 파일명 하면 파일명을 화면으로 출력해 줍니다.<br>입력을 파일로부터 받는다는 겁니다.<br>위 예제는 cat의 입력방향을 표준입력인 키보드로 바꾸어 준겁니다.<br>종료하려면 <code>Ctrl + C</code> 를 입력합니다.</p>
</li>
<li><p>옵션이 파일명이면 파일로 만들어 주거나 파일에 덧붙여 줍니다. xNIX는 장치도 파일입니다. 파이프라인과 리다이렉션은 무척 중요합니다. 지금은 가볍게 이해 정도만 해주세요. 이해가 안되도 넘어 가도 됩니다. </p>
</li>
</ul>
<h3 id="와일드카드"><a href="#와일드카드" class="headerlink" title="와일드카드"></a>와일드카드</h3><table>
<thead>
<tr>
<th>문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>모든 문자</td>
</tr>
<tr>
<td><code>?</code></td>
<td>문자하나</td>
</tr>
<tr>
<td><code>[characters]</code></td>
<td>characters 문자 집합에 포함된 문자</td>
</tr>
<tr>
<td><code>[!characters]</code></td>
<td>characters 문자 집합에 포함 되지 않은 문자</td>
</tr>
<tr>
<td><code>[[:class:]]</code></td>
<td>아래 클래스를 사용</td>
</tr>
<tr>
<td><code>[:alnum:]</code></td>
<td>알파벳과 숫자를 지정</td>
</tr>
<tr>
<td><code>[:alpha:]</code></td>
<td>알파벳 지정</td>
</tr>
<tr>
<td><code>[:digit:]</code></td>
<td>숫자를 지정</td>
</tr>
<tr>
<td><code>[:lower:]</code></td>
<td>소문자</td>
</tr>
<tr>
<td><code>[:upper:]</code></td>
<td>대문자</td>
</tr>
</tbody>
</table>
<p>와일드 카드도 너무 중요한 명령입니다. 지금은 이런것이 있다는 것만 너무 중요한데 그냥 넘어 가는구나 생각만 하세요. ls 명령에서 다시 알아 보겠습니다. </p>
<h3 id="man-page-도움말-보기"><a href="#man-page-도움말-보기" class="headerlink" title="man page 도움말 보기"></a>man page 도움말 보기</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># man cd</span></div><div class="line"><span class="comment"># man pwd</span></div><div class="line"><span class="comment"># man bash</span></div></pre></td></tr></table></figure>
<p>man 명령을 이용해 도움말을 볼 수 있습니다.<br>man 도움말에서 h-key를 누르면 사용법을 볼수 있습니다.<br>q-key를 누르면 종료됩니다. 커서키를 이용해서 위, 아래로 이동하며 스크롤도 할 수 있고, 찾기도 할 수 있습니다.</p>
<hr>
<h1 id="BASH-BUILTIN-명령어-설명"><a href="#BASH-BUILTIN-명령어-설명" class="headerlink" title="BASH BUILTIN 명령어 설명"></a>BASH BUILTIN 명령어 설명</h1><ul>
<li><code>: [인수들]</code> <ul>
<li>아무런 효과도 없다; 인수들을 확장하고 명시된 리다이렉션을 행하는 것을 제외하고 아무 일도 하지 않는다. 종료 상태값 0 을 반환한다.</li>
</ul>
</li>
<li><code>.</code> <ul>
<li>파일명 [인수들] | 현재의 디렉토리를 나타낸다. 인수로는 디렉토리와 파일명이 올수 있다.</li>
</ul>
</li>
<li><code>source 파일명 [인수들]</code> <ul>
<li>파일명 으로부터 명령을 읽어 현재 쉘 환경 안에서 실행한다. 파일명 에서 읽어 수행한 마지막 명령의 종료 상태값을 반환한다. 파일명 에 슬래쉬가 없으면 PATH 변수에 들어있는 경로명을 사용하여 파일명 을 검색한다. PATH 변수에서 찾는 파일이 실행 파일일 필요는 없다. PATH 에서 파일을 찾을 수 없으면 현재 디렉토리를 찾는다. 인수들을 적으면 파일을 실행할 때 위치 매개변수로 사용한다. 그렇지 않으면 위치 매개변수는 변하지 않는다. 스크립트 내에서 종료한 마지막 명령의 상태값을 반환하고(아무 명령도 실행되지 않았으면 0) 파일명 을 찾을 수 없으면 거짓을 반환한다.</li>
</ul>
</li>
<li><p><code>alias [이름[=값] ...]</code> </p>
<ul>
<li>아무런 인수 없이 <code>Alias</code>를 실행하면 표준 출력에 이름=값의 형식으로 앨리어스 목록을 출력해준다. 인수를 제공하면 각각의 이름에 대하여 값을 앨리어스로 정의한다. 값 뒤에 스페이스를 두면 앨리어스 확장 시 그 다음 단어에 대해서도 앨리어스 확장이 가능한지 점검하도록 할 수 있다. 인수 목록에서 값을 주지 않은 이름에 대해서는 앨리어스의 이름과 값을 출력한다. 주어진 이름에 대한 앨리어스가 정의되어 있지 않은 경우가 아니라면 참값을 반환한다.</li>
</ul>
</li>
<li><p><code>bg [작업명세]</code></p>
<ul>
<li><code>&amp;</code> 를 붙여 실행한 것처럼 작업명세가 가리키는 작업을 백그라운드로 보낸다. 작업명세가 없으면 현재 작업에 해당하는 작업이 사용된다. <code>bg</code> 작업명세 는 작업 제어가 불가능한 상태에서 실행하거나, 작업 제어는 가능하지만 작업명세를 찾을 수 없거나 작업 제어 없이 시작한 경우를 제외하고 0 을 반환한다.</li>
</ul>
</li>
<li><p><code>bind [-m 키맵] [-lvd] [-q 이름]</code></p>
</li>
<li><code>bind [-m 키맵] -f 파일명</code> </li>
<li><p><code>bind [-m 키맵] 키시퀀스:함수이름</code> </p>
<ul>
<li>readline 의 현재 키, 함수 바인딩을 표시하거나 readline 함수나 매크로에 키 시퀀스를 결합한다. 바인딩 문법은 .inputrc 의 문법과 같지만 각 바인딩을 개별적인 인수로 전달해야 한다; 예를 들어, ‘“\C-x\C-r”: re-read-init-file’. 옵션을 적는 경우에는 다음과 같은 의미를 가진다:<pre><code>- ``-m`` 키맵 뒤이어 나오는 바인딩에 의해 영향을 받는 키맵으로 키맵 을 사용한다. 가능하 키맵 이름으로는 emacs, emacs-standard, emacs-meta, emacs-ctlx, vi, vi-move, vi-command, 그리고 vi-insert 이 있다. vi는 vi-command와 같다; emacs는 emacs-standard와 같다.
- -l 모든 readline 함수의 이름을 나열한다.
- -v 현재 함수 이름과 바인딩을 나열한다.
- -d 다시 읽을 수 있는 형태로 함수 이름과 바인딩을 덤프한다.
- -f 파일명 filename으로부터 키 바인딩을 읽는다.
- -q 함수 함수를 실행시키는 키에 대하여 알아본다. 알 수 없는 옵션이 주어졌거나 에러가 발생한 경우가 아닐 때에는 0 이 반환된다.
</code></pre></li>
</ul>
</li>
<li><p><code>break [n]</code> </p>
<ul>
<li>for, while, until 루프 안에서 탈출한다. n을 명시하면 n 레벨을 탈출한다. n 은 ≥ 1 여야 한다. n 이 둘러 싸고 있는 루프의 갯수보다 크면 모든 루프를 탈출한다. break 이 실행될 때 루프를 실행 중이 아닌 경우를 제외하고 0 을 반환한다.</li>
</ul>
</li>
<li><p><code>builtin 쉘-내부명령 [인수들]</code> </p>
<ul>
<li>명시한 쉘 내부 명령에 인수들 을 주어 실행하고 종료 상태값을 반환한다. 쉘 내부 명령과 같은 이름의 함수를 정의하고 그 함수 안에서 내부 명령의 기능을 활용하고자 할 때 유용하다. 보통 cd 내부 명령을 이런 식으로 재정의하곤 한다. 쉘-내부명령 이 쉘 내부 명령이 아닐 때 거짓을 반환한다.</li>
</ul>
</li>
<li><p><code>cd [디렉토리]</code> </p>
<ul>
<li>현재 디렉토리를 디렉토리로 변경한다. HOME 변수 값이 기본 디렉토리 값이다. CDPATH 변수는 디렉토리 를 포함하는 디렉토리에 대한 검색 경로를 정의한다. 서로 다른 디렉토리는 콜론(:)으로 구분한다. CDPATH 에 널 디렉토리 이름을 넣으면 현재 디렉토리 즉 <code>.</code>와 같다. 디렉토리 가 슬래쉬(/)로 시작하면 CDPATH 는 사용되지 않는다. 전달인수로 - 를 사용하면 <code>$OLDPWD</code> 와 같다. 성공적으로 디렉토리를 변경하면 참, 그렇지 않으면 거짓을 반환한다.</li>
</ul>
</li>
<li><p><code>command [-pVv] 명령 [인수 ...]</code></p>
<ul>
<li>보통의 쉘 함수 찾아보기를 하지 않고 명령 을 인수 와 함께 실행한다. 내부 명령 또는 PATH 에서 찾을 수 있는 명령만을 실행한다. are executed. If the </li>
<li>-p 옵션을 주면 PATH 의 기본값을 사용하여 명령 에 대한 검색을 하므로 표준 유틸리티를 찾을 수 있도록 보장해 준다. </li>
<li>-V 또는 -v 옵션을 주면 명령 에 대한 설명을 출력한다. -v 옵션은 명령 을 호출할 때 사용할 명령 또는 경로명을 가리키는 간단한 단어를 출력한다; -V 옵션은 좀 더 자세한 설명을 출력한다. – 를 전달 인수로 적으면 나머지 인수에 대한 옵션 점검을 하지 않는다. -V 또는 -v 옵션을 주었을 때 종료 상태값은 명령 이 발견되면 0, 그렇지 않으면 1 이 된다. 두 옵션 모두 없고 에러가 발생하거나 명령 을 찾을 수 없으면 종료 상태값은 127 이 된다. 그렇지 않을 때 command 내부 명령의 종료 상태값은 명령 의 종료 상태값이다.</li>
</ul>
</li>
<li><p><code>continue [n]</code> </p>
<ul>
<li>둘러 싸고 있는 <code>for, while, until</code> 루프의 다음 순차 작업을 재개한다. <code>n</code> 을 명시하면, <code>n</code> 번째 루프를 재개한다. <code>n 은 ≥ 1</code> 여야 한다. <code>n</code> 이 둘러 싸고 있는 루프 갯수보다 크면 가장 바깥쪽의 루프(<code>최상위 레벨</code> 루프)를 재개한다. <code>continue</code> 명령을 실행할 때 쉘이 루프를 실행하고 있지 않은 경우가 아니라면 반환값은 0 이다.</li>
</ul>
</li>
<li><p><code>declare [-frxi] [이름[=값]]</code></p>
</li>
<li><p><code>typeset [-frxi] [이름[=값]]</code></p>
<ul>
<li>변수를 선언하거나 변수에 속성을 부여한다.    아무런 이름도 주어지지 않았을 때에는 변수의 값을 표시한다. 옵션을 사용하여 특정 속성의 변수에 대해서만 출력하도록 제한할 수 있다.<ul>
<li>-f | 함수 이름만 사용</li>
<li>-r | 이름을 읽기 전용으로 만든다. 그 뒤에는 지정문을 사용하여 값을 지정할 수 없다.</li>
<li>-x | 이름을 그 뒤에 나오는 명령에게 환경을 통해 export하도록 한다.</li>
<li>-i | 변수를 정수처럼 취급한다; 변수에 값을 지정하면 산술 평가( 산 이 옵션을 끄려면 <code>-</code> 대신 <code>+</code>를 사용한다. 함수 안에서 사용하면 local 명령처럼 이름을 지역적으로 만든다. 잘못된 옵션을 만났다든지, <code>&quot;-f foo=bar&quot;</code>를 사용하여 함수를 정의하려고 시도했다든지, 이름이 적접한 쉘 변수 이름이 아니라든지, 읽기 전용 변수의 읽기 전용 상태를 해제하려 한다든지, 또는 -f 를 가지고 존재하지 않은 함수를 표시하려 한 경우가 아니라면 반환값은 0 이다.</li>
</ul>
</li>
</ul>
</li>
<li><p><code>dirs [-l] [+/-n]</code></p>
<ul>
<li>현재까지 기억하고 있는 디렉토리 목록을 표시한다. 디렉토리를 목록에 추가할 때에는 pushd 명령을 사용한다; popd 명령은 목록으로부터 최근 디렉토리를 꺼내고 그 디렉토리로 이동하도록 한다.<br>  옵션 | 설명<br>  —|—<br>  <code>+n</code> | 옵션은 아무 옵션 없이 dirs 를 실행했을 때 보이는 목록의 왼쪽부터 세어 n번째 항목을 보여준다. 0 부터 시작한다.<br>  <code>-n</code> | 옵션은 아무 옵션 없이 dirs 를 실행했을 때 보이는 목록의 오른쪽부터 세어 n번째 항목을 보여준다. 0 부터 시작한다.<br>  <code>-l</code> | 긴 목록을 만들어 보여준다; 기본 목록 나열 형식에서는 홈 디렉토리를 나타낼 때 틸드를 사용한다. 틀린 옵션을 주거나 n 이 디렉토리 스택 범위를 넘어서는 경우가 아니라면 반환값은 0 이 된다.</li>
</ul>
</li>
<li><p><code>echo [-neE] [인수 ...]</code></p>
<ul>
<li><p>스페이스로 구분되어 있는 인수들을 출력한다. 반환값은 항상 0 이다.</p>
<ul>
<li>-n을 명시하면 마지막의 개행문자를 출력하지 않는다.</li>
<li>-e 옵션을 주면 백슬래쉬 이스케이프 문자를 해석할 수 있도록 해준다.</li>
<li><p>-E 옵션은 시스템에서 기본적으로 이스케이프 문자를 해석하는 상황이라 할 지라도 이스케이프 문자를 해석하지 않도록 지시한다.</p>
<p>escape 문자| 설명<br>—|—<br><code>\a</code>   |경 고 (벨)<br><code>\b</code>   |백스페이스<br><code>\c</code>   |마지막 개행문자를 생략함<br><code>\f</code>   |폼 피드<br><code>\n</code>   |개행문자<br><code>\r</code>   |캐리지 리턴<br><code>\t</code>   |수평 탭<br><code>\v</code>   |수직 탭<br><code>\\</code>   |백슬래쉬<br><code>\nnn</code> |ASCII 코드가 nnn (8진수)인 문자</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><code>enable [-n] [|-all] [이름 ...]</code></p>
<ul>
<li>쉘 내부 명령을 켜거나 끈다. 이 기능을 사용하면 쉘 내부 명령과 같은 이름을 갖는 디스크 명령에 대하여 완전한 경로명을 적지 않고도 실행할 수 있다. -n을 사용하면 각 이름의 사용을 끈다; 그렇지 않으면 이름의 사용을 켠다. 예를 들어, 쉘 내부 명령 버전 대신 PATH 에서 찾을 수 있는 test 바이너리를 사용하려면 <code>enable -n test</code> 라고 실행한다. 인수가 없으면 사용 가능한 모든 쉘 내부 명령 목록을 출력한다. -n만 주면 사용 불능 상태의 내부 명령 목록을 출력한다. -all만 주면 모두 내부 명령에 대하여 가능, 불가능 여부를 표시하여 출력해준다. enable 명령은 -all 대신 -a 도 받아들인다. 이름 이 쉘 내부 명령이 아닌 경우를 제외하고 반환값은 0 이다.</li>
</ul>
</li>
<li><p><code>eval [인수 ...]</code></p>
<ul>
<li>모든 인수를 읽어 하나의 명령으로 결합한다. 그 다음 이 명령을 읽어 쉘에서 실행하고 종료 상태값을 eval 명령의 반환값으로 돌려준다. 인수가 하나도 없거나 널 인수이면 eval 은 참을 반환한다.</li>
</ul>
</li>
<li><p><code>exec [[-] 명령 [인수]]</code></p>
<ul>
<li>명령 을 명시하면 그 명령으로 쉘 프로세스를 교체한다. 새로운 프로세스는 만들어지지 않는다. 인수 는 명령의 인수가 된다. 첫번째 인수가 - 이면 쉘은 명령 에 전달하는 0 번째 인수에 대쉬를 넣는다. 이 과정은 로그인이 하는 일과 같다. 어떤 이유에서든 파일을 실행할 수 없으면 쉘 변수 no_exit_on_failed_exec가 존재하여 거짓을 반환하는 경우를 제외하고 비대화형 쉘은 종료한다. 파일을 실행할 수 없을 때 대화형 쉘은 거짓을 반환한다. 명령 을 명시하지 않으면 현재 쉘에서 리다이렉션만 효력을 발휘하고 반환값은 0 이 된다.</li>
</ul>
</li>
<li><p><code>exit [n]</code></p>
<ul>
<li>상태값 n을 가지고 쉘을 종료한다. n 을 생략하면 실행한 마지막 명령의 종료 상태값을 갖는다. 쉘을 종료하기 전에 EXIT 에 대한 트랩(trap) 루틴이 실행된다.</li>
</ul>
</li>
<li><p><code>export [-nf] [이름[=단어]] ...</code></p>
</li>
<li><p><code>export -p</code></p>
<ul>
<li>나열한 이름 을 그 다음에 나오는 명령들의 환경에 자동적으로 export되도록 기억해 둔다.<br>  -f 옵션을 주면 이름 은 함수를 가리킨다. 아무런 이름 도 적지 않거나 또는<br>  -p 옵션을 주면 쉘에서 export되는 모든 이름 목록을 출력한다.<br>  -n 옵션은 주어진 이름의 변수로부터 export 속성을 제거하도록 한다.<br>  – 인수를 주면 그 나머지 인수에 대한 옵션 점검을 하지 않도록 한다. 잘못된 옵션을 만나거나 이름이 적법한 쉘 변수 이름이 아니거나 또는 함수가 아닌 이 상태값 0 을 반환한다.</li>
</ul>
</li>
<li><p><code>fc [-e 편집기이름] [-nlr] [처음] [마지막]</code></p>
</li>
<li><p><code>fc -s [패턴=치환텍스트] [명령]</code></p>
<ul>
<li>명령을 수정한다. 첫번째 형식에서, 명령의 범위는 처음 부터 마지막 범위에 있는 명령을 히스토리 목록에서 선택한다. 처음 과 마지막 은 문자열(그 문자열로 시작하는 최근 명령을 찾고자 할 때) 또는 숫자 (히스토리 목록의 인덱스로 사용하며 음수일 때에는 현재 명령 번호로부터 떨어진 만큼을 뜻한다)로 명시할 수 있다. 마지막 을 명시하지 않으면 현재 명령으로 설정되고(따라서 fc -l -10 은 최근 10 개의 명령을 출력하게 된다) 그렇지 않으면 처음 까지 출력한다. If 처음 을 명시하지 않으면 편집을 위해 이전 명령으로 설정하고 표시를 위해 -16 을 설정한다.<br>-n 플래그를 적으면 나열할 때 명령 번호가 나타나지 않게 한다.<br>-r 플래그는 명령의 표시 순서를 반대로 한다.<br>-l 플래그가 있으면 명령을 표준 출력에 나열한다. 그렇지 않을 때에는 편집기이름 이 가리키는 편집기에서 이 명령들을 포함하는 파일을 열면서 시작한다. 편집기이름 이 없으면 FCEDIT 변수의 값을 사용하며 FCEDIT 가 설정되어 있지 않을 때에는 EDITOR 값을 사용한다. 둘 다 설정되어 있지 않으면 를 사용한다. 편집을 마친 후에는 편집한 명령들이 화면에 표시되고 실행된다.<br>두번째 형태에서, 명령은 패턴이 치환텍스트로 교체된 후에 다시 실행된다. 유용한 앨리어스로는 <code>r=fc -s</code>가 있다. 앨리어스 적용 후 <code>r cc</code> 라고 치면 <code>cc</code>로 시작하는 최근 명령을 실행하고 <code>r</code>이라고 치면 마지막 명령을 다시 실행하게 된다.<br>첫번째 형태를 사용하면 잘못된 옵션이 있거나 처음 또는 마지막 이 히스토리 행 범위를 벗어나지만 않으면 반환값 0 을 갖는다. -e 옵션을 주면 마지막 실행 명령의 값이 반환값이 되거나 명령의 임시 파일에서 오류가 발생하는 경우 실패 값을 가진다. 두번째 형태를 사용하면 명령 이 유효한 히스토리 행을 가리키지 못하여 fc 가 실패를 반환하는 경우가 아니라면 재실행한 명령의 반환값을 반환값으로 사용한다.</li>
</ul>
</li>
<li><p><code>fg [작업스펙]</code> </p>
<ul>
<li>작업스펙 이 가리키는 바를 포그라운드에 놓고 현재 작업이 되도록 한다. 작업스펙 이 존재하지 않으면 쉘에서 현재 작업이라고 부르는 것을 사용한다. 반환값은 포그라운드에 놓인 명령의 반환값이거나 작업 제어 불가능 상태에서 실행된 경우에는 실패이다. 그리고 작업 제어 가능한 상태에서도 작업스펙 이 유효한 작업을 가리키지 않거나 작업스펙 이 작업 제어 없이 실행된 작업을 가리킬 때에도 실패이다.</li>
</ul>
</li>
<li><p><code>getopts 옵션문자열 이름 [인수]</code> </p>
<ul>
<li>getopts 는 위치 매개변수를 파싱하기 위해 사용하는 쉘 프로시져이다.    옵션문자열 은 인식하고자 하는 옵션 문자를 포함한다; 문자 뒤에 콜론이 오면 옵션 다음에 화이트스페이스로 분리된 인수가 온다는 뜻이다. 매번 실행될 때마다, getopts 는 다음 옵션을 쉘 변수 이름 에 넣는다. 이름 이 존재하지 않을 때에는 초기화한다. 그리고 처리할 다음 인수의 인덱스는 OPTIND 변수에 넣는다. OPTIND 는 쉘 또는 쉘 스크립트가 실행될 때마다 1 로 초기화된다. 옵션에서 인수를 필요로 할 때에는 getopts 에서 그 인수를 OPTARG 변수에 넣는다. 쉘이 자동으로 OPTIND 변수를 재설정하지는 않는다;같은 쉘 실행 상태에서 새로운 매개변수 집합을 사용하려면 getopts 를 부를 때마다 수동으로 재설정해 주어야 한다.<br>getopts 는 두 가지 방식으로 오류를 보고할 수 있다. 옵션문자열 의 첫번째 문자가 콜론이면 조용한 오류 보고가 사용된다. 정상 동작 상태에서는 잘못된 옵션 또는 누락된 인수의 경우 증상을 설명하는 메시지가 출력된다. OPTERR 변수를 0 으로 설정하면 옵션문자열 의 첫번째 문자가 콜론이 아니라 하더라도 오류 메시지를 출력하지 않는다.<br>잘못된 옵션을 만나면, getopts 는 이름 에 ? 를 넣고 조용하게 보고하는 상태가 아닌 경우, 오류 메시지를 출력하고 OPTARG 를 unset 한다. getopts 이 조용한 모드에 있는 경우 찾아낸 옵션 문자를 OPTARG 에 넣고 증상 설명 메시지를 출력하지 않는다.<br>필요한 인수를 찾을 수 없으며 getopts 가 조용한 모드에 있지 않을 때에는 물음표를 (?) 이름 에 넣고 OPTARG 를 unset 하며 증상 설명 메시지를 출력한다. getopts 가 조용한 모드에 있으면 콜론을 (:) 이름 에 넣고 OPTARG 을 찾아낸 옵션 문자로 설정한다.<br>getopts 는 보통 위치 매개변수를 파싱하지만 인수 부분에 더 많은 인수를 주면 getopts 는 대신 그 인수를 파싱한다. getopts 는 명시한 것이든 명시하지 않은 것이든 옵션을 찾으면 참을 반환한다. 옵션의 끝이거나 에러가 발생하면 거짓을 반환한다.</li>
</ul>
</li>
<li><p><code>hash [-r] [이름]</code><br>  각 이름 에 대하여, 그 이름이 가리키는 명령의 완전한 경로명을 결정하여 기억해 둔다.<br>  -r 옵션을 주면 기억해 둔 위치를 모두 잊도록 지시한다. 아무런 인수도 적지 않으면 기억해 둔 명령에 대한 정보를 출력한다.<br>  – 라는 인수를 주면 그 뒤에 있는 인수에 점검을 하지 않도록 지시한다. 이름 이 없거나 잘못된 옵션이<br>   주어진 경우가 아닌 경우에는 참을 반환한다.</p>
</li>
<li><p><code>help [패턴]</code><br>  내부명령에 대한 도움말을 출력한다. 패턴 을 적으면, help 는 패턴과 일치하는 모든 명령에 대하여 자세한 도움말을 준다; 패턴을 적지 않으면 모든 내부명령 목록을 출력한다. 패턴과 일치하는 명령이 없는 경우를 제외하고 반환값은 0 이다.</p>
</li>
<li><p><code>history [n]</code></p>
</li>
<li><p><code>history -rwan [filename]</code><br>  옵션이 없으면, 행 번호와 함께 명령 히스토리 목록을 표시한다. <code>*</code> 표시가 있는 행은 수정한 적이 있다는 뜻이다. n 인수를 주면 최근 n 행만을 표시한다. 옵션이 아닌 인수를 적으면, 히스토리 파일 이름으로 간주한다 ;없으면 HISTFILE 변수의 값을 사용한다.<br>   옵션이 있는 경우 다음과 같은 뜻을 갖는다:<br>   -a     히스토리 파일에 <code>새로운</code> 히스토리 행(현재 bash 세션의 시작부터 입력한 히스토리 행)을 추가한다.<br>   -n     히스토리 파일로부터 현재 히스토리 목록으로 아직 읽어들이지 않는 히스토리 행을 읽어들인다. 현재 bash 세션 시작부터 히스토리 파일에 추가한 행을 말한다.<br>   -r     히스토리 파일의 내용을 읽어 현재 히스토리로 사용한다.<br>   -w     현재 히스토리를 히스토리 파일의 기존 내용에 덮어 쓴다. 옵션을 잘못 적거나 히스토리 파일을 읽거나 쓰는 도중 오류가 발생한 경우를 제외하고 반환값은 0 이다.</p>
</li>
<li><p><code>jobs [-lnp] [ 작업스펙 ... ]</code></p>
</li>
<li><p><code>jobs -x 명령 [ 인수 ... ]</code><br>  첫번째 형태는 활동 중인 작업을 나열한다. -l 옵션을 더하면 일반적인 정보에 프로세스 ID까지 더하여 나열하도록 한다; -p 옵션은 작업의 프로세스 그룹 리더의 프로세스 ID만 나열하도록 한다. -n 옵션은 지난 번 통보 이후 상태 변화를 일으킨 작업만 표시하도록 한다. 작업스펙 을 적으면, 작업스펙에 맞는 작업에 대한 정보만으로 출력을 제한한다. 잘못된 옵션을 적거나 잘못된 작업스펙 을 적은 경우가 아니라면 반환값은 0 이다.<br>  -x 옵션을 붙이면, jobs 명령은 명령 또는 인수 안 에서 작업스펙 을 발견할 때마다 해당 프로세스 그룹 ID로 치환하고 명령 에 인수 를 주어 실행하고 그 종료 상태값을 반환한다.</p>
</li>
<li><p><code>kill [-s 시</code></p>
</li>
<li><p><code>kill -l [시그널번호]</code><br>  pid 또는 작업스펙이 가리키는 프로세스에게 시그널스펙 이 가리키는 시그널을 보낸다. 시그널스펙 은 SIGKILL 과 같은 시그널 이름 또는 시그널 번호이다. 시그널스펙 이 시그널 이름인 경우, 대소문자는 구별하지 않으며 SIG 라는 접두어를 써도 되고 쓰지 않아도 된다. 시그널스펙 이 없으면, SIGTERM 이라고 가정한다.<br>  -l 인수를 적으면 시그널 이름을 나열해 준다. -l 이 있을 때에는 어떤 인수가 있으면, 특정 시그널의 이름을 나열하고 반환값은 0 이다.<br>  – 인수를 주면 그 후 나머지 인수에 대한 옵션 점검을 하지 않도록 강제한다. kill 최소한 한 개의 시그널을 성공적으로 전송했으면 참을 반환한다. 오류가 발생하거나 잘못된 옵션을 만나면 거짓을 반환한다.</p>
</li>
<li><p><code>let 인수 [인수 ...]</code></p>
<ul>
<li>각각의 인수 는 계산한 수치 표현식이다.( 산 마지막 인수 를 평가하여 그 결과가 0 이면, let 은 1 을 반환한다; 나머지 경우에는 0 을 반환한다.</li>
</ul>
</li>
<li><p><code>local [이름[=값] ...]</code></p>
<ul>
<li>각 인수에 대하여 이름 이라는 지역 변수를 만들고 값 을 할당한다. local 을 함수 안에서 사용하면, 이름 변수의 가시 범위(scope)를 그 함수와 자식 함수로 제한한다. 피연산자가 없으면, local 은 지역변수 목록을 표준 출력으로 출력한다. local 를 함수 안에서 사용하지 않는 것은 오류이다. local 을 함수 외부에서 사용했거나 잘못된 이름 을 적은 경우가 아니라면 반환 상태값은 0 이다.</li>
</ul>
</li>
<li><p><code>logout</code> </p>
<ul>
<li>로그인 쉘을 마친다.</li>
</ul>
</li>
<li><p><code>popd [+/-n]</code></p>
<ul>
<li>디렉토리 스택에서 항목을 제거한다. 인수가 없으면 스택의 최상위 디렉토리를 제거하고 그 새로운 상위 디렉토리로 cd 한다.</li>
<li><code>+n</code> dirs 명령 결과 보이는 목록의 왼쪽부터 세기 시작하여 n번째 항목을 제거한다. 0 부터 센다. 예를 들어, <code>popd +0</code>는 첫번째 디렉토리를, <code>popd +1</code>는 두번째 디렉토리를 제거한다.</li>
<li><code>-n</code> dirs 명령 결과 보이는 목록의 오른쪽부터 세기 시작하여 n번째 항목을 제거한다. 0 부터 센다. 예를 들어, <code>popd -0</code>는 맨 마지막 디렉토리를, <code>popd -1</code>는 맨 마지막 바로 전 디렉토리를 제거한다.</li>
<li>popd 명령이 성공적이면, dirs 명령도 실행하며 반환 상태값은 0 이다. popd 는 잘못된 옵션을 적거나, 디렉토리 스택이 비어 있거나, 존재하지 않는 디렉토리 스택 항목을 명시하거나 디렉토리 이동이 실패할 경우 거짓을 반환한다.</li>
</ul>
</li>
<li><p><code>pushd [디렉토리]</code></p>
</li>
<li><p><code>pushd +/-n</code></p>
<ul>
<li>디렉토리를 디렉토리 스택의 맨 위에 추가하거나, 스택을 회전시켜 스택의 최 상위 항목을 현재 작업 디렉토리로 만든다. 인수가 없으면, 최상위 두 디렉토리를 교환한다. 디렉토리 스택이 비어 있지 않으면 0을 반환한다.</li>
<li><code>+n</code> n번째 디렉토리( dirs 명령이 보여주는 목록의 맨 왼쪽부터 센다) 이 맨 위에 놓이도록 스택을 회전시킨다. )</li>
<li><code>-n</code> n번째 디렉토리(오른쪽부터 센다)가 맨 위에 놓이도록 스택을 회전시킨다. 디렉토리를 디렉토리 스택 맨 위에 추가하여 새로운 작업 디렉토리가 되도록 한다. </li>
<li>pushd 명령이 성공적이면, dirs 명령도 수행한다. 첫번째 형식을 사용하면, pushd 는 디렉토리 로 cd 하는 것을 실패하지 않는 한, 0 을 반환한다. 두번째 형식을 사용하면, pushd 는 디렉토리 스택이 비어 있거나, 존재하지 않는 디렉토리 스택 항목을 선택하거나, 지정한 새 현재 디렉토리로 이동하는데 실패한 경우가 아니면 0을 반환한다.</li>
</ul>
</li>
<li><p><code>pwd</code></p>
<ul>
<li>현재 디레토리의 절대 경로명을 출력한다. set 내부명령의 -P 옵션이 설정되어 있으면 경로명에 심볼릭 링크를 포함하지 않는다. ( 쉘 현재 디렉토리의 경로명을 읽는 도중 오류가 발생하지 않았다면 결과 반환값은 0이다.</li>
</ul>
</li>
<li><p><code>read [-r] [이름 ...]</code> </p>
<ul>
<li>표준 입력으로부터 한 줄을 읽어들여 그 첫번째 단어를 첫번째 이름 에 할당하고 두번째 단어를 두번째 이름 에 할당하고 나머지 남은 단어들을 마지막 이름 에 할당한다. IFS 에 있는 단어만을 단어 구분자로 인식한다. 아무런 이름 도 적지 않으면 읽어들인 행을 REPLY 변수에 할당한다. 파일 끝 문자를 만난 경우를 제외하고 반환값은 0 이다. </li>
<li>-r 옵션을 주면 백슬래쉬-개행 문자 쌍을 무시하지 않고 백슬래쉬를 행의 일부로 인식한다.</li>
</ul>
</li>
<li><p><code>readonly [-f] [이름 ...]</code></p>
</li>
<li><p><code>readonly -p</code> </p>
<ul>
<li>주어진 이름들을 읽기 전용으로 표기하고 다음에 나올 대입문에 의해 이름들의 값이 바뀌지 않도록 해 준다. </li>
<li>-f 옵션을 더하면, 이름에 해당하는 함수를 읽기 전용으로 표기한다. 아무런 인수도 없거나 </li>
<li>-p 옵션을 주어져 있는 경우에는, 모든 읽기 전용 변수 목록을 출력한다. – 인수는 나머지 인수에 대한 점검을 하지 않도록 지시한다. 잘못된 옵션이 있거나 이름들 중 하나라도 적접한 쉘 변수 이름이 아닌 경우 또는 -f 다음에 나온 이름 이 함수가 아닌 경우를 제외하고는 반환 상태값이 0 이다.</li>
</ul>
</li>
<li><p><code>return [n]</code><br>  함수를 상태 반환값 n 을 갖고 종료하도록 한다. n 을 생략하면 함수 몸체 안에서 실행한 마지막 명령의 반환 상태값을 사용한다. 함수 밖에서 사용했지만 . (source) 명령으로 실행한 스크립트에서 사용하면, 쉘은 그 스크립트 실행을 멈추고 n 또는 스크립트에서 실행한 마지막 명령의 종료 상태값을 스크립트의 종료 상태값으로 반환한다. 함수 밖에서 사용했으며 .[uB85C] 실행한 스크립트가 아니라면 반환 상태값은 거짓이 된다.</p>
</li>
<li><p><code>set [--abefhkmnptuvxldCHP] [-o 옵션] [인수 ...]</code><br>  -a     뒤이어 나올 명령의 환경으로 export하기 위해 수정 또는 생성할 변수를 자동으로 표기한다.<br>  -b     종료한 백그라운드 작업의 상태를 다음 번 주 프롬프트 전에 보여 주는 것이 아니라 즉시 보여 주도록 한다. ( 쉘 섹션에서 notify 참고)<br>  -e     간단한-명령 ( 쉘 종료하면 즉시 종료한다. 만약 실패한 명령이 until 또는 while 루프의 일부, if 문의 일부, <code>&amp;&amp;</code> 의 일부, or <code>⎪⎪</code> 목록의 일부이거나 또는 명령의 반환값이 <code>!</code> 으로 반전되면 종료하지 않는다.<br>  -f     경로명 확장을 하지 않는다.<br>  -h     함수를 정의할 때 함수 명령을 찾아 기억해 둔다. 함수를 실행할 때 함수 명령을 정상적으로 찾아 본다.<br>  -k     명령 이름 앞에 적은 것 뿐 아니라, 모든 키워드 인수를 명령의 환경에 둔다.<br>  -m     모니터(감시) 모드. 작업 제어를 사용한다. 지원하는 시스템에서 실행하는 대화형 쉘에 대해서는 이 플래그가 자동으로 켜진다. ( 작 별도의 프로세스 그룹 안에서 실행되며 실행을 완료하면 종료 상태값을 포함하는 행을 출력한다.<br>  -n     명령을 읽지만 실행하지는 않는다. 쉘 스크립트 문법 오류를 점검할 때 사용할 수 있다. 대화형 쉘에서는 무시한다.<br>  -o 옵션-이름<br>  옵션-이름은 다음 중 한 가지이다:<br>  allexport -a 와 같다.<br>  braceexpand 쉘이 중괄호 확장을 행한다. ( 앞서 나온 중 확 emacs 이맥스 스타일의 명령행 편집 인터페이스를 사용한다. 쉘을 시작할 때 -nolineediting 옵션을 붙이지 않은 한, 쉘이 대화형 모드일 때의 기본값이다.<br>   errexit -e와 같다.<br>   histexpand -H와 같다.<br>   ignoreeof 마치 쉘 명령 <code>IGNOREEOF=10</code>을 실행한 것과 같은 효과를 발휘한다. (앞서 나온 쉘 interactive-comments<br>   어떤 단어를 # 로 시작하면 그 단어와 그 뒤의 모든 문자를 대화형 쉘에서 무시하도록 한다. (앞서 나온 주 monitor -m와 같다.<br>   noclobber -C와 같다.<br>   noexec -n와 같다.<br>   noglob -f와 같다.<br>   nohash -d와 같다.<br>   notify -b와 같다.<br>   nounset -u와 같다.<br>   physical -P와 같다.<br>   posix POSIX 1003.2 표준과 기본적으로 다른 bash의 행동방식을 POSIX 표준을 따르도록 만든다.<br>   privileged -p와 같다.<br>   verbose -v와 같다.<br>   vi     vi 스타일의 명령행 편집 인터페이스를 사용한다.<br>   xtrace -x와 같다.<br>   옵션-이름을 적지 않으면 현재 옵션값을 출력한다.<br>   -p     privileged 모드를 켠다. 이 모드에서는 <code>$ENV</code> 파일을 처리하지 않으며, 쉘 함수를 환경으로부터 상속하지 않는다. 유효 사용자 (그룹) ID와 실제 사용자 (그룹) ID가 일치하지 않으면 시동할 때 자동으로 작동한다. 이 옵션을 끄면 유효 사용자, 그룹 ID를 실제 사용자, 그룹 ID로 설정한다.<br>   -t     명령 하나를 읽어 실행한 후 종료한다.<br>   -u     매개변수 확장 시 설정되어 있지 않은 변수를 오류로 간주한다. 미설정 변수에 대한 확장을 시도하면, 쉘은 에러 메시지를 출력하고 대화형 모드가 아니면 0 아닌 상태를 갖고 종료한다.<br>   -v     쉘에서 행 입력을 받을 때마다 그 입력행을 출력한다.<br>   -x     각각의 간단한-명령 을 확장한 후, bash PS4, 의 확장값을 표시하고 명령과 확장된 인수를 표시한다.<br>   -l     for 이름 [in 단 복원한다. (앞서 나온 쉘<br>   -d     실행하기 위해 참조하는 명령 해쉬를 사용하지 않는다. 보통 명령을 해쉬 테이블에 기억해 두고 일단 발견하면 다시는 참조할 필요 없다.<br>   -C     쉘 명령 <code>noclobber=</code>을 실행한 것과 같은 효력을 발휘한다. (앞서 나온 쉘<br>   -H     ! 스타일의 히스토리 치환을 사용한다. 쉘이 대화형 모드이면 기본으로 켜지는 플래그이다.<br>   -P     설정하면, 현재 디렉토리를 변경하는 cd 와 같은 명령 실행 중 심볼릭 링크를 따르지 않는다.    대신 물리적인 디렉토리를 사용한다.<br>   –     이 플래그 뒤에 아무런 인수도 나오지 않으면 위치 매개변수를 unset한다. 만약 나오면, - 로 시작하는 것이 있다 할 지라도 위치 매개변수를 인수로 설정한다.<br>   <code>-</code>     옵션의 끝을 나타내며, 그 뒤에 나오는 모든 인수들을 위치 매개변수로 설정한다. -x 와 -v 옵션이 꺼진다. 만약 아무런 인수도 없다면, 위치 매개변수는 그대로이다.<br>   다른 식으로 언급하지 않는 한, 이 플래그는 기본적으로 꺼져 있다. - 대신 + 를 사용하면 플래그를 끈다. 쉘을 실행할 때 옵션으로 적을 수 있다. 현재 플래그 상태는 <code>$-</code> 를 보면 알 수 있다. 옵션 인수를 처리한 후, 나머지 n 개의 인수는 위 매개변수의 값으로 간주하고 차례대로 <code>$1, $2, ... $n</code> 에 할당한다. 아무런 옵션도 없고 인수도 없으면 모든 쉘 변수를 출력한다. 잘못된 옵션이 없는 한, 반환 상태값은 항상 참이다.</p>
</li>
<li><p><code>shift [n]</code><br>  n+1 부터의 위치 매개변수 이름을 <code>$1 ....</code> 로 변경한다. <code>$#</code>부터 <code>$#-n+1</code>까지의 매개변수는 unset된다. n 이 0 이면, 매개변수의 변화는 없다. n 이 주어지지 않으면 1 로 간주한다. n 은 <code>$#</code>보다 작거나 같은 음수 아닌 숫자여야 한다. n 이 <code>$#</code>보다 크면, 위치 매개변수의 변화는 없다. n 이 <code>$#</code> 보다 크거나 0 보다 작으면 반환 상태값은 0 보다 크다; 그렇지 않으면 0 이다.</p>
</li>
<li><p><code>suspend [-f]</code><br>  SIGCONT 시그널을 받을 때까지 쉘의 실행을 정지시킨다. -f 옵션은 로그인 쉘이라 할 지라도 불평 메시지를 출력하지 않도록 한다; 어찌 되었든 일시 정지한다. 쉘이 로그인 쉘이면서도 -f 이 없거나 또는 작업 제어 기능이 작동 중인 상태가 아니면 반환 상태값은 0 이 된다.</p>
</li>
<li><p><code>test 표현식</code><br><code>[ 표현식 ]</code><br>  조건 표현식을 평가하여 0 (참) 또는 1 (거짓)을 상태값으로 반환한다. 표현식은 일항 또는 이항 표현식일 수 있다. 일항 표현식은 주로 파일의 상태를 점검할 때 사용한다. 문자열 연산자와 수치 비교 연산자도 있다. 각 연산자와 피연산자는 개별적인 인수 형태를 띠어야 한다. 파일이 /dev/fd/n의 형태일 때에는, 파일 기술자 n를 점검한다.<br>  -b 파일: 파일이 존재하고 블럭 특수 파일이면 참.<br>  -c 파일: 파일이 존재하고 문자 특수 파일이면 참.<br>  -d 파일: 파일이 존재하고 디렉토리이면 참.<br>  -e 파일: 파일이 존재하면 참.<br>  -f 파일: 파일이 존재하고 일반 파일이면 참.<br>  -g 파일: 파일이 존재하고 set-group-id이면 참.<br>  -k 파일: 파일에 <code>스틱키(sticky)</code>비트가 설정되어 있으면 참.<br>  -L f파일: 파일이 존재하고 심볼릭 링크이면 참.<br>  -p 파일: 파일이 존재하고 명명된(named) 파이프이면 참.<br>  -r 파일: 파일이 존재하고 읽을 수 있으면 참.<br>  -s 파일: 파일이 존재하고 그 크기가 0 보다 크면 참.<br>  -S 파일: 파일이 존재하고 소켓이면 참.<br>  -t fd fd (파일 기술자)가 열린 상태이고 터미널이면 참.<br>  -u 파일: 파일이 존재하고 set-user-id 비트가 설정되어 있으면 참.<br>  -w 파일: 파일이 존재하고 쓸 수 있으면 참.<br>  -x 파일: 파일이 존재하고 실행 가능하면 참.<br>  -O 파일: 파일이 존재하고 유효(effective) 사용자 ID의 소유이면 참.<br>  -G 파일: 파일이 존재하고 유효 그룹 ID의 소유이면 참.<br>  파일1 -nt 파일2: 파일1이 (수정 일시에 의거하여) 파일2보다 새로운 파일이면 참.<br>  파일1 -ot 파일2: 파일1이 파일2보다 오래 된 파일이면 참.<br>  파일1 -ef 파일2: 파일1과 파일2가 같은 장치이며 아이노드 번호가 같으면 참.<br>  -z 문자열: 문자열의 길이가 0이면 참.<br>  -n 문자열: 문자열 문자열 의 길이가 0이 아니면 참.<br>  문자열1 = 문자열2: 두 문자열이 같으면 참.<br>  문자열1 != 문자열2: 두 문자열이 같지 않으면 참.<br>  ! 표현식: 표현식 이 거짓이면 참.<br>  표현식1 -a 표현식2: 표현식1 과 표현식2 둘 다 참이면 참.<br>  표현식1 -o 표현식2: 표현식1 또는 표현식2 둘 중 하나가 참이면 참.<br>  인수1 연산자: 위와 같은 수치 이항 연산자는 각각 인수1이 인수2와 같거나, 같지 않거나, 작거나, 작거나 같거나, 크거나, 크거나 같을 때에 참이다. 인수1 과 인수2 는 양의 정수, 음의 정수 또는 -l 문자열과 같이 문자열 의 길이로 평가되는 특별한 표현식이 될 수 있다.</p>
</li>
<li><p><code>times</code> </p>
<ul>
<li>쉘과 쉘로부터 실행한 프로세스들에 대하여 사용자 영역에서의 소모 시간, 시스템 영역에서의 소모 시간을 출력한다. 반환값은 0 이다.</li>
</ul>
</li>
<li><p><code>trap [-l] [인수] [시그널스펙]</code><br>  쉘이 시그널스펙 이 가리키고 있는 시그널을 받으면 인수로 주어진 명령을 읽어 실행하도록 한다. 인수 가 없거나 - 이면, 제시한 모든 시그널에 대하여 원래의 값으로 돌아간다. (즉 쉘을 시작했을 때의 값) 인수가 널 문자열이면 쉘과 쉘이 실행한 명령이 그 시그널을 무시해 버린다. 시그널스펙은 <signal.h>에 정의되어 있으면 시그널 이름이거나, 시그널 번호이다. 시그널스펙 이 EXIT (0) 이면 인수로 주어진 명령을 쉘 종료시에 실행한다. 아무런 인수도 없으면, trap 은 각 시그널 번호와 연관된 명령 목록을 출력한다. -l 옵션을 주면 시그널 이름과 해당하는 번호 목록을 출력한다. – 인수는 그 뒤에 나오는 인수에 대한 옵션 점검을 하지 않도록 한다. 쉘을 시작할 때 무시한 시그널에 대해서는 가로채거나 재설정할 수 없다. 가로 챈 시그널은 자식 프로세스가 새롭게 생성될 때 원래의 값으로 재설정된다. 가로채기 이름 또는 번호가 유효하지 않으면 거짓이고 그렇지 않으면 trap 은 참을 반환한다.</signal.h></p>
</li>
<li><p><code>type [-all] [-type | -path] 이름 [이름 ...]</code><br>  옵션없이 사용하면, 이름 이 명령 이름으로 사용하였을 때 어떻게 해석할 것인지 알려 준다. -type 플래그를 사용하면, type 은 이름 이 각각 앨리어스, 쉘의 예약된 단어, 함수, 내부함수, 또는 디스크 파일일 때, alias, keyword, function, builtin, 그리고 file 중 하나를 출력한다. 이름을 찾을 수 없으면 아무 것도 출력하지 않고 반환값은 거짓이 된다. -path 플래그를 사용하면, type 은 이름 이 명령 이름으로 사용되었을 때 실행될 디스크 파일 이름을 반환하거나, -type 이 file 을 반환하지 않을 때에는 아무 것도 반환하지 않는다. 명령이 해쉬된 상태이면, -path 는 PATH 상에서 처음으로 나오는 파일이 아니라 해쉬 값을 반환할 것이다. -all 플래그를 사용하면, type 은 이름 이라는 이름을 포함하는 실행 파일이 포함된 모든 장소를 포함한다. -path 플래그를 함께 사용하지 않을 때에만, 앨리어스와 함수를 포함한다. -all 을 사용할 때에는 해쉬 명령 테이블을 참조하지 않는다. type 은 -all, -type, 과 -path 대신 각각 -a, -t, 과 -p 를 받아들인다. – 인수는 그 뒤에 나오는 인수에 대한 옵션 점검을 하지 않도록 한다. type 은 인수를 발견했을 때에만 참을 반환하고 발견하지 못했을 때에는 거짓을 반환한다.</p>
</li>
<li><p><code>ulimit [-SHacdfmstpnuv [제한]]</code><br>  Ulimit 은 제한 기능을 지원하는 시스템 상에서 쉘과 쉘이 실행한 프로세스에 대하여 사용 자원을 제한할 수 있도록 해 준다. 제한 값은 각 자원에 대한 단위 값이거나 unlimited 라는 값을 가질 수 있다.    H와 S 옵션은 주어진 자원에 대한 하드(hard) 또는 소프트(soft) 설정을 명시한다. 하드 제한은 일단 설정되면 더 이상 늘릴 수 없다; 한편 소프트 제한은 하드 제한 값까지 늘릴 수도 있다. H 와 S 중 아무 것도 명시되어 있지 않으면 소프트 제한이라고 간주한다. 제한을 생략하면 H 옵션이 없는 한, 자원의 현재 소프트 제한 값을 출력한다. 여러 개의 자원을 명시했다면 값 앞에 제한 이름과 단위를 출력해 준다. 기타 다른 옵션은 다음과 같이 해석한다:<br>  -d     프로세스의 데이터 세그먼트의 최대 크기<br>  -f     쉘이 만들 수 있는 파일의 최대 크기<br>  -m     상주 설정(resident size) 최대 크기<br>  -s     최대 스택 크기<br>  -t     초 단위의 최대 CPU 시간<br>  -p     512 바이트 블럭 단위로 파이프의 크기(설정 가능하지 않을 수 있음)<br>  -n     열 수 있는 파일 기술자의 최대 크기 (대부분의 시스템에서는 설정을 허용하지 않고 오로지 출력만 한다.)<br>  -u     단일 사용자에게 허용하는 프로세스 최대 갯수<br>  -v     쉘에 허용하는 가상 메모리의 최대량<br>  – 인수는 그 뒤에 나오는 인수에 대한 옵션 점검을 금지한다. 제한 이 주어지면, 명시한 자원에 대한 새로운 값이 된다.( -a 옵션은 표시할 때만 사용한다.) 아무런 옵션도 없으면 -f 로 간주한다. 값은 초 단위의 -t, 512 바이트의 블럭 단위인 -p, 그리고 단위가 없는 -n 과 -u 를 제외하고, 1024 바이트 단위로 생각한다. 잘못된 옵션이 있거나, 제한 값에 unlimited 이외의 수치 아닌 인수를 적거나 또는 새로운 제한을 설정하는데 오류가 발생한 경우를 제외하고 반환 상태값은 0 이다.</p>
</li>
<li><p><code>umask [-S] [모드]</code><br>  사용자 파일 생성 매스크를 모드로 설정한다. 모드가 숫자로 시작하면 8 진수로 해석한다. 그렇지 않으면 chmod(1) 와 비슷한 심볼릭 매스크로 해석한다. 모드 를 생략하거나, -S 옵션을 적으면, 현재의 매스크 값을 출력한다. -S 옵션은 매스크 값을 심볼릭 형태로 출력하도록 한다; 기본 출력 형태는 8 진수이다. – 인수는 뒤에 나오는 인수에 대한 옵션 점검을 금지시킨다. 모드를 성공적으로 변경하거나 아무런 모드 값도 적지 않으면 반환 상태값은 0 이고 그 나머지 경우에 대해서는 거짓이다.</p>
</li>
<li><p><code>unalias [-a] [이름 ...]</code><br>  정의된 앨리어스 목록에서 이름을 제거한다. -a 를 적으면 모든 앨리어스 정의를 제거한다. 적은 이름 이 정의되어 있는 앨리어스가 아닌 경우를 제외하고 반환값은 참이다.</p>
</li>
<li><p><code>unset [-fv] [이름 ...]</code><br>  각각의 이름 에 대하여, 해당하는 변수를 제거하거나, -f 옵션의 경우 함수를 제거한다. – 인수는 뒤에 나오는 인수에 대한 옵션 점검을 금지시킨다. PATH, IFS, PPID, PS1, PS2, UID, 그리고 EUID 는 unset할 수 없다. RANDOM, SECONDS, LINENO, 또는 HISTCMD 중 하나를 unset하면, 그 값은 나중에 다시 설정한다 할 지라도 고유의 특성을 잃게 된다. 이름 이 존재하지 않거나 unset할 수 없는 것이 아닌 한, 종료 상태값은 참이다.</p>
</li>
<li><p><code>wait [n]</code><br>  특정 프로세스를 기다리다가 종료값을 반환한다. n 은 프로세스 ID이거나 작업 스펙이다; 작업 스펙이면 그 작업의 파이프라인에 존재하는 모든 프로세스를 기다린다. n 을 적지 않으면, 현재 활성 중인 모든 프로세스를 기다리며 반환값은 0 이다. n 이 존재하지 않는 프로세스 또는 작업을 가리키는 경우 반환 상태값은 127 이다. 그렇지 않으면, 반환값은 기다렸던 마지막 프로세스 또는 작업의 종료 상태값이 된다.</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cd </tag>
            
            <tag> pwd </tag>
            
            <tag> bg </tag>
            
            <tag> fg </tag>
            
            <tag> fc </tag>
            
            <tag> echo </tag>
            
            <tag> exec </tag>
            
            <tag> kill </tag>
            
            <tag> umask </tag>
            
            <tag> export </tag>
            
            <tag> source </tag>
            
            <tag> logout </tag>
            
            <tag> 리다이렉션 </tag>
            
            <tag> 파이프라인 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[내부명령어와 외부명령어]]></title>
      <url>/2017/10/29/centos-%EB%82%B4%EB%B6%80%EB%AA%85%EB%A0%B9%EC%96%B4%EC%99%80-%EC%99%B8%EB%B6%80%EB%AA%85%EB%A0%B9%EC%96%B4/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h3 id="내부명령어와-외부명령어"><a href="#내부명령어와-외부명령어" class="headerlink" title="내부명령어와 외부명령어"></a>내부명령어와 외부명령어</h3><p>리눅스의 명령은 내부명령과 외부명령으로 나뉘어 집니다.</p>
<p>내부명령은 기본적으로 별도의 파일이 존재 하지 않습니다.<br>Shell이라고 하는 인터프리터(명령해석기)에 명령이 들어 있습니다.<br>/bin, /usr/bin에 내부 명령어가 있다면 내부명령어의 기능이 확장된 프로그램입니다. </p>
<p>리눅스의 터미널을 실행하면 커서가 깜빡거립니다. 명령입력 대기를 하고있는 겁니다.<br>사용자가 명령을 내리면 Shell이 해석해서 Kernel에 전달하고<br>kernel은 cpu에 전달하고 cpu는 명령을 처리해서<br>결과를 최종적으로 terminal(모니터, 키보드)에 돌려줍니다.</p>

<ul>
<li>파일 및 디렉토리 관리명령</li>
<li>입출력명령</li>
<li>각종 제어명령</li>
<li>프로세스관리 명령</li>
<li>JOB관리 명령</li>
</ul>
<p>내부명령은 컴퓨터를 운영할 수 있는 최소한의 명령입니다.<br>크게 위와 같이 분류 할 수 있습니다.</p>
<p>외부명령은 OS가 갖추어야할 기본 프로그램 입니다. /bin 과 /usr/bin에 들어 있는 파일들이 외부명령 프로그램들입니다. 내부명령의 기능이 확장되거나 컴퓨터를 관리하기 쉽게 만든 프로그램입니다. </p>
<ul>
<li>파일 및 디렉토리 관리 명령</li>
<li>프로세스 관리 명령</li>
<li>JOB 관리 명령</li>
<li>보안 및 권한관리 명령</li>
<li>각종 service 관리 명령</li>
</ul>
<p>크게 위와 같이 분류 할 수 있습니다.</p>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 외부명령어 </tag>
            
            <tag> 내부명령어 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[디렉토리]]></title>
      <url>/2017/10/29/centos-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<p>/<br>최상위 디렉토리(root directory).</p>
<p>/bin<br>리눅스의 외부명령 파일들이 있습니다.</p>
<p>/boot<br>리눅스 부팅에 관련된 파일들이 있습니다.</p>
<p>/dev<br>디바이스 파일들이 있습니다.</p>
<p>/etc<br>리눅스의 설정 파일들이 있습니다.</p>
<p>/home<br>일반 계정 사용자들의 홈 디렉토리가 있습니다.</p>
<p>/lib<br>라이브러리 파일들이 담겨 있습니다.</p>
<p>/mnt<br>다른 장치들을 마운트하는 디렉토리</p>
<p>/proc<br>프로세스 정보를 담고 있는 파일들이 담겨 있습니다.</p>
<p>/root<br>root의 홈 디렉토리.</p>
<p>/sbin<br>root가 시스템 운영을 위해 필요한 실행 파일이 있습니다.</p>
<p>/tmp<br>임시 디렉토리</p>
<p>/usr<br>사용자들을 위한 대부분의 프로그램들과 설정 파일들이 있습니다.</p>
<p>/var<br>각종 로그 파일 등의 시스템 관리와 관련된 정보들이 저장되는 디렉토리.</p>
<p>/run<br>FHS 관련 데몬과 파일시스템 관련 파일들이 있습니다. 리눅스가 사용하는 디렉토리.</p>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> directory </tag>
            
            <tag> 디렉토리 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[부팅 순서]]></title>
      <url>/2017/10/29/centos-%EB%B6%80%ED%8C%85-%EC%88%9C%EC%84%9C/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h3 id="부팅순서"><a href="#부팅순서" class="headerlink" title="부팅순서"></a>부팅순서</h3>
<h4 id="1-전원on"><a href="#1-전원on" class="headerlink" title="1. 전원on"></a>1. 전원on</h4><p>컴퓨터에 전원이 공급되면 제일 먼저 ROM BIOS의 프로그램들이 자동으로 실행됩니다.</p>
<h4 id="2-BIOS-실행"><a href="#2-BIOS-실행" class="headerlink" title="2. BIOS 실행"></a>2. BIOS 실행</h4><p>BIOS가 실행되면, 컴퓨터가 구동되기 위한 최소한의 장치가 있는지, 이상은 없는지를 테스트하고, 이상이 있다면 Beep음으로 알려줍니다. 이상이 없다면 BIOS에 저장된 부팅장치로 부팅을 시작합니다.</p>
<h4 id="3-부팅장치-선택"><a href="#3-부팅장치-선택" class="headerlink" title="3. 부팅장치 선택"></a>3. 부팅장치 선택</h4><p>부팅장치(CD-ROM, HDD…)로 부터 부트섹터를 읽어 메모리에 적재합니다. 이때 GRUB가 적재되는 겁니다.</p>
<h4 id="4-부트로더-실행"><a href="#4-부트로더-실행" class="headerlink" title="4. 부트로더 실행"></a>4. 부트로더 실행</h4><p>GRUB가 실행되면 부트 메뉴를 보여주고 부팅할 커널을 선택합니다.</p>
<h4 id="5-커널-이미지-적재"><a href="#5-커널-이미지-적재" class="headerlink" title="5. 커널 이미지 적재"></a>5. 커널 이미지 적재</h4><p>선택된 커널 이미지를 MEMORY에 적재합니다.</p>
<h4 id="6-파일시스템-마운트"><a href="#6-파일시스템-마운트" class="headerlink" title="6. 파일시스템 마운트"></a>6. 파일시스템 마운트</h4><p>루트 파일시스템을 적재 합니다.</p>
<h4 id="7-init-프로세스-실행"><a href="#7-init-프로세스-실행" class="headerlink" title="7. init 프로세스 실행"></a>7. init 프로세스 실행</h4><p>시스템을 초기화 하고 사용자가 시스템을 사용할 수 있도록 해줍니다.<br>이때 설정된 각종 DEAMON도 같이 실행 되어집니다.</p>
<p>DAEMON : 종료되지 않고 계속 실행되는 프로그램</p>
<h4 id="8-로그인-및-사용"><a href="#8-로그인-및-사용" class="headerlink" title="8. 로그인 및 사용"></a>8. 로그인 및 사용</h4><p>리눅스시스템은 부팅이 완료되면 각종 설정및 SERVER등이 자동으로 실행 되어 스스로 설정된 명령에 의해 동작됩니다. 시스템에 허가된 사용자는 로그인을 이용해 컴퓨터에접속해서 컴퓨터 사용이 가능합니다.</p>
<hr>
<p>앞으로 위 [그림1]에서 NORTH BRIDGE 와 SOUTH BRIDGE, BIOS를 생략하고 아래 [그림2]로 시스템 설명을 설명할 겁니다. 메모리와 CPU사이에는 NB, SB가 있다는것을 잊으면 안됩니다.</p>
<p>입력장치: RAM, HDD(각종저장장치), 마이크, 키보드, 마우스, 스케너<br>출력장치: RAM, HDD(각종저장장치), 모니터, 스피커, 프린터<br>처리장치: CPU<br></p>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[리눅스의 특징]]></title>
      <url>/2017/10/29/centos-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-%ED%8A%B9%EC%A7%95/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<hr>
<h3 id="리눅스의-특징과-역할"><a href="#리눅스의-특징과-역할" class="headerlink" title="리눅스의 특징과 역할"></a>리눅스의 특징과 역할</h3><h4 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h4><ul>
<li>멀티유저, 멀티태스킹, 멀티 프로세싱, 서버용 운영체제</li>
<li>GUI 와 CUI 를 지원</li>
<li>무료이며, 수많은 소스가 공개 되어 있다.</li>
<li>안정성, 적은 리소스 점유로 mobile, embeded에서도 사용</li>
</ul>
<h4 id="운영체제-역할"><a href="#운영체제-역할" class="headerlink" title="운영체제 역할"></a>운영체제 역할</h4><p>리눅스는 많은 OS(Operating System) 운영체제중의 하나입니다.<br></p>
<p>위에 보는 그림과 같이 컴퓨터는 많은 장치로 구성되어 있습니다. 운영체제는 각각의 장치를 유기적으로 연결해서 컴퓨터를 사용할 수 있도록 해줍니다. SB는 각종 입출력 장치를 제어하고, NB는 PCI BUS 와 SB를 제어 합니다. OS가 없으면 컴퓨터는 동작 하지 않습니다.</p>
<h4 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h4><ul>
<li>파일(디렉토리)관리<ul>
<li>파일생성, 이동, 삭제, 복사</li>
</ul>
</li>
<li>프로세스관리<ul>
<li>프로그램의 실행및 종료,  background, forground</li>
</ul>
</li>
<li>메모리관리<ul>
<li>프로그램의 메모리 적제, 사용, 삭제</li>
</ul>
</li>
<li>스케줄관리(job management)<ul>
<li>프로그램의 실행및 종료를 언제 할지 관리</li>
</ul>
</li>
<li>보안관리<ul>
<li>파일의 소유, 생성, 실행, 읽고쓰기 등…</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[터미널 단축키]]></title>
      <url>/2017/10/29/centos-%ED%84%B0%EB%AF%B8%EB%84%90-%EB%8B%A8%EC%B6%95%ED%82%A4/</url>
      <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div>
<h3 id="터미널-단축키"><a href="#터미널-단축키" class="headerlink" title="터미널 단축키"></a>터미널 단축키</h3><p>xNIX 계열의 터미널에서 공통적으로 사용되는 단축키 입니다.<br>터미널과 shell에 따라 조금씩 다르고, 더많은 단축키가 있지만 아래 키는 대부분 공통적으로 동작 됩니다.</p>
<table>
<thead>
<tr>
<th>단축키</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>TAB</code></td>
<td>자동완성(파일및디렉토리, 명령을 자동완성)</td>
</tr>
<tr>
<td><code>Ctrl+h</code></td>
<td>백스페이와 같습니다.(더 편합니다.)</td>
</tr>
<tr>
<td><code>Ctrl+a</code></td>
<td>처음으로 이동</td>
</tr>
<tr>
<td><code>Ctrl+e</code></td>
<td>행 끝으로 이동</td>
</tr>
<tr>
<td><code>Ctrl+b</code></td>
<td>한 문자 뒤로 이동</td>
</tr>
<tr>
<td><code>Alt+b</code></td>
<td>한 단어 뒤로 이동</td>
</tr>
<tr>
<td><code>Ctrl+f</code></td>
<td>한 문자 앞으로 이동</td>
</tr>
<tr>
<td><code>Alt+f</code></td>
<td>한 단어 앞으로 이동</td>
</tr>
<tr>
<td><code>Ctrl+u</code></td>
<td>현재줄을 삭제합니다.</td>
</tr>
<tr>
<td><code>Ctrl+k</code></td>
<td>커서 위치에서 행 끝까지 삭제합니다.</td>
</tr>
<tr>
<td><code>Ctrl+w</code></td>
<td>커서앞 한단어를 삭제합니다.</td>
</tr>
<tr>
<td><code>Esc+Backspace</code></td>
<td>이전 단어 삭제</td>
</tr>
<tr>
<td><code>Ctrl+y</code></td>
<td>클립보드에서 텍스트를 붙여넣습니다.</td>
</tr>
<tr>
<td><code>Ctrl+l</code></td>
<td>화면 상단에 현재 줄을 남겨두고 화면을 지웁니다.</td>
</tr>
<tr>
<td><code>Ctrl+r</code></td>
<td>증분 검색 기록 을 역순으로 추적</td>
</tr>
<tr>
<td><code>Alt+p</code></td>
<td>비 증분 검색 기록을 역순으로 추적</td>
</tr>
<tr>
<td><code>Ctrl+p</code></td>
<td>비 증분 검색 기록을 역순으로 추적</td>
</tr>
</tbody>
</table>
<p>터미널 단축키는 man page, sed, edlin, vim, python, perl, rube 에서도 동일하게 사용됩니다.</p>
<h3 id="TAB-Ctrl-l-Ctrl-u-Ctrl-w-Ctrl-e-Ctrl-a-Ctrl-p-Ctrl-r"><a href="#TAB-Ctrl-l-Ctrl-u-Ctrl-w-Ctrl-e-Ctrl-a-Ctrl-p-Ctrl-r" class="headerlink" title="TAB, Ctrl+l, Ctrl+u, Ctrl+w, Ctrl+e, Ctrl+a, Ctrl+p, Ctrl+r"></a>TAB, Ctrl+l, Ctrl+u, Ctrl+w, Ctrl+e, Ctrl+a, Ctrl+p, Ctrl+r</h3><p>위 키는 반드시 손에 익히세요.</p>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> terminal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos설치]]></title>
      <url>/2017/10/28/centos-%EC%84%A4%EC%B9%98/</url>
      <content type="html"><![CDATA[<h3 id="Centos설치"><a href="#Centos설치" class="headerlink" title="Centos설치"></a>Centos설치</h3><p>실습의 편의를 위해 VirtualBox에 Centos를 설치하겠습니다.</p>
<h4 id="1-virtualbox-다운로드"><a href="#1-virtualbox-다운로드" class="headerlink" title="1. virtualbox 다운로드"></a>1. virtualbox 다운로드</h4><p><a href="http://virtualbox.org" target="_blank" rel="external">http://virtualbox.org</a> 사이트에서 자신의 운영체제에 맞는 최신 버전의 virtualbox를 다운로드 받습니다.</p>
<h4 id="2-Centos-다운로드"><a href="#2-Centos-다운로드" class="headerlink" title="2. Centos 다운로드"></a>2. Centos 다운로드</h4><p><a href="http://centos.org" target="_blank" rel="external">http://centos.org</a> 에서 centos7 dvd iso 이미지를 다운로드 받습니다.</p>
<h4 id="3-virtualbox-설치"><a href="#3-virtualbox-설치" class="headerlink" title="3. virtualbox 설치"></a>3. virtualbox 설치</h4><p>virtualbox를 설치합니다.</p>
<h4 id="4-virtualbox-실행-및-centos설치"><a href="#4-virtualbox-실행-및-centos설치" class="headerlink" title="4. virtualbox 실행 및 centos설치"></a>4. virtualbox 실행 및 centos설치</h4><p>virtualbox를 실행하고 centos를 설치합니다.</p>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> virtualbox </tag>
            
            <tag> 리눅스설치 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>/font/d2coding.css</url>
      <content type="html"><![CDATA[/* 
 * D2 coding (Korean) http://dev.naver.com/projects/d2coding/
 */
@font-face {
  font-family: 'D2 coding';
  font-style: normal;
  font-weight: 700;
  src: url('d2codingbold.eot');
  src: local('※'), local('D2Coding Bold'),
       url('d2codingbold.eot?#iefix') format('embedded-opentype'),
       url('d2codingbold.woff2') format('x-woff2'),
       url('d2codingbold.woff') format('woff'),
       url('d2codingbold.ttf') format('truetype'),
       url('d2codingbold.svg') format('svg');
}
@font-face {
  font-family: 'D2 coding';
  font-style: normal;
  font-weight: 400;
  src: url('d2coding.eot');
  src: local('※'), local('D2Coding'),
       url('d2coding.eot?#iefix') format('embedded-opentype'),
       url('d2coding.woff2') format('x-woff2'),
       url('d2coding.woff') format('woff'),
       url('d2coding.ttf') format('truetype'),
       url('d2coding.svg') format('svg');
}
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/font/readme.html</url>
      <content type="html"><![CDATA[<h1 id="D2Coding-Web-Fonts"><a href="#D2Coding-Web-Fonts" class="headerlink" title="D2Coding Web Fonts"></a>D2Coding Web Fonts</h1><p><a href="https://raw.githubusercontent.com/Joungkyun/font-d2coding/master/license" target="_blank" rel="external"><img src="https://img.shields.io/badge/License-OFL-blue.svg" alt="D2Coding license"></a></p>
<p>D2Coding Web Font who careted by <a href="http://dev.naver.com/projects/d2coding" target="_blank" rel="external">NAVER Corp</a>.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Copyright &copy; NAVER Copr. All Rights Reserved.</p>
<p>OFL(Open Font License)</p>
<p>THE FONT SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,<br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF<br>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT<br>OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE<br>COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,<br>INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL<br>DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING<br>FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM<br>OTHER DEALINGS IN THE FONT SOFTWARE.</p>
<h2 id="Font-information"><a href="#Font-information" class="headerlink" title="Font information"></a>Font information</h2><h3 id="Weights"><a href="#Weights" class="headerlink" title="Weights"></a>Weights</h3><ul>
<li>Bold (700)</li>
<li>Normal (400)</li>
</ul>
<h3 id="Support-type"><a href="#Support-type" class="headerlink" title="Support type"></a>Support type</h3><ul>
<li>eot</li>
<li>woff</li>
<li>woff2</li>
<li>ttf</li>
</ul>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Insert d2coding.css or create @font-face css to HTML:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/path/d2coding.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">'D2 coding'</span>;</div><div class="line">  <span class="attribute">font-style</span>: normal;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</div><div class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'/path/d2codingbold.eot'</span>);</div><div class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">'※'</span>), <span class="built_in">local</span>(<span class="string">'D2Coding Bold'</span>),</div><div class="line">       <span class="built_in">url</span>(<span class="string">'/path/d2codingbold.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</div><div class="line">       <span class="built_in">url</span>(<span class="string">'/path/d2codingbold.woff2'</span>) <span class="built_in">format</span>(<span class="string">'x-woff2'</span>),</div><div class="line">       <span class="built_in">url</span>(<span class="string">'/path/d2codingbold.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</div><div class="line">       <span class="built_in">url</span>(<span class="string">'/path/d2codingbold.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</div><div class="line">       <span class="built_in">url</span>(<span class="string">'/path/d2codingbold.svg'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</div><div class="line">&#125;</div><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">'D2 coding'</span>;</div><div class="line">  <span class="attribute">font-style</span>: normal;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</div><div class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'/path/d2coding.eot'</span>);</div><div class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">'※'</span>), <span class="built_in">local</span>(<span class="string">'D2Coding'</span>),</div><div class="line">       <span class="built_in">url</span>(<span class="string">'/path/d2coding.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</div><div class="line">       <span class="built_in">url</span>(<span class="string">'/path/d2coding.woff2'</span>) <span class="built_in">format</span>(<span class="string">'x-woff2'</span>),</div><div class="line">       <span class="built_in">url</span>(<span class="string">'/path/d2coding.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</div><div class="line">       <span class="built_in">url</span>(<span class="string">'/path/d2coding.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</div><div class="line">       <span class="built_in">url</span>(<span class="string">'/path/d2coding.svg'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Adding to CSS:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">font-family</span>: D2Coding, <span class="string">'D2 coding'</span>, monosapce;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>first, search local D2Coding font and next call D2 conding web font, and last load monospace</p>
]]></content>
    </entry>
    
  
</search>
