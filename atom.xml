<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KORCOW</title>
  
  <subtitle>HANS</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://korcow.github.io/"/>
  <updated>2017-11-15T20:57:49.493Z</updated>
  <id>http://korcow.github.io/</id>
  
  <author>
    <name>woo-seok Han</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>목차</title>
    <link href="http://korcow.github.io/2017/11/16/python-%EB%AA%A9%EC%B0%A8/"/>
    <id>http://korcow.github.io/2017/11/16/python-목차/</id>
    <published>2017-11-15T20:57:49.493Z</published>
    <updated>2017-11-15T20:57:49.493Z</updated>
    
    <content type="html"><![CDATA[<h3 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h3><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><h4 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h4><h4 id="사칙연산"><a href="#사칙연산" class="headerlink" title="사칙연산"></a>사칙연산</h4><h4 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h4><h4 id="상수"><a href="#상수" class="headerlink" title="상수"></a>상수</h4><h4 id="출력하기"><a href="#출력하기" class="headerlink" title="출력하기"></a>출력하기</h4><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><h4 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h4><h4 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h4><h4 id="입력받기"><a href="#입력받기" class="headerlink" title="입력받기"></a>입력받기</h4><h4 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h4><h4 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h3&gt;&lt;h4 id=&quot;설치&quot;&gt;&lt;a href=&quot;#설치&quot; class=&quot;headerlink&quot; title=&quot;설치&quot;&gt;&lt;/a&gt;설치&lt;/h4&gt;&lt;h4 id
      
    
    </summary>
    
      <category term="Python" scheme="http://korcow.github.io/categories/Python/"/>
    
    
      <category term="python 목차" scheme="http://korcow.github.io/tags/python-%EB%AA%A9%EC%B0%A8/"/>
    
  </entry>
  
  <entry>
    <title>python 설치</title>
    <link href="http://korcow.github.io/2017/11/16/python-%EC%84%A4%EC%B9%98/"/>
    <id>http://korcow.github.io/2017/11/16/python-설치/</id>
    <published>2017-11-15T20:51:50.943Z</published>
    <updated>2017-11-15T20:51:50.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="파이썬의-설치"><a href="#파이썬의-설치" class="headerlink" title="파이썬의 설치"></a>파이썬의 설치</h3><h4 id="윈도우"><a href="#윈도우" class="headerlink" title="윈도우"></a>윈도우</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python.org 사이트에서 자신의 윈도우 버젼에 맞는 python3를 다운 받아 설치</div></pre></td></tr></table></figure><h4 id="맥"><a href="#맥" class="headerlink" title="맥"></a>맥</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install python3</div></pre></td></tr></table></figure><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python3</div><div class="line">apt-get install python3</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;파이썬의-설치&quot;&gt;&lt;a href=&quot;#파이썬의-설치&quot; class=&quot;headerlink&quot; title=&quot;파이썬의 설치&quot;&gt;&lt;/a&gt;파이썬의 설치&lt;/h3&gt;&lt;h4 id=&quot;윈도우&quot;&gt;&lt;a href=&quot;#윈도우&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Python" scheme="http://korcow.github.io/categories/Python/"/>
    
    
      <category term="python 설치" scheme="http://korcow.github.io/tags/python-%EC%84%A4%EC%B9%98/"/>
    
  </entry>
  
  <entry>
    <title>C언어 목차</title>
    <link href="http://korcow.github.io/2017/11/16/c-%EB%AA%A9%EC%B0%A8/"/>
    <id>http://korcow.github.io/2017/11/16/c-목차/</id>
    <published>2017-11-15T20:17:48.954Z</published>
    <updated>2017-11-15T20:17:48.954Z</updated>
    
    <content type="html"><![CDATA[<h3 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h3><h3 id="c언어-기초"><a href="#c언어-기초" class="headerlink" title="c언어 기초"></a>c언어 기초</h3><p>c언어는 가장 기초가 되는 프로그래밍 언어로 c++, objective c, java, python등의 언어로 접근하기 위한 필수 프로그램입니다.</p><p>shell 프로그래밍으로도 프로그램 작성이 가능하지만 c언어가 더 강력하고 빠릅니다.<br>c언어가 빠르고 강력하지만 라이브러리가 많이 부족한 편입니다.<br>한마디로 배울게 많지 않고 라이브러리에 없으면 만들어야 한다는 겁니다. 하지만 쓰면 쓸수록 라이브러리는 많아 집니다. </p><p>이번에 진행하는 c언어는 linux에서 gcc, vim, bash shell을 이용해 진행됩니다. 가장 기본적인 학습법입니다. Terminal이 아닌 윈도우에서 GUI에디터로 프로그래밍을 하면 C언어의 본래 의미를 찾기 힘듭니다. 재미도 없구요. Hello World의 의미도 깨닫지 못합니다. </p><h3 id="실습환경-설정"><a href="#실습환경-설정" class="headerlink" title="실습환경 설정"></a>실습환경 설정</h3><p>(맥과 리눅스 사용자는 Terminal과 vim을 사용할 수 있다는 전제 하에 패스해도 됨.)</p><ol><li>virtualbox에 centos설치 - Centos참조</li><li>gvim 설치및 vimrc 세팅 - vim참조</li><li>vim 기본 사용법 - vim참조</li></ol><h3 id="c언어를-시작하며"><a href="#c언어를-시작하며" class="headerlink" title="c언어를 시작하며"></a>c언어를 시작하며</h3><ol><li>c언어를 배우면서 기본적으로 알아 두면 좋은 내용들을 정리 했습니다.</li><li>c언어는 배울것이 많지 않습니다. 문법 이론만  배운다면 1시간이면 충분합니다. 다만 컴퓨터의 전반에 대해 이해를 하고 있어야 합니다. 별도로 공부를 해야 한다는 겁니다. 컴퓨터의 구조, 동작원리, 통신, 자료구조, 수학 및 통계, 운영체제, 각종 업무에대한 알고리즘…등. c언어는 보조 도구일 뿐입니다. 입력하고, 계산하고, 반복하고, 출력하는 기능밖에 없습니다. c언어에 많은 시간과 노력을 할애하지 마세요. 1일 배우고, 1일 복습하고, 아래 목차를 안보고 쓸수 있으면 됩니다. 그리고 python, java, c++ 기타 원하는 프로그램언어를 메인으로 배우세요.</li></ol><h3 id="화면에-글자-출력하기"><a href="#화면에-글자-출력하기" class="headerlink" title="화면에 글자 출력하기"></a>화면에 글자 출력하기</h3><ol><li>putchar()</li><li>puts()</li><li>printf()</li></ol><h3 id="간단한-계산하기"><a href="#간단한-계산하기" class="headerlink" title="간단한 계산하기"></a>간단한 계산하기</h3><ol><li>printf 함수를 이용한 사칙연산</li><li>변수와 상수를 사용.</li><li>자료형, 연산자</li></ol><h3 id="for-문"><a href="#for-문" class="headerlink" title="for 문"></a>for 문</h3><ol><li>for (초깃값;조건;증감값)</li></ol><h3 id="배열과-포인터"><a href="#배열과-포인터" class="headerlink" title="배열과 포인터"></a>배열과 포인터</h3><ol><li>배열</li><li>문자열</li><li>포인터</li></ol><h3 id="maloc"><a href="#maloc" class="headerlink" title="maloc"></a>maloc</h3><ol><li>메모리의 영역</li><li>메모리의 할당</li></ol><h3 id="키보드로-입력-받기"><a href="#키보드로-입력-받기" class="headerlink" title="키보드로 입력 받기"></a>키보드로 입력 받기</h3><ol><li>getchar()</li><li>gets()</li><li>fgets()</li><li>scanf()<ul><li>공백을 기본 seperator(분리자)로 사용.</li><li><code>%[^\n]s</code> 공백을 포함해서 입력받음.</li></ul></li><li>getch()<ul><li>한문자 입력 받음. 입력버퍼 사용하지 않음. </li></ul></li><li>getche()<ul><li>한문자 입력 받음. 입력버퍼 사용하지 않음. 입력 내용을 출력하지 않음. (비밀번호)<h3 id="if문-사용하기"><a href="#if문-사용하기" class="headerlink" title="if문 사용하기"></a>if문 사용하기</h3></li></ul></li><li>if</li><li>if~else</li><li>if~else if</li></ol><h3 id="while-문"><a href="#while-문" class="headerlink" title="while 문"></a>while 문</h3><ol><li>while</li><li>do~while</li></ol><h3 id="switch-case-문-사용하기"><a href="#switch-case-문-사용하기" class="headerlink" title="switch case 문 사용하기"></a>switch case 문 사용하기</h3><p>switch () case;</p><h3 id="continue-break-goto-label"><a href="#continue-break-goto-label" class="headerlink" title="continue, break, goto, label"></a>continue, break, goto, label</h3><p>강제 제어 이동, 종료</p><h3 id="인자로-입력-받기"><a href="#인자로-입력-받기" class="headerlink" title="인자로 입력 받기"></a>인자로 입력 받기</h3><ol><li>int main(int argc const char *argv[])</li></ol><h3 id="파일-입출력"><a href="#파일-입출력" class="headerlink" title="파일 입출력"></a>파일 입출력</h3><ol><li>fopen, fclose</li></ol><h3 id="함수-만들기"><a href="#함수-만들기" class="headerlink" title="함수 만들기"></a>함수 만들기</h3><ol><li>함수의 기본형</li></ol><h3 id="표준-라이브러리"><a href="#표준-라이브러리" class="headerlink" title="표준 라이브러리"></a>표준 라이브러리</h3><ol><li>표준라이브러리 알아보기</li></ol><h3 id="구조체-사용하기"><a href="#구조체-사용하기" class="headerlink" title="구조체 사용하기"></a>구조체 사용하기</h3><ol><li>여러 자료형이 혼합된 배열.</li></ol><h3 id="유니온"><a href="#유니온" class="headerlink" title="유니온"></a>유니온</h3><ol><li>구조체와 같음. 내부적 처리 방식이 다름.</li><li>구조체 보다 처리 속도가 빠르나, 메모리 소비가 효율적이지 못함.</li></ol><hr><h2 id="응용실습"><a href="#응용실습" class="headerlink" title="응용실습"></a>응용실습</h2><h3 id="curses-ncurses"><a href="#curses-ncurses" class="headerlink" title="curses, ncurses"></a>curses, ncurses</h3><ol><li>터미널 지옥에 빠져 봅시다. ^^;</li></ol><h3 id="oracle-연결"><a href="#oracle-연결" class="headerlink" title="oracle 연결"></a>oracle 연결</h3><p>mysql, maria, mssql, db2… -&gt; ANSI SQL</p><ol><li>오라클 설치</li><li>외부 접속 설정</li><li>기본 사용법</li></ol><h3 id="주소록-만들기"><a href="#주소록-만들기" class="headerlink" title="주소록 만들기"></a>주소록 만들기</h3><ol><li>주소록 만들기(file을 이용한)</li></ol><h3 id="학사관리-만들기"><a href="#학사관리-만들기" class="headerlink" title="학사관리 만들기"></a>학사관리 만들기</h3><ol><li>학사관리 만들기(data base를 이용한)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h3&gt;&lt;h3 id=&quot;c언어-기초&quot;&gt;&lt;a href=&quot;#c언어-기초&quot; class=&quot;headerlink&quot; title=&quot;c언어 기초&quot;&gt;&lt;/a&gt;c
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="c" scheme="http://korcow.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>키보드로 입력받기</title>
    <link href="http://korcow.github.io/2017/11/16/c-%ED%82%A4%EB%B3%B4%EB%93%9C%EB%A1%9C-%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/11/16/c-키보드로-입력받기/</id>
    <published>2017-11-15T16:32:51.210Z</published>
    <updated>2017-11-15T16:32:51.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="getchar"><a href="#getchar" class="headerlink" title="getchar()"></a>getchar()</h3><p>1문자를 입력 받을 수 있습니다. 엔터를 누를때까지 입력을 받습니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 006-getchar-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> chAlpha = getchar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, chAlpha);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>위 프로그램은 1문자를 입력받아서 출력하는 프로그램입니다.<br>1문자만 입력받는 다면 문제가 없습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 006-getchar-02.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> chAlpha1 = getchar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, chAlpha1);</div><div class="line">    <span class="keyword">char</span> chAlpha2 = getchar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, chAlpha2);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 프로그램은 2문자를 입력을 받을 겁니다. 의도는 1번째 문자 입력받고 출력 2번째 문자 입력받고 출력 할 겁니다.<br><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">a</div></pre></td></tr></table></figure></p><p>의도와 다르게 a입력하고 엔터을 쳤는데 그냥 끝나 버립니다.<br>이유는 엔터도 문자로 인식 해버렸기 때문입니다.<br>getchar() 함수는 i/o 버퍼라는 것을 사용합니다.<br>키보드로 문자를 입력 받을때 i/o버퍼에 문자를 담습니다.<br>getchar()함수는 제일 먼저 i/o 버퍼에 문자가 있는지 확인하고 문자가 없으면 입력을 대기하고 문자가 있으면 버퍼에서 문자를 가져옵니다.<br>a만 나온 이유는 키보드를 입력했을때 a와 엔터가 버퍼에 있었기 때문에 a 한문자 엔터 한문자를 가져와 출력했기 때문에 a만 입력받아 출력한것 처럼 보인 겁니다. 다시 확인 해보면 2줄이 개행 된것을 확인 할 수 있습니다.<br>위와 같이 1문자를 입력받고 사용하고, 또 한문자를 입력 받고자 하면 사용후 한번더 getchar()를 하면 엔터를 꺼내옵니다. 사용하지 않으면 그냥 없어져 버립니다.<br>windows에서 fflush(stdin)을 사용하는데 비표준입니다. fflush(stdout)은 표준.<br>입력버퍼를 지워야 할 일이 있다면<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_stdin</span><span class="params">()</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> ch;</div><div class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF &amp;&amp; ch != <span class="string">'\n'</span>) &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>위와 같이 함수로 만들어 호출하세요.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 006-getchar-03.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> chAlpha1 = getchar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, chAlpha1);</div><div class="line">    getchar();<span class="comment">// i/o버퍼에서 엔터를 꺼내옴.</span></div><div class="line">    <span class="keyword">char</span> chAlpha2 = getchar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, chAlpha2);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 006-getchar-04.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_stdin</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> chStr[<span class="number">10</span>] = &#123;<span class="string">' '</span>,&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        chStr[i] = getchar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clear_stdin();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, chStr[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        chStr[i] = getchar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clear_stdin();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, chStr[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_stdin</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> ch;</div><div class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF &amp;&amp; ch != <span class="string">'\n'</span>) &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h3><p>문자열을 입력받습니다. 보안상 사용 금지.<br>overflow가 발행할 수 있음.<br>warning: this program uses gets(), which is unsafe.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-gets-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> cTemp[<span class="number">5</span>];</div><div class="line">    gets(cTemp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, cTemp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h3><p>문자열을 입력 받습니다. gets함수의 overflow 문제를 보완</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-fgets-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> cTemp[<span class="number">5</span>];</div><div class="line">    fgets(cTemp, <span class="keyword">sizeof</span>(cTemp), <span class="built_in">stdin</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, cTemp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h3><p>형식에 따라 문자열을 입력받습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-scanf-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> sName[<span class="number">10</span>];</div><div class="line">    <span class="keyword">int</span> iNum;</div><div class="line">    <span class="keyword">double</span> dHeight;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"나이를 입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;iNum); <span class="comment">// 정수를 입력받음</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"이름을 입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sName);  <span class="comment">// 문자열을 입력받음</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"키를 입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;dHeight);  <span class="comment">// 실수를 입력받음</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"나이는 %d 이고 이름은 %s 입니다.\n"</span>, iNum, sName);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"키는 %.1f\n"</span>, dHeight);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-scanf-02.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> sTemp[<span class="number">1000</span>];</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"문장을  입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sTemp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"입력한 문장은:\n%s\n"</span>, sTemp);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"문장을  입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sTemp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"입력한 문장은:\n%s\n"</span>, sTemp);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>scanf()도 getchar()와 같이 버퍼에서 데이터를 읽어 오기 때문에 getchar()와 동일한 문제가 발생 되며 getchar()와 동일하게  버퍼 문제를 처리 할수 있습니다. 또한 <code>%[^\n]s</code> 포멧으로 공백으로 분리하지 않도록 할 수 도 있습니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-scanf-03.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iKor;</div><div class="line">    <span class="keyword">int</span> iEng;</div><div class="line">    <span class="keyword">int</span> iMath;</div><div class="line">    <span class="keyword">int</span> iSum;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"국어, 영어, 수학 점수를 순서대로 입력해 주세요. :"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;iKor, &amp;iEng, &amp;iMath);</div><div class="line"></div><div class="line">    iSum = iKor + iEng + iMath;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"국어: %d\n"</span>, iKor);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"영어: %d\n"</span>, iEng);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"수학: %d\n"</span>, iMath);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"총점: %d\n"</span>, iSum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>입력을 위와 같이 받게 되면 스페이스와 엔터가 입력 구분자가 됩니다.<br>구분된 값을 입력 받을 때는 명확하게 엔터로 입력받을수 있게 하는 것이 좋습니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-scanf-04.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iKor;</div><div class="line">    <span class="keyword">int</span> iEng;</div><div class="line">    <span class="keyword">int</span> iMath;</div><div class="line">    <span class="keyword">int</span> iSum;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"국어 :"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;iKor);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"영어 :"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;iEng);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"수학 :"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;iMath);</div><div class="line"></div><div class="line">    iSum = iKor + iEng + iMath;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"==================\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"국어: %d\n"</span>, iKor);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"영어: %d\n"</span>, iEng);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"수학: %d\n"</span>, iMath);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"총점: %d\n"</span>, iSum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="getch"><a href="#getch" class="headerlink" title="getch()"></a>getch()</h3><p>getchar()동일하게 1문자를 입력받지만 입력버퍼를 사용하지 않습니다. 엔터를 입력할때까지 입력받는 것이 아니라 키보드를 누르는 순간 처리를 합니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-getch-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> cTemp;</div><div class="line"></div><div class="line">    cTemp = getch();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, cTemp);</div><div class="line">    cTemp = getch();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, cTemp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>getchar()와 같은 버퍼문제가 발생하지 않는다.</p><h3 id="getche"><a href="#getche" class="headerlink" title="getche()"></a>getche()</h3><p>문자를 입력받되 출력을 하지 않습니다.(비밀번호)</p><p><conio.h>에 들어 있습니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-getche-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> cTemp;</div><div class="line"></div><div class="line">    cTemp = getche();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, cTemp);</div><div class="line">    cTemp = getche();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, cTemp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></conio.h></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-getche-02.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> sId[<span class="number">8</span>] = &#123;<span class="string">' '</span>,&#125;;</div><div class="line">    <span class="keyword">char</span> sPw[<span class="number">8</span>] = &#123;<span class="string">' '</span>,&#125;;</div><div class="line">    <span class="keyword">char</span> ch = <span class="string">' '</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"아이디 : "</span>);</div><div class="line">    <span class="keyword">while</span> ( (ch = getch()) !=<span class="string">'\n'</span>)&#123;</div><div class="line">        ch = getch()</div><div class="line">        sId[i] = ch;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"비밀번호 : "</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( (ch = getche()) !=<span class="string">'\n'</span>)&#123;</div><div class="line">        ch = getche()</div><div class="line">        sId[i] = ch;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sId);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sPw);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;getchar&quot;&gt;&lt;a href=&quot;#getchar&quot; class=&quot;headerlink&quot; title=&quot;getchar()&quot;&gt;&lt;/a&gt;getchar()&lt;/h3&gt;&lt;p&gt;1문자를 입력 받을 수 있습니다. 엔터를 누를때까지 입력을 받습니다.&lt;br&gt;&lt;fig
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="getchar" scheme="http://korcow.github.io/tags/getchar/"/>
    
      <category term="gets" scheme="http://korcow.github.io/tags/gets/"/>
    
      <category term="scanf" scheme="http://korcow.github.io/tags/scanf/"/>
    
      <category term="getch" scheme="http://korcow.github.io/tags/getch/"/>
    
  </entry>
  
  <entry>
    <title>ASCII 문자</title>
    <link href="http://korcow.github.io/2017/11/15/c-ascii%EB%AC%B8%EC%9E%90/"/>
    <id>http://korcow.github.io/2017/11/15/c-ascii문자/</id>
    <published>2017-11-15T09:29:51.357Z</published>
    <updated>2017-11-15T09:29:51.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ASCII-문자"><a href="#ASCII-문자" class="headerlink" title="ASCII 문자"></a>ASCII 문자</h3><p>아스키 문자는 정수 0~127까지의 숫자를 문자로 대체해서 사용하는 약속 기호입니다.<br>0x0~1F 과 0x7F는 제어 문자가 들어있습니다.</p><h3 id="제어문자"><a href="#제어문자" class="headerlink" title="제어문자"></a>제어문자</h3><table><thead><tr><th>DEC</th><th>HEX</th><th>문자</th><th>설명</th><th>DEC</th><th>HEX</th><th>문자</th><th>설명</th></tr></thead><tbody><tr><td>0</td><td>0x00</td><td>NUL</td><td>NUl문자</td><td>17</td><td>0x11</td><td>DC1</td><td>device control 1 </td></tr><tr><td>1</td><td>0x01</td><td>SOH</td><td>start of header</td><td>18</td><td>0x12</td><td>DC2</td><td>device control 2</td></tr><tr><td>2</td><td>0x02</td><td>STX</td><td>start of text</td><td>19</td><td>0x13</td><td>DC3</td><td>device control 3</td></tr><tr><td>3</td><td>0x03</td><td>ETX</td><td>end of text</td><td>20</td><td>0x14</td><td>DC4</td><td>device control 4</td></tr><tr><td>4</td><td>0x04</td><td>EOT</td><td>end of transmission</td><td>21</td><td>0x15</td><td>NAK</td><td>negative ack</td></tr><tr><td>5</td><td>0x05</td><td>ENQ</td><td>enquiry</td><td>22</td><td>0x16</td><td>SYN</td><td>synchronous idle</td></tr><tr><td>6</td><td>0x06</td><td>ACK</td><td>acknowlegment</td><td>23</td><td>0x17</td><td>ETB</td><td>end of Transmission block</td></tr><tr><td>7</td><td>0x07</td><td>BEL</td><td>bell</td><td>24</td><td>0x18</td><td>CAN</td><td>cancle</td></tr><tr><td>8</td><td>0x08</td><td>BS</td><td>backspace</td><td>25</td><td>0x19</td><td>EM</td><td>end of medium</td></tr><tr><td>9</td><td>0x09</td><td>HT</td><td>horizontal tab</td><td>26</td><td>0x1a</td><td>SUB</td><td>substitute</td></tr><tr><td>10</td><td>0x0a</td><td>LF</td><td>line feed</td><td>27</td><td>0x1b</td><td>ESC</td><td>escape</td></tr><tr><td>11</td><td>0x0b</td><td>VT</td><td>vertical tab</td><td>28</td><td>0x1c</td><td>FS</td><td>file separator</td></tr><tr><td>12</td><td>0x0c</td><td>FF</td><td>form feed</td><td>29</td><td>0x1d</td><td>GS</td><td>group separator</td></tr><tr><td>13</td><td>0x0d</td><td>CR</td><td>carriage return</td><td>30</td><td>0x1e</td><td>RS</td><td>record separator</td></tr><tr><td>14</td><td>0x0e</td><td>SO</td><td>shift out</td><td>31</td><td>0x1f</td><td>US</td><td>Unit Separator</td></tr><tr><td>15</td><td>0x0f</td><td>SI</td><td>shift in</td><td>127</td><td>0x7f</td><td>DEL</td><td>delete</td></tr><tr><td>16</td><td>0x10</td><td>DLE</td><td>data link escape</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>제어문자는 무척 많이 사용합니다. 설명을 영어 그대로 쓴건 검색시 사용하세요.<br>각종 통신시 전문을 주고 받을때, 키보드및 프린터 제어등등..</p><ul><li>0x30~0x39는 숫자</li><li>0x41~0x5A는 대문자</li><li>0x61~0x7A는 대문자</li><li>나머지는 특수문자가 들어 있습니다.<br>제어 문자는 출력할 수 없지만 나머지는 출력이 가능합니다.<br>참고로 0x20는 스페이스바(공백)이 출력되므로 아무것도 없는것 같이 보입니다.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum = <span class="number">32</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\t0x%04X\t%c\n"</span>, iNum, iNum, iNum);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 예제는 10진수 32를 10진수, 16진수, 문자로 출력하는 프로그램입니다.<br>공백을 출력하기 때문에 문자는 보지지 않습니다. 반복문을 이용해 126까지 출력해 봅시다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t0x%04X\t%c\n"</span>, i, i, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>제목도 달아 줄까요?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"        ASCII Table"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"==========================="</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"10진    16진    문자"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"---------------------------"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t0x%04X\t%c\n"</span>, i, i, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>너무 길게 나오니 한줄에 3개씩 나오게 찍어보죠.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"                            ASCII Table"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"====================================================================="</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"10진    16진    문자    10진    16진    문자    10진    16진    문자"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"---------------------------------------------------------------------"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t0x%04X\t%c\t"</span>, i, i, i);</div><div class="line">        <span class="keyword">if</span> ((i%<span class="number">3</span>)==<span class="number">1</span>) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"                            ASCII Table"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"====================================================================="</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"10진    16진    문자    10진    16진    문자    10진    16진    문자"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"---------------------------------------------------------------------"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i=i+<span class="number">32</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t0x%04X\t%c\t"</span>, i, i, i);</div><div class="line">        cnt = cnt +<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (cnt == <span class="number">3</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">            cnt = <span class="number">0</span>;</div><div class="line">            i = i - <span class="number">95</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>요즘은 영문os와 windows를 제외한 한글 os는 unicode를 사용합니다.<br>unicode안에 ascii code도 포함되어 있지만 확장아스키는 사용하는 폰트에 따라 나오지 않을 수 있습니다.<br>unicode를 출력해 보고 싶으면 127을 16777216 로 바꿔 출력해 보세요.<br>스크롤이 많을 테니 꼭 <code>| less</code> 를 이용하세요. <code>Ctrl+c</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ASCII-문자&quot;&gt;&lt;a href=&quot;#ASCII-문자&quot; class=&quot;headerlink&quot; title=&quot;ASCII 문자&quot;&gt;&lt;/a&gt;ASCII 문자&lt;/h3&gt;&lt;p&gt;아스키 문자는 정수 0~127까지의 숫자를 문자로 대체해서 사용하는 약속 기호입니다
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="c" scheme="http://korcow.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>화면에 글자 출력하기</title>
    <link href="http://korcow.github.io/2017/11/15/c-%ED%99%94%EB%A9%B4%EC%97%90-%EA%B8%80%EC%9E%90-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/11/15/c-화면에-글자-출력하기/</id>
    <published>2017-11-14T19:07:39.390Z</published>
    <updated>2017-11-14T19:07:39.390Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div><hr><h2 id="화면에-글자-출력하기"><a href="#화면에-글자-출력하기" class="headerlink" title="화면에 글자 출력하기"></a>화면에 글자 출력하기</h2><p>c언어는 함수로 시작해서 함수로 끝납니다. 모든 부품들이 함수로 만들어 져있습니다. </p><p>c언어에서 화면에 출력을 하는 함수는 다음과 같습니다. </p><ul><li>putchar() 영문 1문자를 출력(한글 1문자는 영어 3문자와 같음. ms-windows는 2문자)</li><li>puts() 문자열을 출력</li><li>printf() 문자열을 출력(출력포맷을 정할 수 있음)</li></ul><h3 id="1문자-출력"><a href="#1문자-출력" class="headerlink" title="1문자 출력"></a>1문자 출력</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명: 001-putchar-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'a'</span>); <span class="comment">// 한문자를 출력합니다. </span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1행은 선언문이라고 하는데 무언가를 화면에 출력할때, 입력받을때 반드시 사용해야합니다.<br>위와 같이 프로그램을 작성했으면 저장을 하고 실행이 되도록 컴파일을 합니다.<br><code>&lt;Esc&gt;:w&lt;Enter&gt;</code> 저장<br><code>&lt;Esc&gt;:q&lt;Enter&gt;</code> vim종료</p><h3 id="컴파일하고-실행하기"><a href="#컴파일하고-실행하기" class="headerlink" title="컴파일하고 실행하기"></a>컴파일하고 실행하기</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gcc 001-putchar-01.c -o 001-putchar-01.o   <span class="comment"># 컴파일</span></div><div class="line">$ ./001-putchar-01.o                         <span class="comment"># 실행</span></div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a%</div></pre></td></tr></table></figure><p>터미널에서 1행 처럼 컴파일 하고<br>2행 처럼 실행을 하는 겁니다.</p><p>우리가 원하는데로 a가 잘 출력 되었습니다만 마지막에 %가 붙었습니다. 실제로 %가 붙은건 아니고 제어문자와 겹쳐서 그렇게 보이는것 뿐입니다. 흔히 깨져 보인다고 하죠.</p><h3 id="출력하고-줄바꾸기"><a href="#출력하고-줄바꾸기" class="headerlink" title="출력하고 줄바꾸기"></a>출력하고 줄바꾸기</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//파일명 : 001-putchar-02.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'a'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>); <span class="comment">// 줄을 바꾸어주는 문자입니다.</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$gcc</span> 001-putchar-02.c -o 001-putchar-02.o</div><div class="line">$./001-putchar-02.o</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a</div></pre></td></tr></table></figure><p>이번에는 6행을 보면 <code>\n</code>을 추가했습니다. putchar는 1문자만 출력한다고 했는데. 두글자를 입력했습니다. <code>\n</code>은 c언어가 1문자로 인식합니다. 줄을 바꾸어 주는 역할을 합니다. 이런 문자가 몇가지 더있는데 이를 이스케이프문자 라고 합니다.</p><table><thead><tr><th>esc문자</th><th>설명</th></tr></thead><tbody><tr><td><code>\a</code></td><td>beep음</td></tr><tr><td><code>\b</code></td><td>백스페이스</td></tr><tr><td><code>\f</code></td><td>폼 피드</td></tr><tr><td><code>\n</code></td><td>줄바꿈</td></tr><tr><td><code>\r</code></td><td>리턴(커서를 맨앞으로 이동)</td></tr><tr><td><code>\t</code></td><td>수평탭</td></tr><tr><td><code>\v</code></td><td>수직탭</td></tr><tr><td><code>\\</code></td><td>\출력</td></tr><tr><td><code>\&#39;</code></td><td>작은따옴표(‘)</td></tr><tr><td><code>\&quot;</code></td><td>큰타옴표(“)</td></tr><tr><td><code>\?</code></td><td>물음표(?)</td></tr></tbody></table><h3 id="Hello-World-출력하기"><a href="#Hello-World-출력하기" class="headerlink" title="Hello World 출력하기"></a>Hello World 출력하기</h3><p>이번에는 putchar()를 가지고 Hello World를 출력해 볼까요.?<br>복사와 붙여넣기는 코딩의 필수<br>우리는 vim을 사용하니까 vim의 신공으로<br><code>i&#39;h&#39;&lt;Esc&gt;yy15p</code><br>커서를 맨앞에 놓고 <code>&lt;C-v&gt;15jIputchar(&lt;Esc&gt;</code><br>커서를 첫줄 p에 놓고 <code>&lt;S-v&gt;15j:s/$/);/g&lt;Enter&gt;</code></p><p>이런 신공이 불편하다면 <code>yy15p</code> 하고 문자를 수정<br>설마 블로그에서 복사를… ^^; 해도 됩니다. 코딩은 그렇게 편하게 하는 겁니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 001-putchar-03.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'H'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'e'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'o'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'W'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'o'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'r'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'d'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hellow World</div></pre></td></tr></table></figure><p>스스로 컴파일하고 실행해 보세요.<br>vim에서 컴파일 하고 실행하기<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">w</span> 파일명.<span class="keyword">c</span></div><div class="line">:!gcc 파일명.<span class="keyword">c</span> -<span class="keyword">o</span> 파일명.<span class="keyword">o</span></div><div class="line">:!./파일명.<span class="keyword">o</span></div></pre></td></tr></table></figure></p><p>vim 세팅을 했다면 <code>&lt;F5&gt;</code> 누르면 자동으로 컴파일하고 실행하도록 했습니다.</p><h3 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h3><p>putchar()를 갖이고 문장을 입력하려면 무척 불편합니다. 그래서 문장을 출력하기 위해서 puts() 함수를 사용합니다. puts함수는 putchar() 함수로 만들어졌습니다. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 001-puts-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Hello World"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hellow World</div></pre></td></tr></table></figure><p>puts()는 명령이 끝나면 자동으로 줄을 바꾸어 줍니다. <code>\n</code>을 넣을 필요가 없습니다. 줄을 바꾸지 않고 싶을 때는 printf()를 사용합니다.</p><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><p>printf()는 출력형식을 사용자가 자유롭게 지정할 수 있습니다. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 001-printf-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"Hello World\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, <span class="number">65</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c"</span>, <span class="string">'A'</span>, <span class="string">'\n'</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="number">65</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%f"</span>, <span class="number">3.14</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"내이름은 %s이고 나이는 %d살 입니다.\n"</span>, <span class="string">"홍길동"</span>, <span class="number">16</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">A</div><div class="line">A</div><div class="line">65</div><div class="line">3.140000</div><div class="line">Hello World</div><div class="line">내이름은 홍길동이고 나이는 16살 입니다.</div></pre></td></tr></table></figure><p>위 프로그램에서 6행에 문자를 출력하는데 65란 숫자를 써도 문자가 출력되는 것을 볼 수 있습니다.<br>컴퓨터는 문자를 인식 하지 못합니다. 오직 0, 1의 2진수만 알죠.<br>ASCII 문자라는 것이 있습니다. 숫자를 문자로 표현 하는 약속이죠. 모호스 부호처럼요.<br>%c 는 숫자를 문자로 변경해서 출력해 주는 기능을 가지고 있습니다.<br>당연히 문자는 문자로 출력합니다. 오직 1문자만. 한글은 문자가 될수 없습니다. 한글은 3byte 초성,중성,종성으로 된 문자열 입니다.</p><table><thead><tr><th>출력형식 문자</th><th>설명</th></tr></thead><tbody><tr><td>%c</td><td>문자하나를 출력, 상수가 숫자일경우 ascii로 문자로 대체</td></tr><tr><td>%s</td><td>문자열을 출력</td></tr><tr><td>%Nf</td><td>10진 실수를 N안에 출력 예)10.2f 전체소수점 포함 10자리, 소수점이하 2자리</td></tr><tr><td>%Nd</td><td>10진 정수를 N안에 출력</td></tr></tbody></table><p>출력형식은 위에 있는것 말고도 조금 더있지만 자료형에서 다루겠습니다. </p><h3 id="박스-그리기"><a href="#박스-그리기" class="headerlink" title="박스 그리기"></a>박스 그리기</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : mybox.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"================"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"|              |"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"================"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">================</div><div class="line">|              |</div><div class="line">================</div></pre></td></tr></table></figure><p>선문자를 이용하면 더 예쁘게 그릴수 있습니다.<br>이걸 왜 만들었을 까요?<br>vim에서 <code>:r!./box.o</code> 해보세요.<br>printf까지 출력되도록 만들어도 보세요.<br>응용해서 자신의 명함도 만들어 보세요.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">회사명 : (주)대한민국     이름 : 홍길동</div><div class="line">                          직책 : 사원</div><div class="line">주소: 서울시 뭐뭐구 뭐뭐동</div><div class="line">Tel : 000.0000.0000  H.P 000.0000.0000</div></pre></td></tr></table></figure></p><p>어디에 사용할지 생각도 해보구요. 메일과 문서에도 사용할 수 있습니다.<br>텍스트 리더인 macos용 say나 google tts와 연동해서 사용할 수 있습니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#macos</span></div><div class="line">$ 프로그램명 | say</div><div class="line">$ say <span class="string">"안녕 say 야!"</span></div><div class="line">$ man say</div></pre></td></tr></table></figure></p><p>google tts가 궁금하면  <a href="https://github.com/glutanimate/simple-google-tts" target="_blank" rel="external">https://github.com/glutanimate/simple-google-tts</a><br>linux에서는 fastival이 있는데 한글이 안됨.</p><h3 id="코미디언-이름-출력하기"><a href="#코미디언-이름-출력하기" class="headerlink" title="코미디언 이름 출력하기"></a>코미디언 이름 출력하기</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : mycomedyname.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"유재석, 강호동, 박명수, 신동엽, 박미선"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">유재석, 강호동, 박명수, 신동엽, 박미선</div></pre></td></tr></table></figure><p>이건 나중에 배열 배울때 써먹을 겁니다. 우선 연습 삼아 만들어 놓으세요. 아래 색상도<br>vim에 snippet에 등록해서 사용해도 되지만 우리는 c언어 연습중…</p><h3 id="색상-이름-출력하기"><a href="#색상-이름-출력하기" class="headerlink" title="색상 이름 출력하기"></a>색상 이름 출력하기</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : mycolorname.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"빨강, 주황, 노랑, 초록, 파랑, 남, 보라"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">빨강, 주황, 노랑, 초록, 파랑, 남, 보라</div></pre></td></tr></table></figure><p>컴퓨터를 사용하는 이유는 복사와 붙여넣기가 가능하기 때문입니다.<br>많이 할수록 컴퓨터를 잘 쓰는 겁니다. </p><hr><p>참고로 cowsay, figlet, boxes, fortune 프로그램을 설치해서 사용 해보세요.<br>지금배운 출력문에 살을 조금만 붙이면 만들 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Centos</span></div><div class="line"><span class="variable">$sudo</span> yum install cowsay</div><div class="line"><span class="variable">$sudo</span> yum install figlet</div><div class="line"><span class="variable">$sudo</span> yum install boxes</div><div class="line"><span class="variable">$sudo</span> yum install fortune</div><div class="line"></div><div class="line"><span class="comment"># macos</span></div><div class="line"><span class="variable">$brew</span> install cowsay</div><div class="line"><span class="variable">$brew</span> install figlet</div><div class="line"><span class="variable">$brew</span> install boxes</div><div class="line"><span class="variable">$brew</span> install forturne</div><div class="line"></div><div class="line"><span class="comment">#ubuntu</span></div><div class="line"><span class="variable">$sudo</span> apt-get install cowsay</div><div class="line"><span class="variable">$sudo</span> apt-get install figlet</div><div class="line"><span class="variable">$sudo</span> apt-get install boxes</div><div class="line"><span class="variable">$sudo</span> apt-get install fortune</div></pre></td></tr></table></figure><p>텍스트 파일을 하나 만들어서 hello world 저장하고, 크기를 확인해 보세요.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"hello world"</span> &gt; abc.txt</div><div class="line">$ ls -al abc.txt</div></pre></td></tr></table></figure></p><p>그리고 putchar(), puts(), printf()로 hello world를 출력하는 프로그램을 각각 만들어서 파일의 크기를 비교해 보세요.</p><blockquote><ul><li>텍스트 파일보다 실행파일이 크기가 큰 이유는 뭘까요. 또 컴파일 된 실행파일의 크기가 같은 이유는 뭘까요. 이유를 인터넷 검색해 보세요. </li><li>실행파일은 기본 출력 명령을 포함하고 있고 똑같은 hello world 11자+ 줄바꿈(1자) 총12자를 출력합니다. </li><li>영문1글자는 1바이트 총12자 12바이트 </li><li>또 100번씩 출력하게 만들어서 크기를 비교해 보세요. </li><li>복사 붙여 넣기 신공을 사용해서 200번 출력하게 만드세요. </li><li>실행파일은 기본 출력 버퍼 사이즈를 가집니다. 실행 파일내 출력버퍼가 다차면 일정 크기만큼 자동으로 버퍼를 확장합니다.</li><li>출력문을 여러번 사용해도 실행파일의 크기가 갑자기 커지지는 않는다는 것을 확인 했습니다. 그러나 프로그램의 규모가 크다면 메뉴나, 설명등의 출력은 data파일에 저장한후 불러오는 구조로 많이 만듭니다. </li><li>64비트운영체제는 4메가, 32비트는 2메가, 16비트는 1메가바이트,  처리 비트가 클수록 낭비되는 부분도 커집니다. </li><li>임베디드 개발이 아닌 이상은 모두 무시하고 printf() 쓰세요. 컴퓨터 성능과 자원은 남아 돕니다. </li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/SSu822Lgta8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="c" scheme="http://korcow.github.io/tags/c/"/>
    
      <category term="printf" scheme="http://korcow.github.io/tags/printf/"/>
    
      <category term="컴파일" scheme="http://korcow.github.io/tags/%EC%BB%B4%ED%8C%8C%EC%9D%BC/"/>
    
      <category term="이스케이프문자" scheme="http://korcow.github.io/tags/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84%EB%AC%B8%EC%9E%90/"/>
    
      <category term="puts" scheme="http://korcow.github.io/tags/puts/"/>
    
      <category term="putchar" scheme="http://korcow.github.io/tags/putchar/"/>
    
  </entry>
  
  <entry>
    <title>약수와 배수</title>
    <link href="http://korcow.github.io/2017/11/15/math-%EC%95%BD%EC%88%98%EC%99%80%EB%B0%B0%EC%88%98/"/>
    <id>http://korcow.github.io/2017/11/15/math-약수와배수/</id>
    <published>2017-11-14T15:20:30.896Z</published>
    <updated>2017-11-14T15:20:30.896Z</updated>
    
    <content type="html"><![CDATA[<h3 id="약수"><a href="#약수" class="headerlink" title="약수"></a>약수</h3><h4 id="약수란-나누어-떨어지게-하는-수를-말합니다"><a href="#약수란-나누어-떨어지게-하는-수를-말합니다" class="headerlink" title="약수란 나누어 떨어지게 하는 수를 말합니다."></a>약수란 나누어 떨어지게 하는 수를 말합니다.</h4><p>어떤 수를 나누어 0이 되는 수를 약수라고 합니다.</p><ul><li>4는 1로 나누어 떨어 집니다.<ul><li>1은 4의 약수 입니다.</li></ul></li><li>4는 2로 나누어 떨어 집니다.<ul><li>2는 4의 약수 입니다.</li></ul></li><li>4는 3으로 나누어 떨어지지 않습니다.<ul><li>3은 4의 약수가 아닙니다.</li></ul></li><li>4는 4로 나누어 떨어 집니다.<ul><li>4는 4의 약수입니다. </li></ul></li><li>따라서 1, 2, 4는 4의 약수 입니다. </li></ul><p>약수는 위와 같이 1부터 약수를 찾는 값까지 나누어 떨어지는지 확인후 나누어 떨어지는 수를 적어 줍니다.<br>원리를 알았으니 컴퓨터에게 시켜 보죠.<br>대충 프로그램 계획을 만들어 봅시다.</p><ol><li>먼저 값을 입력 받습니다. </li><li>나눌값 변수에 저장합니다.</li><li>나눌값이 나눌수와 같으면 빠져 나갑니다.</li><li>입력받은 수를 1부터 나누어서 몫이 0이면</li><li>약수이므로 출력하고 나눌수를 1증가시켜 반복</li><li>0이 아니면 입력받은수를 1증가시켜 반복</li><li>플로우 차트를 그려서 잘 돌아갈지 확인 합니다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">시작</div><div class="line">입력 입력값n, 나눌수i</div><div class="line"></div><div class="line">반복 조건 i=1;&lt;=n i++</div><div class="line">    조건 n % i== 0</div><div class="line">    출력i</div><div class="line">반복</div><div class="line">    출력</div><div class="line">종료</div></pre></td></tr></table></figure><p>프로그램 언어로 코딩합니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i,n;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"값을 입력하세요 : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>위 프로그램은 모든수를 나누어 약수인지 아닌지 확인을 합니다.</p><p>컴퓨터로 계산하기 때문에 엄청 빠릅니다. 1초도 걸리지 않지만 좀더 빠른 알고리즘을 적용할 수도 있습니다.</p><ul><li>12를 1로 나누어 떨어지면 1을 왼쪽에 몫12를 오른쪽에 적어 줍니다. 왼쪽 값에 1을 더하고 오른쪽 값 중에서 제일 작은 수와 비교해서 오른쪽 값이 크면 계속 진행합니다. 같으면 종료합니다.</li><li>12를 2로 나누어 떨어지면 2를 왼쪽에 몫6을 오른쪽에 적어 줍니다.왼쪽 값에 1을 더하고 오른쪽 값 중에서 제일 작은 수와 비교해서 오른쪽 값이 크면 계속 진행합니다.같으면 종료합니다.</li><li>12를 3으로 나누어 떨어지면 3을 왼쪽에 몫4를 오른쪽에 적어 줍니다.왼쪽 값에 1을 더하고 오른쪽 값 중에서 제일 작은 수와 비교해서 오른쪽 값이 크면 계속 진행합니다. 같으면 종료합니다. 3+1 = 4 같으니 종료합니다.</li><li>왼쪽값과 오른쪽값을 합치고 중복된 수가 있다면 하나만 씁니다. </li><li>작은 수 부터 출력합니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1         12</div><div class="line">2         6</div><div class="line">3         4</div><div class="line"></div><div class="line">[1, 2, 3, 4, 6, 12]</div></pre></td></tr></table></figure><p>12번 나누어야 할 것을 3번만에 끝냈습니다.</p><p>프로그래밍 계획을 세워 봅시다.</p><ol><li>먼저 값을 입력을 받습니다.</li><li>입력받은 값을 1부터 나누어 떨어지면 나눈값을 배열1에 몫을 배열2에 저장합니다.<ul><li>배열은 여러개의 값을 저장할 수 있는 변수입니다. 수학에서 집합과 같습니다.</li></ul></li><li>나눈값에 1을 더해 배열2의 제일 작은값과 비교해서 같거나 배열2의 값이 크면 반복합니다.</li><li>그렇지 않으면 배열1 과 배열2 값을 배열3에 합칩니다.</li><li>배열3을 정렬합니다.</li><li>배열3을 출력합니다.</li></ol><h3 id="배수"><a href="#배수" class="headerlink" title="배수"></a>배수</h3><p>배수는 한배, 두배할 때 수의 배를 말합니다.</p><p>2의 1배는 2입니다.<br>2의 2배는 2가 둘이므로 2 X 2 = 4입니다.<br>2의 3배는 2가 셋이므로 2 X 2 X 2= 8입니다.</p><p>3은 3배는 얼마일까요?<br>3 X 3 X 3 = 27입니다.</p><p>배수가 많을땐 이렇게 표기 합니다.<br>2 X 2 X 2 X 2 X 2 X 2 = 2의 6승이라 부르고 컴퓨터에서는 <code>2^6</code> 이렇게 쓰고 \( 2^6 \) 으로 표기 합니다.<br><code>^</code>연산자는 지원하는 컴파일러도 있도 지원하지 않는 컴파일러도 있습니다.<br>c언어는 <code>^</code>연산자를 지원하지 않고 pow(밑,지수)함수를 이용합니다.<br>pow() 함수는 math.h라이브러리에 있습니다.<br>또한 밑과, 지수는 자료형이 double이어야 합니다.<br>\(2^{1000} \)은 얼마일까요? c언어로 작성해 보세요. 몇번의 오류를 거쳐야 할 겁니다.<br><code>#include &lt;math.h&gt;</code><br>변수를 선언 할때 double로 자료형을 만들어야 합니다.<br>실수를 정수로 바꾸려면 <code>(int) 실수값</code><br>pow 함수를 쓰지 않고 직접 pow함수처럼 만들어 보세요.<br>for문으로 승수 만큼 반복하면 됩니다. 직접 해보세요. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;약수&quot;&gt;&lt;a href=&quot;#약수&quot; class=&quot;headerlink&quot; title=&quot;약수&quot;&gt;&lt;/a&gt;약수&lt;/h3&gt;&lt;h4 id=&quot;약수란-나누어-떨어지게-하는-수를-말합니다&quot;&gt;&lt;a href=&quot;#약수란-나누어-떨어지게-하는-수를-말합니다&quot; class
      
    
    </summary>
    
      <category term="전산수학기초" scheme="http://korcow.github.io/categories/%EC%A0%84%EC%82%B0%EC%88%98%ED%95%99%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="약수" scheme="http://korcow.github.io/tags/%EC%95%BD%EC%88%98/"/>
    
      <category term="배수" scheme="http://korcow.github.io/tags/%EB%B0%B0%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 한글파일명 문제점</title>
    <link href="http://korcow.github.io/2017/11/15/hexo-%ED%95%9C%EA%B8%80%ED%8C%8C%EC%9D%BC%EB%AA%85/"/>
    <id>http://korcow.github.io/2017/11/15/hexo-한글파일명/</id>
    <published>2017-11-14T15:20:20.871Z</published>
    <updated>2017-11-14T15:20:20.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo-한글오류"><a href="#Hexo-한글오류" class="headerlink" title="Hexo 한글오류"></a>Hexo 한글오류</h3><p>이하 내용은 Hexo를 수정하다 꼬여서 발생한 문제를 해결하면서 얻은 경험입니다.( 정확하게 소스분석을 하지 않았다는 겁니다.)</p><p>Hexo에서 <code>_Post</code>의 관리는 generator가 md파일을 감시하고 있다 변경이 되면 변경 상태에 따라 html, category, tag, archives 다시 만들어주고 deploy는 .deploy디렉토리에 add, commit, push  동작을 하는것 같습니다. 추측이지만 generator가 임의로 만든 post의 한글파일의 감시를 제대로 못해주는 것 같습니다. 감시는 파일명, 내용수정에 따라 동작이 달라지는것 같습니다.</p><p><strong>요점:</strong></p><ul><li>404오류, archives, Tag, Category, Search, index.html에서 링크오류가 나온다면 파일명과 내용을 수정하고 <code>hexo g</code>하면  100% 해결 되었습니다.</li><li>변경내용이 반영되지 않을 경우, 간혹 github이 바빠서 그럴 수 있으니 새로고침 몇번 해보고, 조금 기다려 보고 github에 해당 post가 업로드되었는지 확인. 업로드가 안됐을 경우 <code>hexo clean</code> 후 <code>hexo g -d</code> 하면 99%는 해결 됩니다. 1%는 삽질이 필요합니다. 1%의 빈도수는 거의 없으니 안심하시길…</li><li>github.io는 무료이고 조금 느림을 항상 명심. </li></ul><hr><p><strong>삽질 경험담:</strong></p><ul><li>archive가 반영이 안될때는 파일명을 변경하면 된다.</li><li>Post의 변경 반영이 안되는 경우<br><code>hexo n &quot;포스트명&quot;</code> 또는 <code>hexo new &quot;포스트명&quot;</code> 으로 포스트를 생성해서 사용하다 수정을 했음에도 반영이 안되는 경우가 종종 있다.<br>이때는 git의 캐시 때문일 수 있으니 5분 정도 기다려 보고, 그래도 안되면 아래처럼 적용을 해준다.<br><code>hexo clean</code>  /blog/Public 디렉토리 삭제<br><code>hexo g -d</code><br>하면 문제가 해결된다<br>그래도 안되는 경우 파일명을 바꾸어 준다. 탐색기나 finder에서 바꾸면 안됨(내 경험상)<br><code>mv 한글.md 한글x.md</code><br><code>hexo g -d</code><br>변경을 확인하고 변경이 잘 되면 원래대로 이름을 바꾸고 <code>hexo g -d</code><br>그래도 안되면 내용을 수정<br><code>hexo g -d</code><br>여기 까지 했는데도 안되면 최후의 수단<br>.deploy로 이동후<br><code>git rm -rf *</code><br><code>git commit -m &quot;삭제&quot;</code><br><code>git push</code><br>화일명을 변경, 내용도 수정<br><code>hexo g -d</code><br>영어의 대소문자가 혼재(윈도우와 맥에서는 오류가 날 수 있음) 소문자로 바꾸길…</li><li>Post가 2개로 보일때<br>이증상은 대부분 로컬서버에서 생기는 것 같습니다.<br>post명을 vim에서 Vim으로 바꾸었는데 post가 2개로 보였습니다.<br><code>hexo clean</code><br><code>hexo g -d</code><br><code>hexo server -s</code> or <code>hexo server</code></li></ul><hr><ul><li>오류없이 사용하려면 Post명을 영어로 사용을 권장.</li><li>Hexo의 단점은 post가 많아 지면 관리가 힘듬.</li><li>Hexo의 단점을 조금이라도 보완 하려면 vim과 ctrlP 사용이 정답.</li><li>또는 파일명 앞에 카테고리 이름을 붙여주면 그나마 쓸만함.</li></ul><p><strong>참고 :</strong> </p><ul><li>windows와 macos는 기본적으로 대소문자를 구분하지 않습니다. </li><li>linux와 Unix는 대소문자를 구분합니다. </li><li>한글파일명은 공백없이 사용하는 것이 원칙, 공백을 사용하면 공백앞에 <code>\</code>가 자동으로 붙고 파일 시스템에서 <code>\</code>처리 때문에 문제가 발생할 수 있습니다. 설마 개발자가 파일명에 공백을 넣는 다면 os 공부가 필요 전산 전공을 하지 않은 개발자 일 수 있겠네요. 개발자가 아니라면 가능한 파일명에는 공백을 넣지 말고 <code>-</code> 또는 <code>_</code>를 넣으세요. 파일명에는 특수문자를 넣지 마세요. 한글 파일명을 사용해야 한다면 “한글파일명.md” 처럼 따옴표 안에 넣으세요.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hexo-한글오류&quot;&gt;&lt;a href=&quot;#Hexo-한글오류&quot; class=&quot;headerlink&quot; title=&quot;Hexo 한글오류&quot;&gt;&lt;/a&gt;Hexo 한글오류&lt;/h3&gt;&lt;p&gt;이하 내용은 Hexo를 수정하다 꼬여서 발생한 문제를 해결하면서 얻은 경험입
      
    
    </summary>
    
      <category term="Hexo" scheme="http://korcow.github.io/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://korcow.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>d2coding font</title>
    <link href="http://korcow.github.io/2017/11/15/hexo-d2coding/"/>
    <id>http://korcow.github.io/2017/11/15/hexo-d2coding/</id>
    <published>2017-11-14T15:20:06.158Z</published>
    <updated>2017-11-14T15:20:06.158Z</updated>
    
    <content type="html"><![CDATA[<p>### </p><p>naver d2coding webfont 다운로드<br><a href="https://github.com/Joungkyun/font-d2coding" target="_blank" rel="external">https://github.com/Joungkyun/font-d2coding</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;### &lt;/p&gt;
&lt;p&gt;naver d2coding webfont 다운로드&lt;br&gt;&lt;a href=&quot;https://github.com/Joungkyun/font-d2coding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gi
      
    
    </summary>
    
      <category term="Hexo" scheme="http://korcow.github.io/categories/Hexo/"/>
    
    
      <category term="font" scheme="http://korcow.github.io/tags/font/"/>
    
  </entry>
  
  <entry>
    <title>함수 만들기</title>
    <link href="http://korcow.github.io/2017/11/15/c-%ED%95%A8%EC%88%98/"/>
    <id>http://korcow.github.io/2017/11/15/c-함수/</id>
    <published>2017-11-14T15:14:57.085Z</published>
    <updated>2017-11-14T15:14:57.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="함수만들기"><a href="#함수만들기" class="headerlink" title="함수만들기"></a>함수만들기</h3><p>함수는 모듈이라고 생각하면 됩니다.<br>지금 까지 main 함수에서만 코딩을 했는데요. 함수를 만들어 사용하면 메인 함수가 복잡해지는것을 막을 수 있고, 읽기도 쉬워 집니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // exit(), system()</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMenu</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//함수의 선언</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">scoreSearch</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//함수의 선언</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputScore</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//함수의 선언</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> selectMenu = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>==<span class="number">1</span>)&#123; <span class="comment">// 무한 반복 종료는 exit()로 종료함.</span></div><div class="line"></div><div class="line">        myMenu(); <span class="comment">// 메뉴 출력 함수.</span></div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"실행할 번호를 입력: "</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;selectMenu);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (selectMenu == <span class="number">1</span>)&#123;</div><div class="line">            scoreSearch(); <span class="comment">// 조회 함수</span></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(selectMenu == <span class="number">2</span>)&#123;</div><div class="line">            inputScore(); <span class="comment">// 점수 입력 함수</span></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(selectMenu == <span class="number">3</span>)&#123;</div><div class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"잘못 입력했습니다.\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMenu</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    system(<span class="string">"clear"</span>); <span class="comment">// 외부 명령을 실행(화면 지우기)</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"     성적관리\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"==================\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"1. 성적조회\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"2. 성적입력\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"3. 프로그램종료\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">scoreSearch</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"성적조회\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputScore</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"성적입력\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 프로그램에서 메인함수를 보면 대부분 제어만을 담당하고 있습니다. 조건문을 사용해서 각각의 함수를 호출하고 있죠. 오류가 있다면 해당 함수에서 수정하면 됩니다.</p><h3 id="함수의-기본-사용법"><a href="#함수의-기본-사용법" class="headerlink" title="함수의 기본 사용법"></a>함수의 기본 사용법</h3><h4 id="기본-구문"><a href="#기본-구문" class="headerlink" title="기본 구문"></a>기본 구문</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">반환자료형 함수명([인자],...)&#123;</div><div class="line">    명령;</div><div class="line">    리턴값;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="반환자료형"><a href="#반환자료형" class="headerlink" title="반환자료형 :"></a>반환자료형 :</h4><p>함수가 종료할때 결과를 반환 해야 한다면 반환할 값의 자료형을 넣어 줍니다. 반환값이 없다면 void 를 입력합니다.</p><h4 id="함수명"><a href="#함수명" class="headerlink" title="함수명 :"></a>함수명 :</h4><p>함수명은 식별자(변수명)를 만드는 규칙과 동일하게 생성 할 수 있습니다.</p><h4 id="인자"><a href="#인자" class="headerlink" title="인자 :"></a>인자 :</h4><p>인자는 파라메터, 매개변수, 아규먼트로 불립니다. 함수를 호출하면서 함수에게 전달할 값을 넣어 줄수 있습니다. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 + 20 = %d\n"</span>, mySum(<span class="number">10</span>, <span class="number">20</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum, <span class="keyword">int</span> iNum2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> mySum;</div><div class="line">    mySum = iNum + myNum2;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> mySum;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>myAdd 함수는 2개의 정수를 입력받아 더해서 반환하는 함수 입니다.<br>반환값은 오로지 1개 밖에 반환할 수 없습니다. 여러개의 값을 반환하려면 포인터변수를 이용해야 합니다.<br>main 함수에서 myAdd 함수를 호출하면 결과를 리턴 받습니다. 리턴 받은 값은 변수에 저장하거나 바로 사용하지 않으면 사라집니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    myAdd(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">    myAdd(<span class="number">20</span>, <span class="number">23</span>);</div><div class="line">    myAdd(<span class="number">40</span>, <span class="number">10</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum, <span class="keyword">int</span> iNum2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> mySum;</div><div class="line">    mySum = iNum + iNum2;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d = %d \n"</span>, iNum, iNum2, mySum);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 프로그램은 반환값이 없는 함수를 사용하는 예입니다.<br>myAdd 함수 자체에서 출력을 하고 종료합니다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;함수만들기&quot;&gt;&lt;a href=&quot;#함수만들기&quot; class=&quot;headerlink&quot; title=&quot;함수만들기&quot;&gt;&lt;/a&gt;함수만들기&lt;/h3&gt;&lt;p&gt;함수는 모듈이라고 생각하면 됩니다.&lt;br&gt;지금 까지 main 함수에서만 코딩을 했는데요. 함수를 만들어 
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="함수" scheme="http://korcow.github.io/tags/%ED%95%A8%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>실습 환경 설정</title>
    <link href="http://korcow.github.io/2017/11/15/c-%EC%8B%A4%EC%8A%B5-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/"/>
    <id>http://korcow.github.io/2017/11/15/c-실습-환경-설정/</id>
    <published>2017-11-14T15:14:30.963Z</published>
    <updated>2017-11-14T15:14:30.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="실습-환경-설정"><a href="#실습-환경-설정" class="headerlink" title="실습 환경 설정"></a>실습 환경 설정</h3><div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div><hr><ol><li>virtualbox에 centos설치 - Centos참조</li><li>gvim 설치및 vimrc 세팅 - vim참조</li><li>vim 기본 사용법 - vim참조</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;실습-환경-설정&quot;&gt;&lt;a href=&quot;#실습-환경-설정&quot; class=&quot;headerlink&quot; title=&quot;실습 환경 설정&quot;&gt;&lt;/a&gt;실습 환경 설정&lt;/h3&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.y
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="c," scheme="http://korcow.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>변수와 메모리</title>
    <link href="http://korcow.github.io/2017/11/15/c-%EB%B3%80%EC%88%98%EC%99%80%EB%A9%94%EB%AA%A8%EB%A6%AC/"/>
    <id>http://korcow.github.io/2017/11/15/c-변수와메모리/</id>
    <published>2017-11-14T15:14:21.109Z</published>
    <updated>2017-11-14T15:14:21.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h3><p>변수는 메모리에 값을 담아 놓고 가져다 쓰기 위해서 사용합니다.<br>또한 어떤 값을 담을지에 따라 크기를 지정해서 사용합니다.<br>char는 1바이트의 크기를 갖고, int는 4바이트의 크기, long은 4바이트 혹은 8바이트의 크기를 갖습니다.<br>float은 4바이트, double은 8바이트, long double은 시스템마다 틀립니다.</p><h3 id="메모리"><a href="#메모리" class="headerlink" title="메모리"></a>메모리</h3><p><img src="/c언어기초/2017-11-09_22-46-34.png" alt="Memory"><br>위 그림은 메모리 그림입니다. 폰노이만 아키텍쳐에서 주변 장치는 걷어내고 메모리만으로 설명하겠습니다. 메모리를 읽고 쓰는 장치는 좌우에 붙어 있다고 생각하세요.<br>RD에 신호를 주면 Read, WD에 신호를 주면 Write를 합니다.<br>A0~A7은 주소 영역이고, D0~D7은 data영역입니다.</p><ol><li>65를 메모리에 써보겠습니다. 1번핀 부터 다음과 전기 신호를 줍니다. 0 00001000 01000001 1 그럼 메모리 8번지에 65가 써진답니다.</li><li>읽어 올땐 1 00001000 00000000 0 이렇게 신호를 주면 8번지의 데이터를 읽어 준답니다.<br>실제 메모리는 더 복잡하게 구동됩니다. </li><li>os는 실시간으로 메모리의 사용 유무를 관리하고, 프로그램의 요청에 따라 메모리를 할당해주고 삭제해 줍니다.</li></ol><p><strong>중요한건 메모리에는 byte 마다 주소가 있다는걸 기억하세요.</strong></p><p>메모리를 그림으로 표시할때 아래와 같이 많이 그립니다.<br><img src="/c언어기초/2017-11-09_01-08-34.png" alt="Memory map"><br>int iNum 은 4바이트의 크기로 10001번지 부터 4번지 까지 1이 저장되어 있습니다.<br>char ch 는 1바이트의 크기로 A가 10005번지에 저장되어 있습니다.<br>char ch2 는 1바이트의 크기로 B가 10006번지에 저장되어 있습니다.<br>int iNum2 는 4바이트의 크기로 10007번지 부터 a번지 까지 100이 저장되어 있습니다.<br>double dNum 은 8바이트의 크기로 b번지 부터 12번지 까지 3.14가 저장되어 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;변수&quot;&gt;&lt;a href=&quot;#변수&quot; class=&quot;headerlink&quot; title=&quot;변수&quot;&gt;&lt;/a&gt;변수&lt;/h3&gt;&lt;p&gt;변수는 메모리에 값을 담아 놓고 가져다 쓰기 위해서 사용합니다.&lt;br&gt;또한 어떤 값을 담을지에 따라 크기를 지정해서 사용합니다
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="변수" scheme="http://korcow.github.io/tags/%EB%B3%80%EC%88%98/"/>
    
      <category term="메모리" scheme="http://korcow.github.io/tags/%EB%A9%94%EB%AA%A8%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>배열과 포인터</title>
    <link href="http://korcow.github.io/2017/11/15/c-%EB%B0%B0%EC%97%B4/"/>
    <id>http://korcow.github.io/2017/11/15/c-배열/</id>
    <published>2017-11-14T15:14:14.339Z</published>
    <updated>2017-11-14T15:14:14.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="배열과-포인터"><a href="#배열과-포인터" class="headerlink" title="배열과 포인터"></a>배열과 포인터</h3><p>배열은 변수를 편하게 사용하기 위해 만들어 졌습니다.<br>배열의 인덱스는 0부터 시작합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iNum0 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> iNum1 = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> iNum2 = <span class="number">20</span>;</div><div class="line">    <span class="keyword">int</span> iNum3 = <span class="number">30</span>;</div><div class="line">    <span class="keyword">int</span> iNum4 = <span class="number">40</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iNum0 = %d\n"</span>, iNum0);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iNum1 = %d\n"</span>, iNum1);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iNum2 = %d\n"</span>, iNum2);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iNum3 = %d\n"</span>, iNum3);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iNum4 = %d\n"</span>, iNum4);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위에서 변수를 5개를 만들었습니다. 변수의 이름이 틀리니 출력하려면 위와 같이 printf문을 5번을 사용해야 합니다. 변수명 뒤를 변수로 만들어 for 문으로 돌리면 되겠다 생각한 사람도 있을 겁니다. 하지만 그렇게 사용할 수 없습니다. 동적으로 변수명을 사용 하려고 배열을 만든겁니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> inum[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iNum[0] = %d\n"</span>, iNum[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iNum[1] = %d\n"</span>, iNum[<span class="number">1</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iNum[2] = %d\n"</span>, iNum[<span class="number">2</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iNum[3] = %d\n"</span>, iNum[<span class="number">3</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iNum[4] = %d\n"</span>, iNum[<span class="number">4</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>for문을 사용해 볼까요?<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> inum[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"iNum[%d] = %d\n"</span>, i, iNum[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>위처럼 반복문을 사용하면 쉽게 배열을 출력할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int 4바이트 최대 표시 가능한 수 약 ± 21억</div><div class="line">100번지</div><div class="line">  0123</div><div class="line"> |----|</div><div class="line">2,147,483,647</div></pre></td></tr></table></figure><p>정수형 배열은 4바이트씩 저장됩니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> inum[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">        iNum[i] = iNum[i] + <span class="number">10</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"iNum[%d] = %d\n"</span>, i, iNum[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>또한 값을 쉽게 변경 할 수도 있습니다.</p><h3 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h3><p>c언어에서는 문자열 자료는 없습니다.<br>배열과 포인터를 이용해서 문자열처럼 사용합니다.</p><p>char 자료형은 문자 1자를 저장할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">char 1바이트 영어1문자 한글은 3바이트가 있어야 한글자 표시 가능.</div><div class="line">100번지</div><div class="line">  0123456789AB</div><div class="line">  |-----------|</div><div class="line">  HELLO WORLD␀</div></pre></td></tr></table></figure><p>char 자료형을 배열로 선언 한다면 문자열을 담을 수 있습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> arrStr[<span class="number">12</span>] = <span class="string">"hello world"</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arrStr);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>배열의 크기를 지정할 때는 마지막에 종료문자<code>\0</code>가 항상 포함되기 때문 사용할 크기 +1을 해주어야 합니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> arrStr[] = <span class="string">"안녕하세요. 배열을 사용해서 출력했습니다."</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arrStr);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>배열의 크기를 지정하지 않고 초기화 하면 자동으로 배열의 크기가 지정됩니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> arrChar[<span class="number">100</span>] = <span class="string">"배열로 문자열 처럼 사용합니다."</span></div><div class="line">    <span class="keyword">char</span> *pChar = <span class="string">"포인터를 이용해서도 문자열 처럼 사용할 수 있습니다."</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arrChar);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, pChar);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="변수의-범위"><a href="#변수의-범위" class="headerlink" title="변수의 범위"></a>변수의 범위</h3><p>변수에는 글로벌변수, 로컬변수, 포인터변수가 있습니다.<br>로컬변수: 지역변수라고도 합니다. 함수 내에서만 유효하고 함수가 종료되면 없어 집니다.<br>글로별 변수: 프로그램 전체 어디서나 사용이 가능합니다. 프로그램이 종료되면 없어집니다.<br>포인터 변수: 메모리 주소를 담을 수 있는 변수이며 메모리의 주소가 유효 하다면 범위 제한을 받지 않습니다. 포인터 변수는 사용 범위 제한을 받지 않지만 함수가 종료되면 사라집니다.</p><h3 id="포인터"><a href="#포인터" class="headerlink" title="포인터"></a>포인터</h3><p>포인터는 포인터 변수라고 합니다. 부르기 쉽게 포인터라고 줄여서 말합니다. 변수명 앞에 <code>*</code>을 붙여주면 포인터 변수가 됩니다.<br>포인터 변수는 메모리의 주소를 담는 변수 입니다.<br>포인터 변수는 글로벌 변수와 로컬변수의 장점을 가지고 있습니다.<br>어디서든 사용할 수 있고 함수가 종료되면 없어 집니다. 이런 장점 때문에 포인터 변수를 많이 사용합니다.</p><p>함수는 리턴값을 하나만 전달 할 수 있습니다. 여러개를 전달 할 수 없습니다.<br>그래서 변수를 글로벌 변수로 선언해서 함수 안에서 처리를 합니다.<br>글로벌 변수를 쓰지 못할 상황이라면 포인터를 사용할 수 있습니다.<br>함수의 인자로 포인터 변수를 넘겨 줄수 있고, 함수의 리턴값으로 포인터 변수를 사용할 수 있기 때문에 함수안과 밖에서 자유롭게 주소값이 가리키는 상대주소의 데이터를 사용하고 수정할 수 있습니다. c언어에만 있는 특별한 기능입니다. </p><blockquote><p>글로벌 변수는 작은 단위의 프로그램에서는 문제가 없지만 규모가 큰 프로그램에서는 사용을 자제하는 편입니다.<br>왜냐하면 함수안에 있는 변수는 함수가 종료되면 바로 없어 지지만 글로벌 변수는 프로그램을 종료 할 때까지 남아 있기 때문이고, 수백명의 프로그래머가 프로그램을 작성 하다보면 변경되서는 안될 값이 변경 될수 있기 때문입니다.<br>예를 들어서 물건의 값을 계산하는 프로그램을 만든다 가정해 보죠.<br>새우깡 100 원 수량 2개 합계금액 200원<br>합계금액을 저장해야 하는데, 합계금액이 글로벌 변수 입니다. 혼자서 프로그램을 사용한다면 문제가 없겠지만 편의 점에 있는 포스 프로그램이라고 생각해 보세요. 전국에서 동시에 합계금액을 공유해서 쓴다면 … 어떤 값이 들어 갈지 아무도 모르는 거죠. 그래서 환경변수 이외에는 글로벌 변수를 잘 쓰지 않습니다. 쓰지 말라는 것이 아니라 알고 쓰라는 겁니다.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> *pSum)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iNum = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> iNum2 = <span class="number">20</span>;</div><div class="line">    <span class="keyword">int</span> iSum = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// pSum을 선언 iSum의 주소를 pSum에 저장</span></div><div class="line">    <span class="keyword">int</span> *pSum = &amp;iSum;  <span class="comment">// 1: 선언과 정의 </span></div><div class="line"><span class="comment">// iSum 주소를 출력</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iSum 주소 : %p \n"</span>, &amp;iSum);     </div><div class="line"><span class="comment">// :2 pSum이 가리키는 주소를 출력 </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"pSum이 가리키는 주소 : %p \n"</span>, pSum);   </div><div class="line"><span class="comment">// pSum 주소를 출력</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"pSum의 주소: %p \n"</span>, &amp;pSum); </div><div class="line"><span class="comment">// :3 pSum이 가리키는 주소의 값을 출력 </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"pSum이 가리키는 주소에 들어있는 값 : %d \n"</span>, *pSum);    </div><div class="line"></div><div class="line">    iSum = iNum + iNum2;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"프로그램에서 iSum 변수에 값을 저장 : %d\n"</span>, iSum);</div><div class="line"></div><div class="line">    myAdd(pSum); <span class="comment">// 2: 주소를 인자로 전달</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"함수에서 글로벌변수를 지정하지 않고 주소를 사용해 값을 저장 : %d\n"</span>, iSum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> *pointerVariable)</span></span>&#123; <span class="comment">// 인자를 주소로 받음.</span></div><div class="line">    <span class="keyword">int</span> iNum = <span class="number">40</span>;</div><div class="line">    <span class="keyword">int</span> iNum2 = <span class="number">50</span>;</div><div class="line">    *pointerVariable = iNum + iNum2; <span class="comment">//:4 주소에 값을 저장 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">iSum 주소 : 0x7ffeec95c774</div><div class="line">pSum이 가리키는 주소 : 0x7ffeec95c774</div><div class="line">pSum의 주소: 0x7ffeec95c768</div><div class="line">pSum이 가리키는 주소에 들어있는 값 : 0</div><div class="line">프로그램에서 iSum 변수에 값을 저장 : 30</div><div class="line">함수에서 글로벌변수를 지정하지 않고 주소를 사용해 값을 저장 : 90</div></pre></td></tr></table></figure><p>복잡하게 생각하지 마세요.</p><ul><li>포인터변수를 선언 할때는 변수명 앞에 <code>*</code>붙여서 선언 합니다.<br>  포인터 변수는 주소를 저장하는 변수 이기 때문에 iSum변수의 주소를 대입했습니다. 대입할 때는 주소를 값을 계산해주는 <code>&amp;</code>를 변수명 앞에 붙였습니다. 이렇게 하면 주소가 포인터변수에 저장됩니다.</li><li>*pSum 변수는 이제 어디서든지 사용할 수 있습니다.</li><li>pSum이라고 사용하면 주소값을 사용하고</li><li>*pointerVariable이라고 사용하면 주소가 가리키는 주소의 값을 사용합니다.</li><li>실제 같은 말이 반복되기 때문에 헛갈립니다. <ul><li>:1 선언하고</li><li>:2 주소값을 사용하고</li><li>:3 주소가 가리키는 값을 사용합니다.</li><li>:4 주소값만으로 어디서든지 주소가 가리키는 값을 사용가능.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">long 8바이트 최대 표시 가능한 수 약 ± 9백2십경</div><div class="line">100번지</div><div class="line">  01234567</div><div class="line"> |--------|</div><div class="line">9,223,372,036,854,775,807</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;배열과-포인터&quot;&gt;&lt;a href=&quot;#배열과-포인터&quot; class=&quot;headerlink&quot; title=&quot;배열과 포인터&quot;&gt;&lt;/a&gt;배열과 포인터&lt;/h3&gt;&lt;p&gt;배열은 변수를 편하게 사용하기 위해 만들어 졌습니다.&lt;br&gt;배열의 인덱스는 0부터 시작합니
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="배열" scheme="http://korcow.github.io/tags/%EB%B0%B0%EC%97%B4/"/>
    
      <category term="포인터" scheme="http://korcow.github.io/tags/%ED%8F%AC%EC%9D%B8%ED%84%B0/"/>
    
      <category term="문자열" scheme="http://korcow.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>간단한 계산하기</title>
    <link href="http://korcow.github.io/2017/11/15/c-%EA%B0%84%EB%8B%A8%ED%95%9C-%EA%B3%84%EC%82%B0%ED%95%98%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/11/15/c-간단한-계산하기/</id>
    <published>2017-11-14T15:13:48.458Z</published>
    <updated>2017-11-14T15:13:48.458Z</updated>
    
    <content type="html"><![CDATA[<h3 id="간단한-계산하기"><a href="#간단한-계산하기" class="headerlink" title="간단한 계산하기"></a>간단한 계산하기</h3><div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div><hr><p>이번에는 printf 문을 이용해서 간단한 계산을 해보겠습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 + 3 = %d\n"</span>, <span class="number">10</span> + <span class="number">3</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 - 3 = %d\n"</span>, <span class="number">10</span> - <span class="number">3</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 / 3 = %d\n"</span>, <span class="number">10</span> / <span class="number">3</span>); <span class="comment">// 정수 / 정수 = 정수</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 / 3.0 = %.2f\n"</span>, <span class="number">10</span> / <span class="number">3.0</span>); <span class="comment">// 정수 / 실수 = 실수</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 * 3 = %d\n"</span>, <span class="number">10</span> * <span class="number">3</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"10 \% 3 = %d\n"</span>, <span class="number">10</span> % <span class="number">3</span>); <span class="comment">//나머지 연산</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"2 + 10 * 3 = %d\n"</span>, <span class="number">2</span> + <span class="number">10</span> * <span class="number">3</span>); <span class="comment">// 우선순위</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"(2 + 10) * 3 = %d\n"</span>, (<span class="number">2</span> + <span class="number">10</span>) * <span class="number">3</span>); <span class="comment">// 우선순위</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>우리가 알고 있는 간단한 수학 계산을 해보았습니다. 3을 2로 고쳐보세요.<br>복붙을 사용해도 됩니다. 불편하지 않나요. 그럼 변수라는 것을 사용해 봅시다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, d; <span class="comment">// 정수형 변수 선언</span></div><div class="line">    <span class="keyword">float</span> c      <span class="comment">// 실수형 변수 선언</span></div><div class="line">    <span class="comment">// 초기값 입력</span></div><div class="line">    a = <span class="number">10</span>;</div><div class="line">    b = <span class="number">3</span>;</div><div class="line">    c = <span class="number">3.0</span>;</div><div class="line">    d = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>, a, b, a + b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d - %d = %d\n"</span>, a, b, a - b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d / %d = %d\n"</span>, a, b, a / b); <span class="comment">// 정수 / 정수 = 정수</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d / %.2f = %.2f\n"</span> a, c, a / c); <span class="comment">// 정수 / 실수 = 실수</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d * %d = %d\n"</span> a, b, a * b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d \% %d = %d\n"</span> a, b, a % b); <span class="comment">//나머지 연산</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d * %d = %d\n"</span> a, b, d + a * b); <span class="comment">// 우선순위</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"(%d + %d) * %d = %d\n"</span> a, b, (d + a) * b); <span class="comment">// 우선순위</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>변수를 이용해서 프로그램을 고쳤습니다. 이제 값을 바꾸어 보세요.<br>값을 바꿀때는 일일히 printf문에서 고치지 않아도 됩니다.<br>초기값 설정한 것을 고치면 됩니다. 훨씬 변경하기가 수월해 졌습니다.</p><p>shell에서도 계산을 할 수 있습니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> $((2 + 3))</div><div class="line">$ <span class="built_in">echo</span> $((2 / 3))</div><div class="line">$ <span class="built_in">echo</span> $((2 - 3))</div><div class="line">$ <span class="built_in">echo</span> $((2 * 3))</div></pre></td></tr></table></figure></p><p>bc라는 계산기도 있습니다 복잡한 수학, 과학용 계산이 가능합니다.<br>없다면 설치<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Centos</span></div><div class="line">$ sudo yum install bc</div><div class="line"></div><div class="line"><span class="comment">#ubuntu</span></div><div class="line">$ sudo apt-get install bc</div><div class="line"></div><div class="line"><span class="comment">#macos</span></div><div class="line">$ brew install bc</div><div class="line"></div><div class="line">$ <span class="built_in">echo</span> <span class="string">" 1 + 2"</span> | bc</div><div class="line">$ man bc</div></pre></td></tr></table></figure></p><p>vim도 인터프리터 입니다. 계산이 가능합니다. bc를 사용할 수도 있습니다.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">echo</span> <span class="number">1</span>+<span class="number">1</span></div><div class="line"></div><div class="line"><span class="number">2</span> + <span class="number">3</span> #계산식에 커서를 두고 </div><div class="line">:.!bc</div></pre></td></tr></table></figure></p><h3 id="상수"><a href="#상수" class="headerlink" title="상수"></a>상수</h3><p>일반적인 수를 상수라고 합니다. </p><h3 id="변수명-작성"><a href="#변수명-작성" class="headerlink" title="변수명 작성"></a>변수명 작성</h3><p>변수명을 작성하는 규칙이 있습니다.<br><code>_</code>를 제외한 특수문자가 있으면 안됩니다.<br>공백이 있으면 안됩니다.<br>의미 있는 단어로 작성해야 합니다.<br>위와 같이 a, b, c, 이런식으로 작성하면 안됩니다.<br>의미를 부여하기 힘들어도 최소한 iNum 정로로 만들어 줍니다.<br>소문자 i는 int를 의미 합니다. 정수형 숫자라는 것을 알 수 있습니다.<br>aNum은 배열 숫자, dNum은 더블형, fNum은 실수형 이런식으로 작성하면 좋습니다.<br>그럼 변수명을 바꾸어 보세요. iNum1, iNum2, iNum3, fNum1 </p><p>프로그램 작성을 편하게 하려고 변수를 사용합니다.<br>변수는 몇가지 종류가 있습니다.</p><ul><li>문자1자를 담을 수 있는 변수</li><li>정수를 담을 수 있는 정수형 변수</li><li>실수를 담을 수 있는 실수형 변수</li></ul><table><thead><tr><th>변수형</th><th>설명</th><th>크기</th></tr></thead><tbody><tr><td>문자형</td><td>char</td><td>1byte</td></tr><tr><td>정수형</td><td>boolean</td><td>1bit</td></tr><tr><td>정수형</td><td>int</td><td>4byte</td></tr><tr><td>정수형</td><td>long</td><td>8byte</td></tr><tr><td>실수형</td><td>float</td><td>4byte</td></tr><tr><td>실수형</td><td>double</td><td>8byte</td></tr></tbody></table><p>자료형은 각각 다른 크기를 가집니다. 변수를 선언 할때 자료형을 먼저 정하고 변수명을 써줍니다.<br>변수의 크기를 생각해서 자료형을 사용해야 합니다.<br>자주 사용하지 않는 자료형은 제외 했습니다. 배열과 포인터 변수는 뒤에 설명합니다.<br>다음은 정수형 자료가 표현 할 수 있는 크기를 확인 할 수 있는 프로그램입니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;    </span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> cNum = CHAR_MIN;</div><div class="line">    <span class="keyword">short</span> shNum = SHRT_MIN;</div><div class="line">    <span class="keyword">int</span> iNum = INT_MIN;</div><div class="line">    <span class="keyword">long</span> lNum = LONG_MIN;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> llNum5 = LLONG_MIN;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d %ld %lld\n"</span>, cNum, shNum, iNum, lNum, llNum);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span>(cNum));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span>(shNum));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span>(iNum));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span>(lNum));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span>(llNum));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>다음은 실수형 자료가 표현 할 수 있는 크기를 확인하는 프로그램입니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;float.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">float</span> fNum1 = FLT_MIN;</div><div class="line">    <span class="keyword">float</span> fNum2 = FLT_MAX;</div><div class="line">    <span class="keyword">double</span> dNum3 = DBL_MIN;</div><div class="line">    <span class="keyword">double</span> dNum4 = DBL_MAX;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">double</span> ldNum5 = LDBL_MIN;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">double</span> ldNum6 = LDBL_MAX;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.40f %.2f\n"</span>, fNum1);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.40f %.2f\n"</span>, fNum2);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%e %e\n"</span>, dNum3, dNum4);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%Le %Le\n"</span>, ldNum5, ldNum6);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>자료형은 시스템과 운영체제에 따라 크기가 다를 수 있습니다.<br>꼭 사용할 수 있는 크기를 확인하고 사용해야 합니다.</p><h3 id="오버플로우-언더플로우"><a href="#오버플로우-언더플로우" class="headerlink" title="오버플로우/언더플로우"></a>오버플로우/언더플로우</h3><p>정수형 int 자료형은 -2,147,483,648 ~ 2,147,483,647 까지 표현가능 했습니다.<br>2,147,483,647 에 1을 더하면 어떻게 될까요. 반대로 -2,147,483,648에서 -1을 하면 어떻게 되는지 확인해 보세요.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;간단한-계산하기&quot;&gt;&lt;a href=&quot;#간단한-계산하기&quot; class=&quot;headerlink&quot; title=&quot;간단한 계산하기&quot;&gt;&lt;/a&gt;간단한 계산하기&lt;/h3&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.y
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="c" scheme="http://korcow.github.io/tags/c/"/>
    
      <category term="사칙연산" scheme="http://korcow.github.io/tags/%EC%82%AC%EC%B9%99%EC%97%B0%EC%82%B0/"/>
    
      <category term="자료형" scheme="http://korcow.github.io/tags/%EC%9E%90%EB%A3%8C%ED%98%95/"/>
    
      <category term="변수" scheme="http://korcow.github.io/tags/%EB%B3%80%EC%88%98/"/>
    
      <category term="상수" scheme="http://korcow.github.io/tags/%EC%83%81%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>while 문</title>
    <link href="http://korcow.github.io/2017/11/15/c-while/"/>
    <id>http://korcow.github.io/2017/11/15/c-while/</id>
    <published>2017-11-14T15:13:39.498Z</published>
    <updated>2017-11-14T15:13:39.498Z</updated>
    
    <content type="html"><![CDATA[<h3 id="while문"><a href="#while문" class="headerlink" title="while문"></a>while문</h3><h4 id="기본구문"><a href="#기본구문" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(조건)&#123;</div><div class="line">    반복할 문장; <span class="comment">//조건이 참이면 수행</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//조건이 거짓이면 수행</span></div></pre></td></tr></table></figure><p><img src="/c언어기초/2017-11-08_00-15-50.png" alt="while 반복문"><br>while문은 조건이 참인동안 계반 반복합니다.<br>반복문에 조건이 거짓되는 수식을 만들지 않으면 무한 반복됩니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (iNum &lt; <span class="number">10</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d line\n"</span>, iNum);</div><div class="line">        iNum = inum + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 예제에서 참인 조건은 inum이 10보다 작으면 됩니다.<br>초깃값으로 0을 주었으니 inum이 10이 되면 거짓이 되므로 0부터 9까지 10번 출력을 하게됩니다.</p><h3 id="do-while문"><a href="#do-while문" class="headerlink" title="do~while문"></a>do~while문</h3><h4 id="기본구문-1"><a href="#기본구문-1" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    반복할 문장; <span class="comment">//최초 1번은 무조건 실행, 이후 조건이 참이면 수행</span></div><div class="line">&#125; <span class="keyword">while</span>(조건);</div></pre></td></tr></table></figure><p><img src="/c언어기초/2017-11-08_00-16-03.png" alt="do~while 반복문"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d line\n"</span>, iNum); <span class="comment">// 반복할 명령</span></div><div class="line">        iNum = inum + <span class="number">1</span>;           <span class="comment">// 반복할 조건을 변화시킬 식</span></div><div class="line">    &#125; <span class="keyword">while</span> (iNum &lt; <span class="number">10</span>);           <span class="comment">// 반복 조건식</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>do~while문은 최초 한번은 무조건 실행되는 반복을 실행 할 때 사용합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;while문&quot;&gt;&lt;a href=&quot;#while문&quot; class=&quot;headerlink&quot; title=&quot;while문&quot;&gt;&lt;/a&gt;while문&lt;/h3&gt;&lt;h4 id=&quot;기본구문&quot;&gt;&lt;a href=&quot;#기본구문&quot; class=&quot;headerlink&quot; title=&quot;기
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="while" scheme="http://korcow.github.io/tags/while/"/>
    
      <category term="dowhile" scheme="http://korcow.github.io/tags/dowhile/"/>
    
  </entry>
  
  <entry>
    <title>if문 사용하기</title>
    <link href="http://korcow.github.io/2017/11/15/c-if%EB%AC%B8/"/>
    <id>http://korcow.github.io/2017/11/15/c-if문/</id>
    <published>2017-11-14T15:13:31.961Z</published>
    <updated>2017-11-14T15:13:31.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h3><p>if 명령은 조건을 판단해서 참일 경우 또는 거짓 일경우 분기를 하기 위해 사용하는 명령입니다.</p><h4 id="기본구문"><a href="#기본구문" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 실행 명령이 1줄일 경우</span></div><div class="line"><span class="keyword">if</span> (조건)</div><div class="line">    참인 경우 실행 명령<span class="number">1</span>;</div></pre></td></tr></table></figure><p><img src="/c언어기초/2017-11-08_00-11-29.png" alt="if문 flowchart"></p><p>조건을 판단해서 참인 경우 문장1을 실행하고 거짓인 경우 다음 문장을 수행합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum1 = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (iNum1 &gt; iNum2)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다.\n"</span>, iNum1, iNum2);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 작습니다.\n"</span>, iNum1, iNum2);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 8행처럼 보기 좋게 if문 다음줄에 들여 쓰기후 적어 줍니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum1 = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (iNum1 &gt; iNum2) <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2); <span class="comment">// if문이 참인경우 실행</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 작습니다."</span>, iNum1, iNum2);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위와 같이 같은 줄에 붙여 써도 됩니다만 가능한 보기 좋게 작성하는 것이 좋습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum1 = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (iNum1 &gt; iNum2) </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2); <span class="comment">//if문이 참인경우 실행</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 작습니다."</span>, iNum1, iNum2); <span class="comment">//if문과 관계없이 실행</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위와 같이 사용해도 결과는 문제 없이 나옵니다. 문법적으로 오류가 없기 때문이죠. 참인 경우 다음 한줄을 실행한 다고 했습니다. 절대 위와 같이 사용하면 프로그램 분석 하는데 불편합니다. 들여쓰기를 잘해야 소스를 읽기가 편합니다. 오류를 찾기도 쉽구요. 아래와 같이 써도 전혀 문제 없습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; int main(int argc, const char *argv[]) &#123; int iNum1 = 10; int inum2 = 20; </span></span></div><div class="line"><span class="keyword">if</span> (iNum1 &gt; iNum2) <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2); <span class="built_in">printf</span> (<span class="string">"%d은 %d보다 작습니다."</span>, </div><div class="line">iNum1, iNum2); <span class="keyword">return</span> <span class="number">0</span>; &#125;</div></pre></td></tr></table></figure><p>읽기가 매우 힘들죠. ^^ 코딩은 읽기 좋게 예쁘게 하는게 좋습니다.</p><hr><h3 id="if-명령1-명령2…"><a href="#if-명령1-명령2…" class="headerlink" title="if {명령1;명령2…}"></a>if {명령1;명령2…}</h3><h4 id="기본구문-1"><a href="#기본구문-1" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 실행 명령이 여러줄 일 경우</span></div><div class="line"><span class="keyword">if</span> (조건)&#123;</div><div class="line">    명령<span class="number">1</span>;</div><div class="line">    명령<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="/c언어기초/2017-11-08_01-09-51.png" alt="if flowchart"></p><p>조건이 참일 경우 여러줄을 실행해야 한다면 위와 같이 사용할 수 있습니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum1 = <span class="number">30</span>;</div><div class="line">    <span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (iNum1 &gt; iNum2)&#123; </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"30과 20을 비교하면: "</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>참인 경우 실행할 문장이 1줄이어도 위와 같이 써주면 보기에 좋습니다. 가능한 if문은 위와 같이 쓰는 걸 추천합니다.</p><hr><h3 id="if-else"><a href="#if-else" class="headerlink" title="if ~ else"></a>if ~ else</h3><h4 id="기본구문-2"><a href="#기본구문-2" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 조건이 참이 아닐 경우 else를 실행</span></div><div class="line"><span class="keyword">if</span> (조건)&#123; <span class="comment">//참인경우 실행</span></div><div class="line">    명령<span class="number">1</span>;  </div><div class="line">    명령<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123; <span class="comment">// 참인 아닌경우 실행</span></div><div class="line">    명령<span class="number">1</span>;</div><div class="line">    명령<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="/c언어기초/2017-11-08_00-13-50.png" alt="if~else flowchart"><br>if~else 형식은 if 조건이 참인경우 문장1을 거짓인 경우 문장2문를 실행 하도록 할 때 사용합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum1 = <span class="number">30</span>;</div><div class="line">    <span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (iNum1 &gt; iNum2)&#123; </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 작습니다."</span>, iNum1, iNum2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 code 처럼 참이 안닌경우 else구문을 실행 합니다.</p><hr><h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if~else if~else"></a>if~else if~else</h3><h4 id="기본구문-3"><a href="#기본구문-3" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 다중 if ~ else if</span></div><div class="line"><span class="keyword">if</span> (조건)&#123;</div><div class="line">    명령<span class="number">1</span>;</div><div class="line">    명령<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(조건)&#123;</div><div class="line">    명령<span class="number">1</span>;</div><div class="line">    명령<span class="number">2</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    명령<span class="number">1</span>;</div><div class="line">    명령<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="/c언어기초/2017-11-08_00-15-00.png" alt="if~else if~else"></p><p>[if~else if~else] 다중 if문은 여러번 비교를 해야 할때 사용합니다.<br>숫자를 비교할 때, 숫자가 클수도, 작을수도, 같을 수도 있습니다.<br>크다 작다만 판단한다면 논리적 오류가 생길 수도 있습니다. 이럴때 한번더 비교해서 같으면 같다라고 출력하고 같지 않으면 작다라고 출력해야 합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum1 = <span class="number">30</span>;</div><div class="line">    <span class="keyword">int</span> inum2 = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (iNum1 &gt; iNum2)&#123; </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 큽니다."</span>, iNum1, iNum2);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>( iNum == iNum2)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d은 %d와 같습니다."</span>, iNum1, iNum2);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d은 %d보다 작습니다."</span>, iNum1, iNum2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;if문&quot;&gt;&lt;a href=&quot;#if문&quot; class=&quot;headerlink&quot; title=&quot;if문&quot;&gt;&lt;/a&gt;if문&lt;/h3&gt;&lt;p&gt;if 명령은 조건을 판단해서 참일 경우 또는 거짓 일경우 분기를 하기 위해 사용하는 명령입니다.&lt;/p&gt;
&lt;h4 id=&quot;
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="if" scheme="http://korcow.github.io/tags/if/"/>
    
      <category term="else" scheme="http://korcow.github.io/tags/else/"/>
    
      <category term="if~else" scheme="http://korcow.github.io/tags/if-else/"/>
    
      <category term="while" scheme="http://korcow.github.io/tags/while/"/>
    
      <category term="do while" scheme="http://korcow.github.io/tags/do-while/"/>
    
      <category term="for" scheme="http://korcow.github.io/tags/for/"/>
    
  </entry>
  
  <entry>
    <title>for 반복문</title>
    <link href="http://korcow.github.io/2017/11/15/c-for%EB%AC%B8/"/>
    <id>http://korcow.github.io/2017/11/15/c-for문/</id>
    <published>2017-11-14T15:13:24.420Z</published>
    <updated>2017-11-14T15:13:24.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h3><h4 id="기본구문"><a href="#기본구문" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (초기값; 조건문; 증가값)&#123;</div><div class="line">    반복할 명령1;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>특정한 횟수 만큼 반복해서 명령을 실행 할 때 사용합니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"hellow world"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>위 예제는 helow world를 10번 반복 출력하는 예제 입니다.<br><code>i++</code>는 후행증가 연산자라고 부르는데 먼저 i값을 사용하고, 1을 증가 시킵니다.<br><code>++i</code>는 선행증가 연산자라고 합니다. 반대로 1을 증가시켜 사용합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iSum = <span class="number">0</span>;   <span class="comment">//1:</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;      <span class="comment">//2:</span></div><div class="line">        iSum = iSum + (i + <span class="number">1</span>);  <span class="comment">//3:</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    print(<span class="string">"1 부터 10 까지 합계는 %d 입니다.\n"</span>, iSum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 예제는 1부터 10까지 더하는 프로그램 입니다.<br>1: 은 값을 누적하기 위한 변수 입니다.<br>2: 초깃값은 정수형 0 부터 시작하고, 조건은 10보다 작을때 까지, 증가는 1씩 증가합니다.<br>4: iSum과 (i+1)을 더해서 iSum에 누적을 합니다.<br>i의 시작값이 0이기 때문에 1을 더해 준겁니다.</p><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">55</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iSum = <span class="number">0</span>;   <span class="comment">//1:</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;      <span class="comment">//2:</span></div><div class="line">    <span class="comment">//for (int i = 0; i &lt;= 10; i++) &#123;       //3:</span></div><div class="line">        iSum = iSum + i ;   <span class="comment">//4:</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    print(<span class="string">"1 부터 10 까지 합계는 %d 입니다.\n"</span>, iSum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 프로그램도 1부터 10까지 10번 더하는 프로그램입니다.<br>2: 라인을 보세요. 초깃값, 수식, 증가값을 보고 한눈에 10번 실행 되겠군 하고 떠오르시나요 ? 아님 11-1=10, 10번하고 떠오르시나요. 3: 라인은 어떤가요? 작거나 같다. 같으니까 10도 포함되겠군. 한번더 생각해야 합니다. cpu도 한번 더 일을 하게 된답니다. 코딩은 한줄을 더 쓰더라도 읽기 쉬워야 합니다. 처음에 사용했던 <code>for (int i = 0; i &lt; 10; i++)</code> 를 사용하는게 직관적입니다. i의 값을 1부터 사용해야 한다면 실행 구문에서 <code>+ 1</code>을 해주면 됩니다. </p><blockquote><p>나중에 만개의 프로그램을 만들었는데, 이 프로그램이 동시에 실행해서 사용 해야 한다고 가정합니다.<br>컴퓨터의 속도가 너무 느려져서 고민을 하겠죠. 프로그램을 수정해서 속도를 빠르게 할지 아님 컴퓨터를 더 살지. 비용을 계산해 보세요. 만개의 소스를 수정하려면 시간이 얼마가 걸릴지. 컴퓨터를 1대를 더사면 비용이 얼마나 더들지.<br>컴퓨터 1대에 300만원이라고 가정하고, 소스를 수정하는데 직원 10명이 소스 1000개씩 수정한다면 하루 10개씩 수정한다 하더라도 100일이 걸립니다. 인건비만 9000만원정도 소요 될겁니다. 9000만원들여서 얼마나 빠르게 개선을 할 수 있을 까요?<br>50% 빠르게 개선 할 수 있다고 장담 할 수 있나요. ?<br>하지만 컴퓨터를 추가한다면 1대를 더 추가 하면 2배가 빨라지고, 2대를 추가하면 3배가 빨라집니다. 900만원 들여 3배 빠르게 사용할 수 있습니다.<br>이번엔 프로그램에 기능을 추가한다고 가정해 보겠습니다. 읽기 쉬운 프로그램은 다른 사람이 기능을 추가 한다 하더라도 빠른 시간내에 분석해서 기능을 추가 할 수 있습니다. 분석하는데 많은 시간을 들이지 않을 수 있습니다.<br>hello world를 3번 출력하는 프로그램을 만든다 가정해 보겠습니다.  for 문으로 만든 프로그램이 좋은 프로그램일까요 아님 3번 복사 붙여넣기 한 프로그램이 좋은 프로그램일까요?<br>hello world를 100번 출력한다고 가정 해보죠. for문으로 출력한 프로그램이 좋은 프로그램일까요. 아님 100번 복사 붙여 넣기 한 프로그램이 좋은 프로그램일까요 ?<br>다시한번 강조하지만 읽기 쉽고(덜 생각하게하고) 들여쓰기와 주석을 많이 사용한 프로그램이 좋은 프로그램입니다. </p></blockquote><p>10을 1000조로 바꾸어 계산해 보세요.<br>int는 21억 까지 밖에 계산을 못합니다. int를 long long 으로 바꾸어야 합니다.<br>프로그램 실행 시간도 체크 해보세요.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:!time <span class="keyword">for</span>.<span class="keyword">o</span></div></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iSum = <span class="number">0</span>;   <span class="comment">//1:</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; i++) &#123;        <span class="comment">//2:</span></div><div class="line">        iSum = iSum + i;    <span class="comment">//3:</span></div><div class="line">        print(<span class="string">"1 부터 10 까지 합계는 %d 입니다.\n"</span>, iSum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>이번에는 출력문을 for문 안에 넣었습니다.<br>단연히 출력문도 조건만큼 출력 될겁니다.<br>100만번을 출력할 텐데 속도를 확인 해 보세요.<br>느려진 이유는 cpu만 사용한 것이 아니라 i/o장치(모니터)도 같이 사용했기 때문입니다.<br>cpu보다 i/o장치는 많이 느립니다. 하드디스크는 더 느리답니다.</p><p>프로그램 실행 중간에 종료 하려면 Ctrl + c<br>vim에서 실수로 Ctrl + z를 눌렀다면 fg</p><h3 id="for문의-중첩"><a href="#for문의-중첩" class="headerlink" title="for문의 중첩"></a>for문의 중첩</h3><h4 id="기본구문-1"><a href="#기본구문-1" class="headerlink" title="기본구문"></a>기본구문</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (초깃값; 조건; 증가값)&#123;</div><div class="line">    for (초깃값; 조건; 증가값)&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>for문은 중첩해서 사용하는 경우가 많습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div><div class="line">**********</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &lt;= <span class="number">1</span>; i--) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">*</div><div class="line">**</div><div class="line">***</div><div class="line">****</div><div class="line">*****</div><div class="line">******</div><div class="line">*******</div><div class="line">********</div><div class="line">*********</div><div class="line">**********</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"*"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">**********</div><div class="line">*********</div><div class="line">********</div><div class="line">*******</div><div class="line">******</div><div class="line">*****</div><div class="line">****</div><div class="line">***</div><div class="line">**</div><div class="line">*</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;for문&quot;&gt;&lt;a href=&quot;#for문&quot; class=&quot;headerlink&quot; title=&quot;for문&quot;&gt;&lt;/a&gt;for문&lt;/h3&gt;&lt;h4 id=&quot;기본구문&quot;&gt;&lt;a href=&quot;#기본구문&quot; class=&quot;headerlink&quot; title=&quot;기본구문&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="for" scheme="http://korcow.github.io/tags/for/"/>
    
  </entry>
  
  <entry>
    <title>c언어를 시작하며</title>
    <link href="http://korcow.github.io/2017/11/15/c-c%EC%96%B8%EC%96%B4%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0/"/>
    <id>http://korcow.github.io/2017/11/15/c-c언어를-시작하며/</id>
    <published>2017-11-14T15:11:07.494Z</published>
    <updated>2017-11-14T15:11:07.494Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div><hr><p>기본적으로 알아두어야 할 것을 정리 해봤습니다.</p><h3 id="C언어의-역사"><a href="#C언어의-역사" class="headerlink" title="C언어의 역사"></a>C언어의 역사</h3><ul><li>1963년 - ALGOL 60에서 CPL이 파생</li><li>1969년 - BCPL 개발</li><li>1970년 - B 언어 개발</li><li>1972년 - 벨 연구소 (Bell Laboratories) 에 있는 Dennis Ritchie가 B의 후속으로 C 개발</li><li>1983년 - 미국 국가 표준 협회(ANSI, American National Standards Institute) 에서 짐 브로디(Jim Brodie) 주축으로 X3J11 위원회 소집</li><li>1983년 12월 14일 - ANSI X3.159-1989 라는 공식명칭으로 C 언어 표준 지정</li><li>1999년 - C99 표준안이 ISO/IEC 9899:1999라는 명칭으로 출간됨</li><li>2000년 5월 - ANSI의 표준으로 C99가 채택됨</li><li>2011년 - 12월 8일 C11 표준안이 ISO/IEC 9899:2011라는 명칭으로 출간됨</li></ul><h3 id="C언어는-모든-프로그램의-기본"><a href="#C언어는-모든-프로그램의-기본" class="headerlink" title="C언어는 모든 프로그램의 기본"></a>C언어는 모든 프로그램의 기본</h3><ul><li>c언어는 Asambler로 뼈대를 만들었습니다.<ul><li>만들어진 기본 c언어로 각종 명령과 라이브러리를 만들었습니다.</li></ul></li><li>모든 프로그래밍 언어는 c언어로 만듭니다.<ul><li>python은 c언어로 기본 뼈대를 만들고</li><li>만들어진 python 프로그램으로 각종 함수 및 라이브러리를 만듭니다.</li><li>만들어진 python으로 python을 만듭니다. 이름를 pypy라고 붙였습니다.</li><li>c++, java, rube, 모든 언어가 똑같습니다.</li></ul></li><li>모든 os는 Asambler로 뼈대를 만들고 c언어로 만듭니다.</li></ul><h3 id="저급언어"><a href="#저급언어" class="headerlink" title="저급언어"></a>저급언어</h3><p>기계어<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">7F 45 4C 46 01 01 01 00 00 00 00 00 00 00 00 00 </div><div class="line">02 00 03 00 01 00 00 00 35 40 B3 04 2C 00 00 00 </div><div class="line">00 00 00 00 00 00 00 00 34 00 20 00 01 00 00 00 </div><div class="line">00 00 00 00 00 40 B3 04 B2 0C EB 1C 62 00 00 00 </div><div class="line">62 00 00 00 05 00 00 00 00 10 00 00 48 65 6C 6C </div><div class="line">6F 20 77 6F 72 6C 64 0A B9 4C 40 B3 04 93 CD 80 </div><div class="line">EB FB</div></pre></td></tr></table></figure></p><p>위 소스는 리눅스x86 16bit cpu에서 hello world를 찍는 기계어입니다.<br>64bit cpu에서는 코딩 불가 위에처럼 528줄 이나 써야 되네요. ^^;</p><div class="video-container"><iframe src="//www.youtube.com/embed/TgKgH5abLfg" frameborder="0" allowfullscreen></iframe></div><p>8bit apple computer에서 기계어 코딩하는 동영상 입니다.<br>ascii와 hello world를 힘들게 찍네요.<br>appleII는 롬베이직이 바로 떴었는데…</p><p>어셈블리어</p><figure class="highlight plain"><figcaption><span>어셈블리어 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">section     .text</div><div class="line">global      _start                 ;must be declared for linker (ld)</div><div class="line"></div><div class="line">_start:                            ;tell linker entry point</div><div class="line"></div><div class="line">    mov     edx,len                ;message length</div><div class="line">    mov     ecx,msg                ;message to write</div><div class="line">    mov     ebx,1                  ;file descriptor (stdout)</div><div class="line">    mov     eax,4                  ;system call number (sys_write)</div><div class="line">    int     0x80                   ;call kernel</div><div class="line"></div><div class="line">    mov     eax,1                  ;system call number (sys_exit)</div><div class="line">    int     0x80                   ;call kernel</div><div class="line"></div><div class="line">section     .data</div><div class="line"></div><div class="line">msg     db  &apos;Hello, world!&apos;,0xa    ;our dear string</div><div class="line">len     equ $ - msg                ;length of our dear string</div></pre></td></tr></table></figure><p>위 소스는 hello world를 찍는 어셈블리어 소스 입니다.</p><h3 id="고급언어"><a href="#고급언어" class="headerlink" title="고급언어"></a>고급언어</h3><p>algol<br>c<br>perl<br>c++<br>java<br>python</p><h3 id="c-언어로-hello-world를-출력하는-소스"><a href="#c-언어로-hello-world를-출력하는-소스" class="headerlink" title="c 언어로 hello world를 출력하는 소스"></a>c 언어로 hello world를 출력하는 소스</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;      //전처리 표준 출력을 위해 호출</span></span></div><div class="line">                        <span class="comment">//구조체는 사용안하므로 안썼음.</span></div><div class="line">                        <span class="comment">//함수선언 사용자 함수가 없으므로 안썼음.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>          <span class="comment">// 메인함수</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"hello world!\n"</span>);     <span class="comment">//프로그램 작성 </span></div><div class="line">    <span class="comment">// 위 함수도 약속에 의해 작성함.</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;           <span class="comment">// 리턴값</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="python으로-hello-world를-출력하는-소스"><a href="#python으로-hello-world를-출력하는-소스" class="headerlink" title="python으로 hello world를 출력하는 소스"></a>python으로 hello world를 출력하는 소스</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure><p><strong>발전된 고급언어 일수록 사용하기가 훨씬 쉽습니다.</strong></p><h3 id="컴파일러와-인터프리터"><a href="#컴파일러와-인터프리터" class="headerlink" title="컴파일러와 인터프리터"></a>컴파일러와 인터프리터</h3><p>컴파일러는 소스 전체를 실행 가능한 기계어로 바꾸줍니다.<br>assmbly, c, java, c++ 등</p><p>인터프리터는 소스를 실행시 인터프리터가 한줄씩 기계어로 번역하며 실행합니다.<br>perl, python, ruby, html, javascript 등</p><h3 id="인간의-언어"><a href="#인간의-언어" class="headerlink" title="인간의 언어"></a>인간의 언어</h3><p>인간의 언어는 단어와 문장이 있습니다.<br>문장을 구성하는 요소도 있고 형식도 있습니다.<br>형식이란 말하는 순서를 뜻하죠.<br>순서를 틀리게 말해도 대부분은 무슨 뜻인지 이해 할 수 있습니다.<br>인간이기 때문에 상황을 파악하고, 오류를 수정해서 듣기 때문입니다. </p><h3 id="단어"><a href="#단어" class="headerlink" title="단어"></a>단어</h3><table><thead><tr><th>명사</th><th>동사</th></tr></thead><tbody><tr><td>사과</td><td>먹다</td></tr><tr><td>apple</td><td>eat </td></tr><tr><td>나</td><td>오다</td></tr><tr><td>I</td><td>입다</td></tr></tbody></table><h3 id="문장의-형식"><a href="#문장의-형식" class="headerlink" title="문장의 형식"></a>문장의 형식</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">한국어  : 주어 + 목적어 + 동사</div><div class="line">형식      나(는)  사과(를) 먹(는)다</div><div class="line">(비형식)  나 먹다 사과</div><div class="line">(비형식)  몸짓으로 전달</div><div class="line"></div><div class="line">영어    : 주어 + 동사 + 목적어 </div><div class="line">형식      I  (am) eat(ing) (a) apple</div><div class="line">(비형식)  I apple eat</div></pre></td></tr></table></figure><p>인간은 위와 같이 단어와 형식을 지키지 않은 비형식으로 말해도 이해 할 수 있습니다.</p><p>하지만 프로그래밍 언어는 철저하게 형식과 문법을 지키지 않으면 오류가 납니다.</p><h3 id="C-언어"><a href="#C-언어" class="headerlink" title="C 언어"></a>C 언어</h3><p>C 언어도 형식과 단어가 있습니다.<br>일반적으로 형식은 스트럭쳐(structure), 단어는 토큰(Token)라고 부릅니다.</p><h3 id="형식"><a href="#형식" class="headerlink" title="형식"></a>형식</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">전처리</div><div class="line">구조체</div><div class="line">함수선언</div><div class="line"></div><div class="line">반환형 main(인자)</div><div class="line">&#123;</div><div class="line">    프로그램 기술   </div><div class="line">    반환값;</div><div class="line">&#125;</div><div class="line">반환형 함수명()</div><div class="line">&#123;</div><div class="line">    반환값;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>형식은 위와 같이 쓰자고 약속 했습니다.</li><li>처음에 전처리, 구조체, 함수선언, 메인함수, 선언한 함수 본체를 기술하자고 약속한 겁니다.</li><li>다른것은 필요 없으면 안써도 되지만 메인함수는 반드시 쓰자. </li><li>함수를 쓸때는 함수명 앞에 반환자료형을 꼭 쓰자.</li><li>메인함수안에 인자가 필요하면 인자를 쓰고, 없으면 안써도 되지만 void를 넣자. </li><li>프로그램은 중괄호 안에 기술하자.</li><li>함수가 끝나기 전에 반환값이 있다면 반환값을 쓰자.</li><li>명령이 끝나면 반드시 <code>;</code>를 쓰자.</li></ul><p>이렇게 약속을 했는데 안지키면 안되겠죠.</p><p>아래는 약속에 맞춰서 최소한의 코딩을 한겁니다.</p><figure class="highlight c"><figcaption><span>c언어</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;      //전처리 표준 출력을 위해 호출</span></span></div><div class="line">                        <span class="comment">//구조체는 사용안하므로 안썼음.</span></div><div class="line">                        <span class="comment">//함수선언 사용자 함수가 없으므로 안썼음.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>          <span class="comment">// 메인함수</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"hello world!\n"</span>);     <span class="comment">//프로그램 작성 </span></div><div class="line">    <span class="comment">// 위 함수도 약속에 의해 작성함.</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;           <span class="comment">// 리턴값</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="토큰"><a href="#토큰" class="headerlink" title="토큰"></a>토큰</h3><p>토큰은 표식(징표, 표시)이라고 할 수 있습니다.<br>버스, 지하철을 탈때 토큰을 내고 타죠? (현금, 카드찍는 행위, 탑승티켓등…)<br>상품을 구매할때 화패, 카드, 쿠폰을 내고 구매를 합니다. 이렇게 의미(가치)가 표시된 것들을 통틀어 영어로 토큰이라고 부릅니다.</p><p>C언어의 토큰은 keyword(예약어), 연산자, 구두점(부호), 식별자, 상수가 있습니다.<br>32개의 예약어, 40여개의 연산자, 10개의 구두점, 여러분이 생성하는 함수명, 변수명, 상수명이 다 입니다.<br>외울 필요도 없습니다. 쓰다 보면 저절로 외워집니다.<br>어떤것이 있는지 한번 훑어 보세요. </p><h3 id="예약어"><a href="#예약어" class="headerlink" title="예약어"></a>예약어</h3><table><thead><tr><th>no</th><th>keyword</th><th>설명</th></tr></thead><tbody><tr><td>1</td><td>auto</td><td>기본적인 변수의 저장방식을 나타내는 키워드</td></tr><tr><td>2</td><td>break</td><td>for, while, switch, do…while문을 조건없이 마치는 명령</td></tr><tr><td>3</td><td>case</td><td>switch문 내에서 사용되는 명령</td></tr><tr><td>4</td><td>char</td><td>문자를 저항하는 데이터형</td></tr><tr><td>5</td><td>const</td><td>상수 지정자</td></tr><tr><td>6</td><td>continue</td><td>for, while, switch, do…while문을 다음 반복동작으로 진행시키는 명령</td></tr><tr><td>7</td><td>default</td><td>case문에 일치하지 않는 경우를 처리하기 위해 switch문에서 사용되는 명령</td></tr><tr><td>8</td><td>do</td><td>while문과 함께 사용되는 순환명령. 순환문은 최소한 한번 실행됨.</td></tr><tr><td>9</td><td>double</td><td>배정도 부동 소수형값을 저장할 수 있는 데이터형</td></tr><tr><td>10</td><td>else</td><td>if문이 FALSE 때 실행되는 선택적인 문장을 나타내는 명령</td></tr><tr><td>11</td><td>enum</td><td>변수가 특정값만을 받아들이도록 해주는 데이터형</td></tr><tr><td>12</td><td>extern</td><td>변수가 프로그램의 다른 부분에서 선언된다는 것을 알려주는 데이터 지정자</td></tr><tr><td>13</td><td>float</td><td>부동 소수형 숫자값을 저장하기 위해 사용되는 데이터형</td></tr><tr><td>14</td><td>for</td><td>초기화,증가,조건 부분을 가지는 순환명령</td></tr><tr><td>15</td><td>goto</td><td>정의되어 있는 레이블로 이동시키는 명령</td></tr><tr><td>16</td><td>if</td><td>TRUE/FALSE의 결과에 따라 프로그램의 제어를 변경하는데 사용되는 명령</td></tr><tr><td>17</td><td>int</td><td>정수형 값을 저장하는 데 사용되는 데이터형</td></tr><tr><td>18</td><td>long</td><td>int형보다 큰 정수형 값을 저장하는 데 사용되는 데이터형</td></tr><tr><td>19</td><td>register</td><td>가능하다면 변수를 레지스터에 저장하도록 지정하는 저장형태 지정자</td></tr><tr><td>20</td><td>return</td><td>함수를 종료후 호출한함수로 프로그램의 제어와 값을 반환 하는 명령. </td></tr><tr><td>21</td><td>short</td><td>short 정수형 값을 저장하는 데 사용되는 데이터형.</td></tr><tr><td>22</td><td>signed</td><td>변수가 양수와 음수값을 모두 저장할 수 있음. </td></tr><tr><td>23</td><td>sizeof</td><td>항목의 크기를 바이트 단위로 알려주는 연산자</td></tr><tr><td>24</td><td>static</td><td>컴파일러가 변수의 값을 보존해야 한다는 것을 지정하는 지정자</td></tr><tr><td>25</td><td>struct</td><td>C에서 어떤 데이터형의 변수를 함께 결합시키는 데 사용되는 키워드</td></tr><tr><td>26</td><td>switch</td><td>여러 조건을 통해서 프로그램의 흐름을 변경하는 데 사용되는 명령. </td></tr><tr><td>27</td><td>typedef</td><td>이미 존재하는 변수와 함수의 형태를 새로운 변경하는 지정자</td></tr><tr><td>28</td><td>union</td><td>여러 개의 변수가 동일한 메모리 영역을 공유하도록 해주는 키워드</td></tr><tr><td>29</td><td>unsigned</td><td>변수가 양수값만 저장할 수 있다는 것을 지정하는 데 사용되는 지정자.</td></tr><tr><td>30</td><td>void</td><td>함수의 반환값이 없는 것을 지정하는 데 사용되는 키워드</td></tr><tr><td>31</td><td>volatile</td><td>변수가 변경될 수 없다는 것을 지정하는 지정자.</td></tr><tr><td>32</td><td>while</td><td>지정된 조건이 TRUE 한 계속해서 포함된 문장을 실행하는 순환문</td></tr></tbody></table><h3 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h3><table><thead><tr><th>우선 순위</th><th>결합 방향</th><th>연산자(기호)</th><th>연산자종류/명</th></tr></thead><tbody><tr><td>1</td><td>→</td><td>( ), [ ], ., -&gt;</td><td>소괄호, 대괄호, 도트, 포인터</td></tr><tr><td>2</td><td>←</td><td>(형), sizeof, <code>*</code>(참조), <code>&amp;</code> 주소, <code>++</code>, <code>--</code>, <code>+</code>(부호), <code>-</code>(부호),<code>~</code>, <code>!</code></td><td>단항연산자</td></tr><tr><td>3</td><td>→</td><td><code>*</code>(곱셈), <code>/</code>, <code>%</code></td><td>산술연산자</td></tr><tr><td>4</td><td>→</td><td><code>+</code>, <code>-</code></td><td>산술연산자</td></tr><tr><td>5</td><td>→</td><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td><td>shift연산자</td></tr><tr><td>6</td><td>→</td><td><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></td><td>관계연산자</td></tr><tr><td>7</td><td>→</td><td><code>==</code>, <code>!=</code></td><td>관계연산자</td></tr><tr><td>8</td><td>→</td><td><code>&amp;</code></td><td>비트연산자</td></tr><tr><td>9</td><td>→</td><td><code>^</code></td><td>비트연산자</td></tr><tr><td>10</td><td>→</td><td>&#124;</td><td>비트연산자</td></tr><tr><td>11</td><td>→</td><td><code>&amp;&amp;</code></td><td>논리연산자</td></tr><tr><td>12</td><td>→</td><td>&#124;&#124;</td><td>논리연산자</td></tr><tr><td>13</td><td>←</td><td><code>?:</code></td><td>조건연산자</td></tr><tr><td>14</td><td>←</td><td><code>=</code>, <code>+-</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&lt;&lt;=</code>,<code>&gt;&gt;=</code>,<code>&amp;=</code>,<code>^=</code>,=&#124;</td><td>할당/복합 할당연산자</td></tr><tr><td>15</td><td>→</td><td><code>,</code></td><td>콤마연산자</td></tr></tbody></table><p>산술연산자, 논리연사자, 대입연산자, 관계연산자, 비트연산자, 조건연산자, cast연산자, 증감연산자, 기타연산자</p><h3 id="구두점"><a href="#구두점" class="headerlink" title="구두점"></a>구두점</h3><table><thead><tr><th>구두점</th><th>명칭</th></tr></thead><tbody><tr><td><code>[]</code></td><td>bracket, 대괄호</td></tr><tr><td><code>{}</code></td><td>brace, 중괄호</td></tr><tr><td><code>()</code></td><td>parenthesis, 소괄호</td></tr><tr><td><code>*</code></td><td>asterisk, 별표</td></tr><tr><td><code>,</code></td><td>comma, 쉼표</td></tr><tr><td><code>;</code></td><td>semicolon, 세미콜론</td></tr><tr><td><code>=</code></td><td>equal sign</td></tr><tr><td><code>:</code></td><td>colon, 콜론</td></tr><tr><td><code>...</code></td><td>ellipsis, 생략부호</td></tr><tr><td><code>#</code></td><td>sharp, 샵</td></tr></tbody></table><h3 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h3><p>주석은 프로그램 소스내에 간단한 설명을 적을 수 있습니다. 자신, 또는 타인이 소스를 분석할 때 도움이 되겠죠. 처음에 프로그램의 설명을 적는것은 프로그래머들 간의 약속 입니다.<br>리눅스에서 head 명령어가 있는 이유 이기도 합니다.<br>주석은 실행 되지 않으며 프로그램 중간중간에 넣어서 사용할 수 있습니다.</p><h3 id="한줄-주석"><a href="#한줄-주석" class="headerlink" title="한줄 주석"></a>한줄 주석</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 프로그램명: helloworld</span></div><div class="line"><span class="comment">// 작성자    : 홍길동, abc@google.com</span></div><div class="line"><span class="comment">// 작성일    : 2016-11-04</span></div><div class="line"><span class="comment">// 수정일    : 2017-11-04</span></div><div class="line"><span class="comment">// 사용법    : helloworld [옵션] </span></div><div class="line"><span class="comment">// 설명      : 이 프로그램은 hello wrld를 화면에 출력해주는 프로그램입니다.</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">// 이곳에 프로그램을 입력</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>한줄 주석은 위와 같이 사용합니다.<br>줄 맨앞에 // 를 붙이면 됩니다.</p><h3 id="여러줄주석"><a href="#여러줄주석" class="headerlink" title="여러줄주석"></a>여러줄주석</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*  </span></div><div class="line"><span class="comment">프로그램명: helloworld</span></div><div class="line"><span class="comment">작성자    : 홍길동, abc@google.com</span></div><div class="line"><span class="comment">작성일    : 2016-11-04</span></div><div class="line"><span class="comment">수정일    : 2017-11-04</span></div><div class="line"><span class="comment">사용법    : helloworld [옵션] </span></div><div class="line"><span class="comment">설명      : 이 프로그램은 hello wrld를 화면에 출력해주는 프로그램입니다.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">// 이곳에 프로그램을 입력</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>여러줄 주석은 위와 같이 사용합니다.<br>주석의 시작과 종료 부분에 /* 와 */ 을 써주면 됩니다.<br>주석의 중간에 설명을 추가하기는 편합니다만 한줄 주석을 권장합니다.</p><p>vim 에디터를 실행합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi print01.c</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/SSu822Lgta8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;기본적으로
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="c" scheme="http://korcow.github.io/tags/c/"/>
    
      <category term="주석" scheme="http://korcow.github.io/tags/%EC%A3%BC%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>파일내용보기</title>
    <link href="http://korcow.github.io/2017/11/02/centos-%ED%8C%8C%EC%9D%BC%EB%82%B4%EC%9A%A9%EB%B3%B4%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/11/02/centos-파일내용보기/</id>
    <published>2017-11-02T13:43:13.000Z</published>
    <updated>2017-11-07T17:53:41.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="파일-내용-보기"><a href="#파일-내용-보기" class="headerlink" title="파일 내용 보기"></a>파일 내용 보기</h3><p>파일의 내용을 볼 수 있는 방법은 많이 있지만<br>cat, head, tail, less 를 많이 사용합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ man ls &gt; abc.txt</div></pre></td></tr></table></figure><p>위와 같이 연습용 파일을 생성합니다.</p><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>cat은 파일의 내용을 보여줍니다. 파일의 내용이 길때 주르륵 스크롤 되기 때문에 more 함께 사용합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat abc.txt</div><div class="line">$ cat -n abc.txt</div><div class="line"></div><div class="line">$ cat abc.txt | more</div></pre></td></tr></table></figure><p>man cat으로 옵션을 확인해 보세요.<br>more를 사용했를 경우 <code>spacebar</code>를 누르면 다음 페이지로 이동됩니다.</p><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>head는 파일의 윗부분을 기준으로 보여 줍니다.<br>주로 무슨 파일인지 확인할 때 사용합니다.<br>대부분의 프로그램의 첫 부분은 프로그램의 주석(설명)을 적도록 약속 했습니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ head abc.txt</div><div class="line"></div><div class="line">$ head -20 abc.txt</div></pre></td></tr></table></figure></p><p>1행 옵션이 없이 사용하면 기본으로 10줄을 보여줍니다.<br>3행 -옵션으로 20을 입력하면 20줄을 보여줍니다.</p><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>head와 반대로 아래를 기준으로 보여줍니다.<br>주로 어떻게 끝났는지 확인 할 때 사용합니다.<br>파일의 끝에 문자열을 추가하기 위해 사용합니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tail abc.txt</div><div class="line"></div><div class="line">$ tail -20 abc.txt</div></pre></td></tr></table></figure></p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>less는 man page가 사용하는 프로그램입니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ less abc.txt</div></pre></td></tr></table></figure></p><p>q를 누르면 종료<br>h를 누르면 도움말<br>j,k 위아래이동<br>spacebar 한화면 아래로 이동<br>찾기, 이동하기등 옵션이 많이 있습니다. vim과 사용법이 비슷합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;파일-내용-보기&quot;&gt;&lt;a href=&quot;#파일-내용-보기&quot; class=&quot;headerlink&quot; title=&quot;파일 내용 보기&quot;&gt;&lt;/a&gt;파일 내용 보기&lt;/h3&gt;&lt;p&gt;파일의 내용을 볼 수 있는 방법은 많이 있지만&lt;br&gt;cat, head, tail, 
      
    
    </summary>
    
      <category term="Centos" scheme="http://korcow.github.io/categories/Centos/"/>
    
    
      <category term="Centos" scheme="http://korcow.github.io/tags/Centos/"/>
    
      <category term="cat" scheme="http://korcow.github.io/tags/cat/"/>
    
      <category term="head" scheme="http://korcow.github.io/tags/head/"/>
    
      <category term="tail" scheme="http://korcow.github.io/tags/tail/"/>
    
      <category term="less" scheme="http://korcow.github.io/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>파일및디렉토리삭제</title>
    <link href="http://korcow.github.io/2017/11/02/centos-%ED%8C%8C%EC%9D%BC%EB%B0%8F%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EC%82%AD%EC%A0%9C/"/>
    <id>http://korcow.github.io/2017/11/02/centos-파일및디렉토리삭제/</id>
    <published>2017-11-02T13:29:56.000Z</published>
    <updated>2017-11-14T15:19:50.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="파일-및-디렉토리-삭제"><a href="#파일-및-디렉토리-삭제" class="headerlink" title="파일 및 디렉토리 삭제"></a>파일 및 디렉토리 삭제</h2><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>파일을 삭제하는 명령입니다.<br>파일을 삭제하는 것은 꼭 필요하지만 위험을 초례 할 수 있는 명령입니다.</p><p>추천하는 방법은 ls로 확인후 rm명령과 혼합해서 사용하는 방법을 추천합니다.<br>파일을 지울 때는 파일의 소유권과 권한에 따라 지울 수 없는 경우도 있습니다.<br>이때는 sudo 를 사용하거나 소유권을 또는 권한을 이양 받아 사용해야 합니다.</p><ul><li><code>pwd</code> 현재의 경로를 확인 합니다.</li><li><code>ls *.txt</code> 지울 파일을 확인합니다.</li><li><code>rm !!</code> 바로전 ls명을 덧붙여 사용합니다.</li><li><code>rm -rf</code> 디렉토리와 그안에 있는 파일도 삭제 합니다.<ul><li>-r 옵션은 하위에 디렉토리가 있어도 모두 지움니다.</li><li>-f 옵션은 지울때 확인하는 메시지 없이 지워 버립니다.</li></ul></li></ul><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p>디렉토리를 삭제하는 명령입니다.</p><ul><li><code>rmdir deldir</code> 반드시 디렉토리가 비워져 있어야 지울 수 있습니다. </li></ul><h3 id="man-page"><a href="#man-page" class="headerlink" title="man page"></a>man page</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">이름</div><div class="line">       rm - 파일 지우기</div><div class="line"></div><div class="line">사용법</div><div class="line">       rm [-dfirvR] [--directory] [--force] [--interactive] </div><div class="line">       [--recursive] [--help] [--version] [--verbose] name...</div><div class="line"></div><div class="line">설명</div><div class="line">       이 문서는 더이상 최신 정보를 담고 있지않다.  그래서,  몇몇 틀릴  경우도  </div><div class="line">       있고,  부족한  경우도  있을  것이다.  완전한 매뉴얼을 원하면, Texinfo </div><div class="line">       문서를 참조하기 바란다.</div><div class="line"></div><div class="line">       이 매뉴얼 페이지는 rm 명령의 GNU  버전에  대한  것이다.  rm 명령은 지정한 </div><div class="line">       파일을 지운다. 초기값으로는 경로는 지우지 않는다.</div><div class="line"></div><div class="line">       만약에  파일  모드가  읽기  전용이고,  표준 입력이 tty이고, -f나 --force </div><div class="line">       옵션이 지정되지 않으면, rm 명령은 사용자에게 지정한 파일을 정말 지울것인지 </div><div class="line">       물어본다.  이때, `y&apos;나 `Y&apos;를 입력해 주어야지만 그 파일을 지운다.</div><div class="line"></div><div class="line">       GNU rm 명령과 같이 getopt(3) 함수를 사용하는 모든 풀그림에서는 </div><div class="line">       -- 옵션 다음에 오는 것은 옵션이 아닌 것으로 인식한다.  즉 파일 이름이 </div><div class="line">       `-f&apos;  라는  파일을  지우고자  한다면, 다음 두 방법을 사용한다.</div><div class="line">              rm -- -f</div><div class="line">       또는</div><div class="line">              rm ./-f</div><div class="line">       유닉스 rm 명령의 `-&apos; 문자로 시작하는 옵션들 때문에 이런 기능들이 고안된 것이다.</div><div class="line"></div><div class="line">옵션</div><div class="line">       -d, --directory</div><div class="line">              `rmdir&apos;  명령  대신에  `unlink&apos;와 함께 경로를 지운다.  </div><div class="line">              unlink하기 전에 그 경로가 비어있는지 확인하지 않고, 그냥 unlink </div><div class="line">              해버린다.  이렇기 때문에, 만약에 그 지워지는 경로 안에 파일 </div><div class="line">              있다면, 그 파일들의 종속성문제가 생길 수 있다.(접근 불가능 현상, </div><div class="line">              미아 파일.)  이 옵션을 사용 한 후에서는 fsck(8)로 파일  </div><div class="line">              시스템을  검사하기  바란다.</div><div class="line">              이 옵션은 시스템 관리자만이 사용할 수 있다.</div><div class="line"></div><div class="line">       -f, --force</div><div class="line">              지울 파일이 없을 경우에 아무런 메시지를 보여주지 않고 그냥 넘어간다.</div><div class="line">              이 옵션은 쉘 스크립트 안에서 사용될 때 유용하게 쓰인다.</div><div class="line"></div><div class="line">       -i, --interactive</div><div class="line">              각 파일을 하나씩 지울 것인지 사용자에게 일일이 물어본다.  이때 </div><div class="line">              `y&apos; 나 `Y&apos;를 눌러야지만 파일이 지워진다.</div><div class="line"></div><div class="line">       -r, -R, --recursive</div><div class="line">              일반 파일이면 그냥 지우고, 경로면, 그 하위 경로와 파일을 모두 지운다.</div><div class="line"></div><div class="line">       -v, --verbose</div><div class="line">              각각의 파일 지우는 정보를 자세하게 모두 보여준다.</div><div class="line"></div><div class="line">       --help 도움말을 보여주고 마친다.</div><div class="line"></div><div class="line">       --version</div><div class="line">              버전 정보를 보여주고 마친다.</div><div class="line"></div><div class="line">번역</div><div class="line">       한글 Manpage 프로젝트 (http://man.kldp.org) 2005년 2월 14일</div><div class="line"></div><div class="line">FSF                                                                             GNU File Utilities                                                                          RM(1)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;파일-및-디렉토리-삭제&quot;&gt;&lt;a href=&quot;#파일-및-디렉토리-삭제&quot; class=&quot;headerlink&quot; title=&quot;파일 및 디렉토리 삭제&quot;&gt;&lt;/a&gt;파일 및 디렉토리 삭제&lt;/h2&gt;&lt;h3 id=&quot;rm&quot;&gt;&lt;a href=&quot;#rm&quot; class=&quot;
      
    
    </summary>
    
      <category term="Centos" scheme="http://korcow.github.io/categories/Centos/"/>
    
    
      <category term="Centos" scheme="http://korcow.github.io/tags/Centos/"/>
    
      <category term="rm" scheme="http://korcow.github.io/tags/rm/"/>
    
      <category term="rmdir" scheme="http://korcow.github.io/tags/rmdir/"/>
    
  </entry>
  
</feed>
