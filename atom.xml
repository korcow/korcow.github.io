<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KORCOW</title>
  
  <subtitle>HANS</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://korcow.github.io/"/>
  <updated>2017-12-04T02:40:51.085Z</updated>
  <id>http://korcow.github.io/</id>
  
  <author>
    <name>woo-seok Han</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>유니온</title>
    <link href="http://korcow.github.io/2017/12/04/c-%EC%9C%A0%EB%8B%88%EC%98%A8/"/>
    <id>http://korcow.github.io/2017/12/04/c-유니온/</id>
    <published>2017-12-04T02:40:51.085Z</published>
    <updated>2017-12-04T02:40:51.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="유니온"><a href="#유니온" class="headerlink" title="유니온"></a>유니온</h3><img src="/c언어기초/2017-12-02_19-30-05.png" width="500" title="구조체그림1"><p>선언 방법은 구조체와 동일합니다. 사용하는 용도와 내부적으로 처리하는 방식이 다릅니다. 또한 단독으로 사용하는 경우는 거의 없읍니다.<br>구조체 안에 포함 시켜 사용합니다.</p><h3 id="선언-및-사용"><a href="#선언-및-사용" class="headerlink" title="선언 및 사용"></a>선언 및 사용</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; // strcpy()</span></span></div><div class="line"></div><div class="line"><span class="keyword">union</span> _Score&#123;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</div><div class="line">    <span class="keyword">int</span> kor;</div><div class="line">    <span class="keyword">int</span> eng;</div><div class="line">    <span class="keyword">int</span> math;</div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">    <span class="keyword">double</span> avg;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">union</span> _Score score;</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(score.name, <span class="string">"유재석"</span>);</div><div class="line">    score.kor = <span class="number">90</span>;</div><div class="line">    score.eng = <span class="number">95</span>;</div><div class="line">    score.math = <span class="number">100</span>;</div><div class="line">    score.sum = score.kor + score.eng + score.math;</div><div class="line">    score.avg = score.sum / <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"국어 점수: "</span>, score.kor);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"영어 점수: "</span>, score.eng);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"수학 점수: "</span>, score.math);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"총점 점수: "</span>, score.sum);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%f\n"</span>, <span class="string">"평균 점수: "</span>, score.avg);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">국어 점수: 0</div><div class="line">영어 점수: 0</div><div class="line">수학 점수: 0</div><div class="line">총점 점수: 0</div><div class="line">평균 점수: 100.000000</div></pre></td></tr></table></figure><p>위와 같은 결과가 나왔습니다. 이유는 공용체는 자료형중에서 가장큰 자료형을 공유해서 사용합니다. 따라서 바로 자료값을 사용하지 않으면 다음 자료값으로 덮어 써지기 때문에 원하는 값을 얻지 못한겁니다. 값을 다음 값이 써지기 전까지만 기억 되므로 국, 영, 수 값을 저장할 수 없습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; // strcpy()</span></span></div><div class="line"></div><div class="line"><span class="keyword">union</span> _Score&#123;</div><div class="line">    <span class="keyword">int</span> a;</div><div class="line">    <span class="keyword">short</span> b;</div><div class="line">    <span class="keyword">char</span> c;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">union</span> _Score score;</div><div class="line"></div><div class="line">    score.a = <span class="number">655236</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"a : "</span>, score.a);</div><div class="line">    score.b = <span class="number">256</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"b : "</span>, score.b);</div><div class="line">    score.c = <span class="string">'c'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%c\n"</span>, <span class="string">"c : "</span>, score.c);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; // strcpy()</span></span></div><div class="line"></div><div class="line"><span class="keyword">union</span> _BankNo&#123;</div><div class="line">    <span class="keyword">char</span> shinhan[<span class="number">12</span>];</div><div class="line">    <span class="keyword">char</span> kukmin[<span class="number">10</span>];</div><div class="line">    <span class="keyword">char</span> seoul[<span class="number">9</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">union</span> _BankNo bankno;</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(bankno.a , <span class="string">"122236553236"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%s\n"</span>, <span class="string">"a : "</span>, bankno.a);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%s\n"</span>, <span class="string">"b : "</span>, bankno.b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%s\n"</span>, <span class="string">"c : "</span>, bankno.c);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;유니온&quot;&gt;&lt;a href=&quot;#유니온&quot; class=&quot;headerlink&quot; title=&quot;유니온&quot;&gt;&lt;/a&gt;유니온&lt;/h3&gt;&lt;img src=&quot;/c언어기초/2017-12-02_19-30-05.png&quot; width=&quot;500&quot; title=&quot;구조체그림1&quot;&gt;
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="유니온" scheme="http://korcow.github.io/tags/%EC%9C%A0%EB%8B%88%EC%98%A8/"/>
    
  </entry>
  
  <entry>
    <title>구조체</title>
    <link href="http://korcow.github.io/2017/12/03/c-%EA%B5%AC%EC%A1%B0%EC%B2%B4/"/>
    <id>http://korcow.github.io/2017/12/03/c-구조체/</id>
    <published>2017-12-03T04:08:32.575Z</published>
    <updated>2017-12-03T04:08:32.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="구조체"><a href="#구조체" class="headerlink" title="구조체"></a>구조체</h3><p>서로 다른 형식의 자료의 집합</p><img src="/c언어기초/2017-12-02_19-30-05.png" width="500" title="구조체그림1"><p>지금까지는 변수를 선언 할 때 문자형, 정수형, 실수형 자료를 별도로 선언해서 사용했습니다. 구조체는 이런 자료형을 모아서 사용자가 원하는 자료형으로 만들어 줍니다.</p><h3 id="선언-및-사용"><a href="#선언-및-사용" class="headerlink" title="선언 및 사용"></a>선언 및 사용</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; // strcpy()</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Score</span>&#123;</span></div><div class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</div><div class="line">    <span class="keyword">int</span> kor;</div><div class="line">    <span class="keyword">int</span> eng;</div><div class="line">    <span class="keyword">int</span> math;</div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">    <span class="keyword">double</span> avg;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">Score</span> <span class="title">score</span>;</span></div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(score.name, <span class="string">"유재석"</span>);</div><div class="line">    score.kor = <span class="number">90</span>;</div><div class="line">    score.eng = <span class="number">95</span>;</div><div class="line">    score.math = <span class="number">100</span>;</div><div class="line">    score.sum = score.kor + score.eng + score.math;</div><div class="line">    score.avg = score.sum / <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"국어 점수: "</span>, score.kor);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"영어 점수: "</span>, score.eng);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"수학 점수: "</span>, score.math);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"총점 점수: "</span>, score.sum);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%f\n"</span>, <span class="string">"평균 점수: "</span>, score.avg);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><p>typedef는 자료형을 재정의하는 기능입니다. 단순히 이름을 변경하는 기능입니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span> I;</div><div class="line"></div><div class="line">    I iNum;</div><div class="line">    iNum = <span class="number">100</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"값은:"</span>, iNum);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>구조체도 자료형이기 때문에 typedef를 이용해 별칭을 만들 수 있습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; // strcpy()</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Score</span>&#123;</span></div><div class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</div><div class="line">    <span class="keyword">int</span> kor;</div><div class="line">    <span class="keyword">int</span> eng;</div><div class="line">    <span class="keyword">int</span> math;</div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">    <span class="keyword">double</span> avg;</div><div class="line">&#125; Score;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    Score score;</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(score.name, <span class="string">"유재석"</span>);</div><div class="line">    score.kor = <span class="number">90</span>;</div><div class="line">    score.eng = <span class="number">95</span>;</div><div class="line">    score.math = <span class="number">100</span>;</div><div class="line">    score.sum = score.kor + score.eng + score.math;</div><div class="line">    score.avg = score.sum / <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"국어 점수: "</span>, score.kor);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"영어 점수: "</span>, score.eng);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"수학 점수: "</span>, score.math);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d\n"</span>, <span class="string">"총점 점수: "</span>, score.sum);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s%f\n"</span>, <span class="string">"평균 점수: "</span>, score.avg);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;구조체&quot;&gt;&lt;a href=&quot;#구조체&quot; class=&quot;headerlink&quot; title=&quot;구조체&quot;&gt;&lt;/a&gt;구조체&lt;/h3&gt;&lt;p&gt;서로 다른 형식의 자료의 집합&lt;/p&gt;
&lt;img src=&quot;/c언어기초/2017-12-02_19-30-05.png&quot; wid
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="구조체" scheme="http://korcow.github.io/tags/%EA%B5%AC%EC%A1%B0%EC%B2%B4/"/>
    
  </entry>
  
  <entry>
    <title>REPL 사용하기</title>
    <link href="http://korcow.github.io/2017/12/02/python-repl-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/12/02/python-repl-사용하기/</id>
    <published>2017-12-02T01:49:16.867Z</published>
    <updated>2017-12-02T01:49:16.867Z</updated>
    
    <content type="html"><![CDATA[<h3 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h3><p>파이썬의 REPL은 기본적으로 readline api를 사용하기 때문에 키보드 단축키 사용법이 terminal 과 거의 같습니다. </p><h4 id="단축키"><a href="#단축키" class="headerlink" title="단축키"></a>단축키</h4><table><thead><tr><th>단축키</th><th>설명</th></tr></thead><tbody><tr><td><code>TAB</code></td><td>자동완성(파일및디렉토리, 명령을 자동완성)</td></tr><tr><td><code>Ctrl+h</code></td><td>백스페이와 같습니다.(더 편합니다.)</td></tr><tr><td><code>Ctrl+a</code></td><td>처음으로 이동</td></tr><tr><td><code>Ctrl+e</code></td><td>행 끝으로 이동</td></tr><tr><td><code>Ctrl+b</code></td><td>한 문자 뒤로 이동</td></tr><tr><td><code>Alt+b</code></td><td>한 단어 뒤로 이동</td></tr><tr><td><code>Ctrl+f</code></td><td>한 문자 앞으로 이동</td></tr><tr><td><code>Alt+f</code></td><td>한 단어 앞으로 이동</td></tr><tr><td><code>Ctrl+u</code></td><td>현재줄을 삭제합니다.</td></tr><tr><td><code>Ctrl+k</code></td><td>커서 위치에서 행 끝까지 삭제합니다.</td></tr><tr><td><code>Ctrl+w</code></td><td>커서앞 한단어를 삭제합니다.</td></tr><tr><td><code>Esc+Backspace</code></td><td>이전 단어 삭제</td></tr><tr><td><code>Ctrl+y</code></td><td>클립보드에서 텍스트를 붙여넣습니다.</td></tr><tr><td><code>Ctrl+l</code></td><td>화면 상단에 현재 줄을 남겨두고 화면을 지웁니다.</td></tr><tr><td><code>Ctrl+r</code></td><td>증분 검색 기록 을 역순으로 추적</td></tr><tr><td><code>Alt+p</code></td><td>비 증분 검색 기록을 역순으로 추적</td></tr><tr><td><code>Ctrl+p</code></td><td>비 증분 검색 기록을 역순으로 추적</td></tr></tbody></table><h4 id="help"><a href="#help" class="headerlink" title="help"></a>help</h4><p>프롬프트에서 help()를 입력합니다.<br>도움말 유틸리티로 들어가게 되는데 이때 topics를 입력합니다.<br>도움말 목차가 리스트되고 원하는 타이틀을 입력하면 도움말을 보여줍니다.<br>사용법은 less와 동일합니다. 종료는 quit 또는 q<br>modules, keywords, symbols 동일하게 사용할 수 있습니다.<br>symbols 는 예약된 표시문자를 확인 할 수 있습니다.<br>keywords 는 예약어를 볼수 있습니다.<br>modules는 클래스 리스트를 볼수 있습니다.</p><h4 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h4><p>python은 c언어와 다르게 한번에 컴파일해서 사용하는 것이 아니라 스크립트를 한줄씩 인터프리터가 처리하는 방식으로 구동됩니다.<br>처음에 실행된 인터프리터의 머리는 텅 비어있습니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;dir()</div><div class="line">[<span class="string">'__annotations__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__loader__'</span></div><div class="line">, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>언더바 2개로 감싸저 있는 것을 모듈이라고 합니다. 클래스의 집합이라고 생각하면 됩니다.<br>클래스는 변수의 집합이구요.<br>각각의 모듈이 궁금하면 help(“모듈명”) 하면 됩니다.<br>위에 리스트된 모듈이 파이썬기 동작되기 위한 기본 모듈입니다. 이 모듈들이 메모리에 적재되어 있는 겁니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>iKor = <span class="number">100</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>iEng = <span class="number">90</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>iMath = <span class="number">90</span></div></pre></td></tr></table></figure><p>위와 같이 입력하고 dir() 해보세요.<br>변수를 선언 한겁니다. 변수는 메모리의 스택영역에 적재 됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__annotations__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__loader__'</span></div><div class="line">, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'iEng'</span>, <span class="string">'iMath'</span>, <span class="string">'ikor'</span>]</div></pre></td></tr></table></figure><p>그럼 메모리 속을 들여다 봅시다. 처음에 있는 모듈 부터 차례로 입력하세요.<br>잠깐 REPL는 shell과 사용법이 똑같다고 했습니다. 전부 입력하지 말고 tab자동완성을 쓰세요.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>__annotations__</div><div class="line">&#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__</div><div class="line">&lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>__doc__</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>__loader__</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">__name__</span></span></div><div class="line"><span class="class">'<span class="title">__main__</span>'</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">__package__</span></span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">__spec__</span></span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">iEng</span></span></div><div class="line"><span class="class">90</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">iMath</span></span></div><div class="line"><span class="class">90</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">iKor</span></span></div><div class="line"><span class="class">100</span></div><div class="line"><span class="class">&gt;&gt;&gt;</span></div></pre></td></tr></table></figure><ul><li><code>__annotations__</code>은 주석입니다. 우리가 주석을 사용하지 않았으니 아무것도 없네요.</li><li><code>__builtins__</code>은 내장객체입니다. 자동완성하면 괄호가 나왔을 겁니다. 뭔가 많이 있는데 우리가 지정하지 않은 겁니다.</li><li><code>__doc__</code>는 설명서입니다. 우리가 설명서를 만들지 않았으니 아무것도 없는 겁니다.</li><li><code>__loader__</code>는 뭔가 많이 있는데 우리가 호출하지 않은 겁니다. 모듈이름이 뭔가 읽어 온다는 느낌만 갖이면 됩니다.</li><li><code>__name__</code>은 우리가 만들고 있는 클래스 이름입니다. 기본이 main입니다.</li><li><code>__package__</code>는 여러 프로그램을 합칠때 호출하는 건데 이것도 사용하지 않았으니 비어 있네요.</li><li><code>__spec__</code>는 파이썬의 기본 설정값을 세팅하는 겁니다. 이것도 설정하지 않았으니 비어 있습니다.</li><li>iEng 이건 우리가 iEng라는 변수를 생성했기 때문에 90 이라는 값이 나왔습니다. iMath, iKor동일 합니다.</li></ul><p>변수를 하나 더 만들고 dir() 해보세요. 이번에는 iSum = 0 으로 만드세요.<br>국, 영, 수 점수를 더해서 iSum에 넣을 겁니다. 자동완성 잊지마세요.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>iSum = iKor + iEng + iMath</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>iSum</div><div class="line"><span class="number">280</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>이번에는 프롬프트에서 dir(iSum) 해보세요.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(iSum)</div><div class="line">[<span class="string">'__abs__'</span>, <span class="string">'__add__'</span>, <span class="string">'__and__'</span>, <span class="string">'__bool__'</span>, <span class="string">'__ceil__'</span></div><div class="line">, <span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__divmod__'</span>, <span class="string">'__doc__'</span></div><div class="line">, <span class="string">'__eq__'</span>, <span class="string">'__float__'</span>, <span class="string">'__floor__'</span>, <span class="string">'__floordiv__'</span>, <span class="string">'__format__'</span></div><div class="line">, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getnewargs__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span></div><div class="line">, <span class="string">'__index__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__int__'</span>, <span class="string">'__invert__'</span></div><div class="line">, <span class="string">'__le__'</span>, <span class="string">'__lshift__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mod__'</span>, <span class="string">'__mul__'</span></div><div class="line">, <span class="string">'__ne__'</span>, <span class="string">'__neg__'</span>, <span class="string">'__new__'</span>, <span class="string">'__or__'</span>, <span class="string">'__pos__'</span></div><div class="line">, <span class="string">'__pow__'</span>, <span class="string">'__radd__'</span>, <span class="string">'__rand__'</span>, <span class="string">'__rdivmod__'</span>, <span class="string">'__reduce__'</span></div><div class="line">, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__rfloordiv__'</span>, <span class="string">'__rlshift__'</span> , <span class="string">'__rmod__'</span></div><div class="line">, <span class="string">'__rmul__'</span>, <span class="string">'__ror__'</span>, <span class="string">'__round__'</span>, <span class="string">'__rpow__'</span> , <span class="string">'__rrshift__'</span></div><div class="line">, <span class="string">'__rshift__'</span>, <span class="string">'__rsub__'</span>, <span class="string">'__rtruediv__'</span> , <span class="string">'__rxor__'</span> , <span class="string">'__setattr__'</span></div><div class="line">, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span> , <span class="string">'__sub__'</span>, <span class="string">'__subclasshook__'</span> , <span class="string">'__truediv__'</span> </div><div class="line">, <span class="string">'__trunc__'</span>, <span class="string">'__xor__'</span>, <span class="string">'bit_length'</span>, <span class="string">'conjugate'</span> , <span class="string">'denominator'</span> </div><div class="line">, <span class="string">'from_bytes'</span>, <span class="string">'imag'</span>, <span class="string">'numerator'</span>, <span class="string">'real'</span> , <span class="string">'to_bytes'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>iSum은 정수형 변수가 생성되면서 상속받는 속성들 입니다.</p><p>우리는 국,영,수 점수만 더해서 저장했는데 뭔가 많이 들어있네요.<br>int class에서 상속받아 기본으로 사용할 수 있는 객체들입니다.<br>용어를 처음 듣는다고 해서 어려워 하지 말고 그냥 받아 들이세요.<br>부모님이 재산이 많으면 자식에게 상속하듯 파이썬도 정수형 변수를 찍어 낼때 정수형 클래스의 속성을 iSum 변수에 상속해 준겁니다.</p><p>c언어는 함수로 시작해서 함수로 끝납니다.<br>python은 클래스로 시작해서 클래스로 끝납니다.<br>c언어는 모든 것을 만들어야 하는데, 파이썬은 상속 받아 쓰기만 하면 됩니다.</p><p>클래스, 객체(Object), 속성(Method), 데이터(Data)는 많이 나오는 단어이니 간단히 이해 하고 있으면 됩니다.</p><p>클래스는 객체를 구분하는 단위, 클래스로 찍어 낸것을 객체라고 합니다. 클래스가 자식 객체에게 속성과 데이터를 쓸수 있게 해주는 것을 상속이라 합니다. </p><p>정리하면 클래스는 객체를 찍어 낼수 있고 객체는 속성과 DATA가 있다 라고 합니다. 한번더 헛갈리게 할 께요. 영어와 한글을 혼용해서 사용하는데, 속성은 메쏘드라고 부르고 메쏘드는 함수라고 부릅니다. 객체는 object라고 부릅니다. 마지막으로 정리 해볼께요.</p><p>파이썬은 클래스로 시작해서 클래스로 끝납니다.<br>클래스에는 메쏘드와 데이터가 있습니다.<br>클래스로 찍어낸 것을 오브젝트라고 합니다.<br>오브젝트는 클래스로부터 상속받은 메쏘드와 데이터를 사용할 수 있습니다.</p><p>iSum은 int클래스가 생성한 Object이니 int클래스의 메쏘드를 물려 받은 겁니다.</p><p>이제 모두 잊어 버리세요. 이런거 외우는거 아닙니다. 쓰면서 느끼면 됩니다.</p><h3 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h3><p>기본 REPL은 기능이 없어 많이 불편합니다. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ipython</div></pre></td></tr></table></figure><p>프롬프트가 좀 바뀌긴 했지만 그냥 한번 써보세요.<br>색깔도 변한것 같습니다. 자동완성도 지원하고, 명령을 입력하다 잘 모르겠으면 Tab을 누르세요.<br>파일저장, 읽어오기등 부족하지만 ide처럼 사용할 수 있습니다.</p><p>종료는 똑같이 quit()</p><p>시작할때 각종 도움말 보는 법 나와 있으니 참고 하세요. 이것도 안쓸 겁니다.</p><h3 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ jupyter notebook</div></pre></td></tr></table></figure><p>뭔가 이것저것 실행 되고 브라우저가 열립니다.<br>이놈이 앞으로 우리가 사용할 python 입니다.<br>종료하려면 브라우저 닫고 터미널에서는 Ctrl+c 누르면 종료 됩니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;REPL&quot;&gt;&lt;a href=&quot;#REPL&quot; class=&quot;headerlink&quot; title=&quot;REPL&quot;&gt;&lt;/a&gt;REPL&lt;/h3&gt;&lt;p&gt;파이썬의 REPL은 기본적으로 readline api를 사용하기 때문에 키보드 단축키 사용법이 terminal 
      
    
    </summary>
    
      <category term="python" scheme="http://korcow.github.io/categories/python/"/>
    
    
      <category term="python REPL" scheme="http://korcow.github.io/tags/python-REPL/"/>
    
  </entry>
  
  <entry>
    <title>설치</title>
    <link href="http://korcow.github.io/2017/12/01/mysql-%EC%84%A4%EC%B9%98/"/>
    <id>http://korcow.github.io/2017/12/01/mysql-설치/</id>
    <published>2017-12-01T00:24:11.011Z</published>
    <updated>2017-12-01T00:24:11.011Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mysql-설치"><a href="#mysql-설치" class="headerlink" title="mysql 설치"></a>mysql 설치</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mysql</div></pre></td></tr></table></figure><h4 id="mysql-시작"><a href="#mysql-시작" class="headerlink" title="mysql 시작"></a>mysql 시작</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql.server start</div></pre></td></tr></table></figure><h4 id="보안-설정"><a href="#보안-설정" class="headerlink" title="보안 설정"></a>보안 설정</h4><p>비밀번호 및 각종 보안 관련 설정</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_secure_installation</div></pre></td></tr></table></figure><ul><li>Would you like to setup VALIDATE PASSWORD plugin? : 복잡한 비밀번호를 사용하도록 제한해주는 플러그인을 사용하려면 yes, 비밀번호 제한받지 않고 쓰고 싶다면 no.</li><li>Remove anonymous users? : 익명사용자 삭제 여부. no 하면 <code>$ mysql -u root</code>가 아니라 <code>$ mysql</code>만으로도 접속 가능. yes하면 -u 옵션 필수.</li><li>Disallow root login remotely? : localhost외에 다른 ip에서 root 아이디로 원격접속 가능하게 할지. yes하면 원겹접속 불가.</li><li>Remove test database and access to it? : mysql에 기본적으로 설정된 test 디비 삭제 여부.</li><li>Reload privilege tables now? : 권한 갱신. </li></ul><h4 id="blew-service-설치"><a href="#blew-service-설치" class="headerlink" title="blew service 설치"></a>blew service 설치</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">brew tap homebrew/services</div><div class="line"></div><div class="line">brew services start mysql</div><div class="line">brew services restart mysql</div><div class="line">brew services list</div><div class="line">brew services cleanup</div></pre></td></tr></table></figure><h4 id="로그인시-데몬-자동-실행"><a href="#로그인시-데몬-자동-실행" class="headerlink" title="로그인시 데몬 자동 실행"></a>로그인시 데몬 자동 실행</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -sfv /usr/<span class="built_in">local</span>/opt/mysql/*.plist ~/Library/LaunchAgents</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;mysql-설치&quot;&gt;&lt;a href=&quot;#mysql-설치&quot; class=&quot;headerlink&quot; title=&quot;mysql 설치&quot;&gt;&lt;/a&gt;mysql 설치&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="Mysql" scheme="http://korcow.github.io/categories/Mysql/"/>
    
    
      <category term="설치" scheme="http://korcow.github.io/tags/%EC%84%A4%EC%B9%98/"/>
    
  </entry>
  
  <entry>
    <title>commnet 설정 및 조회</title>
    <link href="http://korcow.github.io/2017/12/01/mysql-comment/"/>
    <id>http://korcow.github.io/2017/12/01/mysql-comment/</id>
    <published>2017-11-30T17:01:55.751Z</published>
    <updated>2017-11-30T17:01:55.751Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Table-정보조회-with-comment"><a href="#Table-정보조회-with-comment" class="headerlink" title="Table 정보조회 (with comment)"></a>Table 정보조회 (with comment)</h3><h4 id="명령어를-통한-테이블정보-조회"><a href="#명령어를-통한-테이블정보-조회" class="headerlink" title="명령어를 통한 테이블정보 조회"></a>명령어를 통한 테이블정보 조회</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> <span class="keyword">STATUS</span>;</div></pre></td></tr></table></figure><h4 id="Query를-통한-테이블정보-조회"><a href="#Query를-통한-테이블정보-조회" class="headerlink" title="Query를 통한 테이블정보 조회"></a>Query를 통한 테이블정보 조회</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</div><div class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">'database_name'</span>;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA,TABLE_NAME,AUTO_INCREMENT,TABLE_COMMENT</div><div class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</div><div class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">'database_name'</span>;</div></pre></td></tr></table></figure><h3 id="COLUMN-정보조회-with-comment"><a href="#COLUMN-정보조회-with-comment" class="headerlink" title="COLUMN 정보조회 (with comment)"></a>COLUMN 정보조회 (with comment)</h3><h4 id="명령어를-통한-컬럼정보-조회"><a href="#명령어를-통한-컬럼정보-조회" class="headerlink" title="명령어를 통한 컬럼정보 조회"></a>명령어를 통한 컬럼정보 조회</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> TABLE_NAME;</div></pre></td></tr></table></figure><h4 id="Query를-통한-테이블정보-조회-1"><a href="#Query를-통한-테이블정보-조회-1" class="headerlink" title="Query를 통한 테이블정보 조회"></a>Query를 통한 테이블정보 조회</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</div><div class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">'database_name'</span>;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span>  TABLE_SCHEMA,TABLE_NAME,COLUMN_NAME,ORDINAL_POSITION,COLUMN_DEFAULT ,DATA_TYPE,COLUMN_TYPE,COLUMN_KEY,EXTRA,COLUMN_COMMENT</div><div class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS</div><div class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">'database_name'</span>  <span class="keyword">AND</span> TABLE_NAME=<span class="string">'table_name'</span>;</div></pre></td></tr></table></figure><h3 id="TABLE-COMMENT-설정"><a href="#TABLE-COMMENT-설정" class="headerlink" title="TABLE COMMENT 설정"></a>TABLE COMMENT 설정</h3><h4 id="테이블-생성시-COMMENT-설정"><a href="#테이블-생성시-COMMENT-설정" class="headerlink" title="테이블 생성시 COMMENT 설정"></a>테이블 생성시 COMMENT 설정</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLE_NAME (</div><div class="line">  column1 <span class="built_in">INT</span>,</div><div class="line">  ...</div><div class="line">) <span class="keyword">COMMENT</span> = <span class="string">'table comment'</span>;</div></pre></td></tr></table></figure><h4 id="TABLE-COMMENT-만-별도-수정하는-방법"><a href="#TABLE-COMMENT-만-별도-수정하는-방법" class="headerlink" title="TABLE COMMENT 만 별도 수정하는 방법"></a>TABLE COMMENT 만 별도 수정하는 방법</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME <span class="keyword">COMMENT</span> = <span class="string">'테이블설명'</span>;</div></pre></td></tr></table></figure><h3 id="COLUMNS-COMMENT-설정"><a href="#COLUMNS-COMMENT-설정" class="headerlink" title="COLUMNS COMMENT 설정"></a>COLUMNS COMMENT 설정</h3><h4 id="테이블-생성시-COLUMN-COMMENT-설정"><a href="#테이블-생성시-COLUMN-COMMENT-설정" class="headerlink" title="테이블 생성시 COLUMN COMMENT 설정"></a>테이블 생성시 COLUMN COMMENT 설정</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLE_NAME (</div><div class="line">  column1 <span class="built_in">INT</span> <span class="keyword">COMMENT</span> <span class="string">'column1 comment'</span>,</div><div class="line">  ...</div><div class="line">);</div></pre></td></tr></table></figure><h4 id="TABLE-COMMENT-만-별도-수정하는-방법-1"><a href="#TABLE-COMMENT-만-별도-수정하는-방법-1" class="headerlink" title="TABLE COMMENT 만 별도 수정하는 방법"></a>TABLE COMMENT 만 별도 수정하는 방법</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME <span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> column_name column_name data_type <span class="literal">NULL</span>여부 <span class="keyword">COMMENT</span> <span class="string">'column comment'</span>;</div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`callcenter`</span> <span class="keyword">CHANGE</span> <span class="string">`regdate`</span> <span class="string">`regdate`</span></div><div class="line"><span class="keyword">TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></div><div class="line"><span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span></div><div class="line"><span class="keyword">COMMENT</span> <span class="string">'callcenter 등록일'</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Table-정보조회-with-comment&quot;&gt;&lt;a href=&quot;#Table-정보조회-with-comment&quot; class=&quot;headerlink&quot; title=&quot;Table 정보조회 (with comment)&quot;&gt;&lt;/a&gt;Table 정보조회 (wit
      
    
    </summary>
    
      <category term="Mysql" scheme="http://korcow.github.io/categories/Mysql/"/>
    
    
      <category term="comment" scheme="http://korcow.github.io/tags/comment/"/>
    
  </entry>
  
  <entry>
    <title>보안연결</title>
    <link href="http://korcow.github.io/2017/12/01/mysql-%EB%B3%B4%EC%95%88%EC%97%B0%EA%B2%B0/"/>
    <id>http://korcow.github.io/2017/12/01/mysql-보안연결/</id>
    <published>2017-11-30T16:47:08.890Z</published>
    <updated>2017-11-30T16:47:08.890Z</updated>
    
    <content type="html"><![CDATA[<h3 id="보안-접속-생성"><a href="#보안-접속-생성" class="headerlink" title="보안 접속 생성"></a>보안 접속 생성</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_config_editor <span class="built_in">set</span> --login-path=[접속이름] --host=[host정보] --user=[계정명] --password --socket=/tmp/mysql.sock --port=3306</div></pre></td></tr></table></figure><h4 id="등록-list-확인"><a href="#등록-list-확인" class="headerlink" title="등록 list 확인"></a>등록 list 확인</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_config_editor <span class="built_in">print</span> --all</div></pre></td></tr></table></figure><h4 id="mysql-에-접속"><a href="#mysql-에-접속" class="headerlink" title="mysql 에 접속"></a>mysql 에 접속</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql --login-path=myconn</div></pre></td></tr></table></figure><h4 id="접속-정보-삭제"><a href="#접속-정보-삭제" class="headerlink" title="접속 정보 삭제"></a>접속 정보 삭제</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_config_editor remove --login-path=myconn</div></pre></td></tr></table></figure><h4 id="전체-정보를-삭제"><a href="#전체-정보를-삭제" class="headerlink" title="전체 정보를 삭제"></a>전체 정보를 삭제</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_config_editor remove</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;보안-접속-생성&quot;&gt;&lt;a href=&quot;#보안-접속-생성&quot; class=&quot;headerlink&quot; title=&quot;보안 접속 생성&quot;&gt;&lt;/a&gt;보안 접속 생성&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="Mysql" scheme="http://korcow.github.io/categories/Mysql/"/>
    
    
      <category term="mysql_config_editor" scheme="http://korcow.github.io/tags/mysql-config-editor/"/>
    
  </entry>
  
  <entry>
    <title>테이블 만들기</title>
    <link href="http://korcow.github.io/2017/12/01/mysql-%ED%85%8C%EC%9D%B4%EB%B8%94%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/12/01/mysql-테이블만들기/</id>
    <published>2017-11-30T16:34:58.425Z</published>
    <updated>2017-11-30T16:34:58.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="테이블-만들기"><a href="#테이블-만들기" class="headerlink" title="테이블 만들기"></a>테이블 만들기</h3><p>create table table명(<br>컬럼명 타입(크기),…);</p><p>show databases;</p><p>show tables;</p><p>use korcow;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable(</div><div class="line"><span class="keyword">no</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</div><div class="line">subject <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"><span class="keyword">content</span> mediumtext,</div><div class="line">created datetime,</div><div class="line"><span class="keyword">updated</span> datetime,</div><div class="line">primary <span class="keyword">key</span>(<span class="keyword">no</span>)</div><div class="line">);</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable</div></pre></td></tr></table></figure><p>``` sql<br>insert into mytable(subject, content, created) values (‘코미디언 이름’, ‘유재석, 강호동, 박명수, 박미선’, now());</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;테이블-만들기&quot;&gt;&lt;a href=&quot;#테이블-만들기&quot; class=&quot;headerlink&quot; title=&quot;테이블 만들기&quot;&gt;&lt;/a&gt;테이블 만들기&lt;/h3&gt;&lt;p&gt;create table table명(&lt;br&gt;컬럼명 타입(크기),…);&lt;/p&gt;
&lt;p&gt;show
      
    
    </summary>
    
      <category term="Mysql" scheme="http://korcow.github.io/categories/Mysql/"/>
    
    
      <category term="create table" scheme="http://korcow.github.io/tags/create-table/"/>
    
  </entry>
  
  <entry>
    <title>C언어 목차</title>
    <link href="http://korcow.github.io/2017/11/28/c-%EB%AA%A9%EC%B0%A8/"/>
    <id>http://korcow.github.io/2017/11/28/c-목차/</id>
    <published>2017-11-28T03:09:48.671Z</published>
    <updated>2017-11-28T03:09:48.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h3><h3 id="c언어-기초"><a href="#c언어-기초" class="headerlink" title="c언어 기초"></a>c언어 기초</h3><p>c언어는 가장 기초가 되는 프로그래밍 언어로 c++, objective c, java, python등의 언어로 접근하기 위한 필수 프로그램입니다.</p><p>shell 프로그래밍으로도 프로그램 작성이 가능하지만 c언어가 더 강력하고 빠릅니다.<br>c언어가 빠르고 강력하지만 라이브러리가 많이 부족한 편입니다.<br>한마디로 배울게 많지 않고 라이브러리에 없으면 만들어야 한다는 겁니다.<br>응용 프로그램을 만들때는 c언어로 만들지 않습니다. 생산성이 떨어지고 불편합니다.<br>c언어를 배우는 이유는 컴퓨터의 구조 프로그램의 동작원리를 알기 위해서입니다.</p><p>이번에 진행하는 c언어는 linux에서 gcc, vim, bash shell을 이용해 진행됩니다. 가장 기본적인 학습법입니다. Terminal이 아닌 윈도우에서 GUI에디터로 프로그래밍을 하면 C언어의 본래 의미를 찾기 힘듭니다. 재미도 없구요. Hello World의 의미도 깨닫지 못합니다. </p><h3 id="실습환경-설정"><a href="#실습환경-설정" class="headerlink" title="실습환경 설정"></a>실습환경 설정</h3><p>(맥과 리눅스 사용자는 Terminal과 vim을 사용할 수 있다는 전제 하에 패스해도 됨.)</p><ol><li>virtualbox에 centos설치 - Centos참조</li><li>gvim 설치및 vimrc 세팅 - vim참조</li><li>vim 기본 사용법 - vim참조</li></ol><h3 id="c언어를-시작하며"><a href="#c언어를-시작하며" class="headerlink" title="c언어를 시작하며"></a>c언어를 시작하며</h3><ol><li>c언어를 배우면서 기본적으로 알아 두면 좋은 내용들을 정리 했습니다.</li><li>c언어는 배울것이 많지 않습니다. 문법 이론만  배운다면 1시간이면 충분합니다. 다만 컴퓨터의 전반에 대해 학습이 필요합니다. 컴퓨터의 구조, 동작원리, 통신, 자료구조, 수학 및 통계, 운영체제, 각종 업무에대한 알고리즘…등</li></ol><h3 id="화면에-글자-출력하기"><a href="#화면에-글자-출력하기" class="headerlink" title="화면에 글자 출력하기"></a>화면에 글자 출력하기</h3><ol><li>putchar()</li><li>puts()</li><li>printf()</li></ol><h3 id="간단한-계산하기"><a href="#간단한-계산하기" class="headerlink" title="간단한 계산하기"></a>간단한 계산하기</h3><ol><li>printf 함수를 이용한 사칙연산</li><li>변수와 상수를 사용.</li><li>자료형, 연산자</li></ol><h3 id="키보드로-입력-받기"><a href="#키보드로-입력-받기" class="headerlink" title="키보드로 입력 받기"></a>키보드로 입력 받기</h3><ol><li>getchar()</li><li>gets()</li><li>fgets()</li><li>scanf()<ul><li>공백을 기본 seperator(분리자)로 사용.</li><li><code>%[^\n]s</code> 공백을 포함해서 입력받음.</li></ul></li><li>getch()<ul><li>한문자 입력 받음. 입력버퍼 사용하지 않음. </li></ul></li><li>getche()<ul><li>한문자 입력 받음. 입력버퍼 사용하지 않음. 입력 내용을 출력하지 않음. (비밀번호)</li></ul></li></ol><h3 id="if문-사용하기"><a href="#if문-사용하기" class="headerlink" title="if문 사용하기"></a>if문 사용하기</h3><ol><li>if</li><li>if~else</li><li>if~else if</li></ol><h3 id="for-문"><a href="#for-문" class="headerlink" title="for 문"></a>for 문</h3><ol><li>for (초깃값;조건;증감값)</li></ol><h3 id="함수-만들기"><a href="#함수-만들기" class="headerlink" title="함수 만들기"></a>함수 만들기</h3><ol><li>함수의 기본형</li></ol><h3 id="배열과-포인터"><a href="#배열과-포인터" class="headerlink" title="배열과 포인터"></a>배열과 포인터</h3><ol><li>배열</li><li>문자열</li><li>포인터</li></ol><h3 id="maloc"><a href="#maloc" class="headerlink" title="maloc"></a>maloc</h3><ol><li>메모리의 영역</li><li>메모리의 할당</li></ol><h3 id="while-문"><a href="#while-문" class="headerlink" title="while 문"></a>while 문</h3><ol><li>while</li><li>do~while</li></ol><h3 id="switch-case-문-사용하기"><a href="#switch-case-문-사용하기" class="headerlink" title="switch case 문 사용하기"></a>switch case 문 사용하기</h3><p>switch () case;</p><h3 id="continue-break-goto-label"><a href="#continue-break-goto-label" class="headerlink" title="continue, break, goto, label"></a>continue, break, goto, label</h3><p>강제 제어 이동, 종료</p><h3 id="인자로-입력-받기"><a href="#인자로-입력-받기" class="headerlink" title="인자로 입력 받기"></a>인자로 입력 받기</h3><ol><li>int main(int argc const char *argv[])</li></ol><h3 id="파일-입출력"><a href="#파일-입출력" class="headerlink" title="파일 입출력"></a>파일 입출력</h3><ol><li>fopen, fclose, free(), fprintf(), fscanf(), fseek(), rewind()</li></ol><h3 id="표준-라이브러리"><a href="#표준-라이브러리" class="headerlink" title="표준 라이브러리"></a>표준 라이브러리</h3><ol><li>표준라이브러리 알아보기</li></ol><h3 id="구조체-사용하기"><a href="#구조체-사용하기" class="headerlink" title="구조체 사용하기"></a>구조체 사용하기</h3><ol><li>여러 자료형이 혼합된 자료형.</li></ol><h3 id="유니온"><a href="#유니온" class="headerlink" title="유니온"></a>유니온</h3><ol><li>구조체와 같음. 패딩바이트를 줄이기 위해 사용함.</li></ol><hr><h2 id="응용실습"><a href="#응용실습" class="headerlink" title="응용실습"></a>응용실습</h2><h3 id="curses-ncurses"><a href="#curses-ncurses" class="headerlink" title="curses, ncurses"></a>curses, ncurses</h3><ol><li>터미널 제어</li></ol><h3 id="databse-연결"><a href="#databse-연결" class="headerlink" title="databse 연결"></a>databse 연결</h3><p>mysql, maria, mssql, db2… -&gt; ANSI SQL</p><ol><li>mysql 설치</li><li>기본 사용법</li><li>oracle, mssql</li></ol><h3 id="주소록-만들기"><a href="#주소록-만들기" class="headerlink" title="주소록 만들기"></a>주소록 만들기</h3><ol><li>주소록 만들기(file을 이용한)</li></ol><h3 id="학사관리-만들기"><a href="#학사관리-만들기" class="headerlink" title="학사관리 만들기"></a>학사관리 만들기</h3><ol><li>학사관리 만들기(data base를 이용한)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h3&gt;&lt;h3 id=&quot;c언어-기초&quot;&gt;&lt;a href=&quot;#c언어-기초&quot; class=&quot;headerlink&quot; title=&quot;c언어 기초&quot;&gt;&lt;/a&gt;c
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="c" scheme="http://korcow.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>파일 입출력</title>
    <link href="http://korcow.github.io/2017/11/25/c-%ED%8C%8C%EC%9D%BC-%EC%9E%85%EC%B6%9C%EB%A0%A5/"/>
    <id>http://korcow.github.io/2017/11/25/c-파일-입출력/</id>
    <published>2017-11-24T20:02:04.898Z</published>
    <updated>2017-11-24T20:02:04.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="파일-입출력"><a href="#파일-입출력" class="headerlink" title="파일 입출력"></a>파일 입출력</h3><h4 id="파일-저장하기"><a href="#파일-저장하기" class="headerlink" title="파일 저장하기"></a>파일 저장하기</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  //fopen(), fclose(), fprintf()</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    FILE *fp = fopen(<span class="string">"mynewfile.txt"</span>, <span class="string">"w"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 서식 문자열 파일로 출력</span></div><div class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">"%s\n"</span>, <span class="string">"hello world"</span>);</div><div class="line"></div><div class="line">    fclose(fp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="파일-읽기"><a href="#파일-읽기" class="headerlink" title="파일 읽기"></a>파일 읽기</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  //fopen(), fclose(), fscanf()</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> sp[<span class="number">30</span>];</div><div class="line">    FILE *fp = fopen(<span class="string">"mynewfile.txt"</span>, <span class="string">"r"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 서식 문자열 읽기</span></div><div class="line">    <span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, sp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,sp );</div><div class="line">    </div><div class="line">    <span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, sp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,sp );</div><div class="line"></div><div class="line">    fclose(fp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="파일모드"><a href="#파일모드" class="headerlink" title="파일모드"></a>파일모드</h4><table><thead><tr><th style="text-align:center">파일 모드</th><th style="text-align:center">기능</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:center">“r”</td><td style="text-align:center">읽기 전용</td><td style="text-align:left">파일을 읽기 전용으로 엽니다. 단, 파일이 반드시 있어야 합니다.</td></tr><tr><td style="text-align:center">“w”</td><td style="text-align:center">쓰기 전용</td><td style="text-align:left">새 파일을 생성합니다. 만약 파일이 있으면 내용을 덮어씁니다.</td></tr><tr><td style="text-align:center">“a”</td><td style="text-align:center">추가</td><td style="text-align:left">파일을 열어 파일 끝에 값을 이어 씁니다. 만약 파일이 없으면 파일을 생성합니다.</td></tr><tr><td style="text-align:center">“r+”</td><td style="text-align:center">읽기/쓰기</td><td style="text-align:left">파일을 읽기/쓰기용으로 엽니다. 단, 파일이 반드시 있어야 하며 파일이 없으면 NULL을 반환합니다.</td></tr><tr><td style="text-align:center">“w+”</td><td style="text-align:center">읽기/쓰기</td><td style="text-align:left">파일을 읽기/쓰기용으로 엽니다. 파일이 없으면 파일을 생성하고, 파일이 있으면 내용을 덮어씁니다.</td></tr><tr><td style="text-align:center">“a+”</td><td style="text-align:center">추가(읽기/쓰기)</td><td style="text-align:left">파일을 열어 파일 끝에 값을 이어 씁니다. 만약 파일이 없으면 파일을 생성합니다. 읽기는 파일의 모든 구간에서 가능하지만, 쓰기는 파일의 끝에서만 가능합니다.</td></tr><tr><td style="text-align:center">t</td><td style="text-align:center">텍스트 모드</td><td style="text-align:left">파일을 읽거나 쓸 때 개행문자 \n와 \r\n을 서로 변환합니다.^Z 파일의 끝으로 인식하므로 ^Z까지만 파일을 읽습니다(^Z는 Ctrl+Z 입력을 뜻합니다).</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">바이너리 모드</td><td style="text-align:left">파일의 내용을 그대로 읽고, 값을 그대로 씁니다.</td></tr><tr><td style="text-align:center">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td style="text-align:center">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td style="text-align:left"></td></tr></tbody></table><h3 id="스트림"><a href="#스트림" class="headerlink" title="스트림"></a>스트림</h3><p>스트림에서 데이터를 특정한 형식으로 읽어온다.<br>스트림에서 형식 문자열에서 지정한 방식대로 데이터를 읽어온 후, 형식 문자열의 각각의 형식 지정자에 대응하는 인자가 가리키는 메모리 공간에 그 데이터를 집어 넣는다. </p><p>인자</p><p>stream</p><p>데이터를 읽어올 스트림의 FILE 객체를 가리키는 포인터</p><p>format</p><p>C 형식 문자열로 다음의 것들을 포함하고 있다</p><ul><li>공백 문자 (Whitespace character  개행 문자<code>\n</code>, 탭 문자<code>\t</code>, 공백)  : fscanf 함수는 비-공백 문자를 읽어들이기 전까지 읽혀지는 모든 공백 문자들을 무시한다. </li><li>비-공백 문자 (Non whitespcae character), 단 % 를 제외한다 : 공백 문자가 아니거나 형식 지정자에 포함되지 않는 것들은 함수로 하여금 다음 문자를 스트림에서 읽어 들이고 이와 이 비-공백 문자와 비교하여 같다면 버리고 다음 문자와 형식으로 진행한다. 만일 다르다면 함수가 종료되고, 스트림에서 읽혀지지 않은 다른 문자들은 모두 남아있게 된다.</li><li>형식 지정자 : 이는 % 로 지정되는 것들로 스트림에서 어떠한 형식으로 데이터를 읽어오고, 또 각각의 형식 지정자에 대응되는 인자에 어떠한 형식으로 저장할 지에 대해 결정한다. 형식 지정자는 아래와 같은 꼴로 생겼다.</li></ul><blockquote><p>%[*][폭(width)][한정자(modifiers)]타입(type)</p></blockquote><ul><li><code>*</code> :데이터를 스트림에서 받아들이지만 무시된다. 물론, 이에 대응되는 인자에는 받아들인 데이터가 저장되지 않고 이 인자는 다음 형식 태그에 대응된다.<br>예를 들어 <code>fscanf(fp, &quot;%*d%d&quot;, i,j);</code> 의 경우 먼저 수를 입력하더라도 %*d 형식이므로 무시 된다. 그 다음 수를 입력하면 %d 형식 태그가 j 가 아닌 i 에 대응되어 i 에 그 다음 입력한 수가 들어가게 된다. 이 때 j 에는 아무런 값도 들어가지 않는다.</li><li>폭: 스트림에서 읽어들일 최대 문자 수를 지정한다.<br>예를 들어 <code>fscanf(fp, &quot;%10s&quot;, str);</code> 로 했을 경우 스트림에서 최대 10 문자를 읽어와 str 에 저장한다. 이 때 주의할 점은 str 에는 NULL 문자가 들어갈 수 있는 충분한 공간이 남아 있어야 한다. </li><li>한정자:입력받는 데이터의 크기를 지정한다. int (d, i, n), unsigned int (o, u, x) float (e, f, g) 형에 대해 입력받는 데이터의 크기를 설정할 수 있다. <ul><li>h : short int (d, i, n 의 경우) 혹은 unsigned short int (o, u, x 일 경우)</li><li>l : long int (d, i, n 의 경우) 혹은 unsigned long int (o, u, x 일 경우), 혹은 double (e,f, g 일 경우)</li><li>L : long double (e, f, g 일 경우)</li></ul></li><li>타입: 데이터를 어떠한 형식으로 혹은 어떠한 값만을 읽어들어야 할 지에 대해 지정해준다. 아래 표를 참고.</li></ul><h4 id="fscanf-함수의-타입-지정자들"><a href="#fscanf-함수의-타입-지정자들" class="headerlink" title="fscanf 함수의 타입 지정자들"></a>fscanf 함수의 타입 지정자들</h4><table><thead><tr><th style="text-align:center">타입</th><th>대응되는 입력 방식</th><th style="text-align:center">대응되는 인자의 형태</th></tr></thead><tbody><tr><td style="text-align:center">c</td><td>단일 문자: 하나의 문자를 읽어들인다. 만일 폭에 1 이 아닌 값으로 지정되어 있다면 (기본값은 1) 함수는 폭 만큼의 문자를 읽어들인 후 이에 대응하는 인자가 가리키는 메모리 공간에 저장한다. 이 때 마지막에는 널 문자를 붙이지 않는다.</td><td style="text-align:center">char *</td></tr><tr><td style="text-align:center">d</td><td>십진법으로 표현된 정수: 말그대로 십진법으로 쓰인 정수로, + 나 - 기호로 시작할 수도 있다.</td><td style="text-align:center">int *</td></tr><tr><td style="text-align:center">e,E,f,g,G</td><td>부동 소수점: 소수점을 포함하고 있는 소수(decimal number) 로 + 나 - 기호로 시작할 수도 있으며, e 나 E 문자(10 의 지수를 나타내기 위해)를 포함할 수 도 있다. -732.103 , 12e-4, +123.10 은 모두 올바른 입력이다.</td><td style="text-align:center">float *</td></tr><tr><td style="text-align:center">o</td><td>8진법으로 표현된 정수</td><td style="text-align:center">int *</td></tr><tr><td style="text-align:center">s</td><td>문자열:  공백문자를 찾을 때 까지 문자들을 읽어들인다.</td><td style="text-align:center">char *</td></tr><tr><td style="text-align:center">u</td><td>부호가 없는 십진법으로 표현된 정수</td><td style="text-align:center">unsigned int *</td></tr><tr><td style="text-align:center">x,X</td><td>16진법으로 표현된 정수</td><td style="text-align:center">int *</td></tr><tr><td style="text-align:center">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td></td><td style="text-align:center">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr></tbody></table><h4 id="부수적-인자"><a href="#부수적-인자" class="headerlink" title="부수적 인자"></a>부수적 인자</h4><p>형식 문자열의 정의된 순서대로 각 형식 지정자는 이에 대응하는 인자가 가리키는 메모리 공간에 데이터를 집어넣는다. 이 때, 부수적 인자들은 모두 포인터의 형태 (주소값) 여야 한다. 예를 들어서 i 라는 변수에 값을 대입하려면 인자로 &amp;i 를 전달해야 한다. 절대로 i 를 전달하면 안된다. </p><p>에를 들면 아래와 같다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FILE *fp = fopen(<span class="string">"out.txt"</span>, <span class="string">"w"</span>);</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%d"</span>, &amp;i); <span class="comment">//꼭 주소값을 전달해야 된다는 점에 유의!</span></div></pre></td></tr></table></figure><h4 id="리턴값"><a href="#리턴값" class="headerlink" title="리턴값"></a>리턴값</h4><p>성공할 경우, fscanf 함수는 읽어들인 데이터의 수를 리턴한다. 만일 어떠한 데이터도 형식 지정자와 일치하는 것이 없다면 0 이 될 수 도 있다.<br>만일 어떠한 데이터도 성공적으로 읽어들이기 전에 입력이 실패한다면 EOF 가 리턴된다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;파일-입출력&quot;&gt;&lt;a href=&quot;#파일-입출력&quot; class=&quot;headerlink&quot; title=&quot;파일 입출력&quot;&gt;&lt;/a&gt;파일 입출력&lt;/h3&gt;&lt;h4 id=&quot;파일-저장하기&quot;&gt;&lt;a href=&quot;#파일-저장하기&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="fopen" scheme="http://korcow.github.io/tags/fopen/"/>
    
      <category term="fclose" scheme="http://korcow.github.io/tags/fclose/"/>
    
      <category term="fprintf" scheme="http://korcow.github.io/tags/fprintf/"/>
    
      <category term="fscanf" scheme="http://korcow.github.io/tags/fscanf/"/>
    
  </entry>
  
  <entry>
    <title>continue, break, goto, label</title>
    <link href="http://korcow.github.io/2017/11/23/c-continue-%EA%B8%B0%ED%83%80%EC%A0%9C%EC%96%B4%EB%AC%B8/"/>
    <id>http://korcow.github.io/2017/11/23/c-continue-기타제어문/</id>
    <published>2017-11-23T08:51:26.856Z</published>
    <updated>2017-11-23T08:51:26.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>반복문에서 명령을 계속 진행하지 않고 건너 뛸때 사용합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        iNum +=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (iNum % <span class="number">2</span> ==  <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">continue</span>;  <span class="comment">// iNum이 짝수인 경우 출력을 하지 않음.</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,iNum); </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (iNum == <span class="number">100</span>) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>반복문을 강제종료 할때 사용합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iNum = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        iNum +=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (iNum == <span class="number">100</span>)&#123;</div><div class="line">            <span class="keyword">break</span>;  <span class="comment">// iNum이 100이면 종료</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,iNum); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="goto-label"><a href="#goto-label" class="headerlink" title="goto label"></a>goto label</h3><p>제어를 label로 강제로 옮깁니다. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> iNum;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;iNum);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (iNum == <span class="number">1</span>)         <span class="comment">// iNum이 1이면</span></div><div class="line">        <span class="keyword">goto</span> ONE;          <span class="comment">// 레이블 ONE으로 즉시 이동</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (iNum == <span class="number">2</span>)    <span class="comment">// iNum이 2이면</span></div><div class="line">        <span class="keyword">goto</span> TWO;          <span class="comment">// 레이블 TWO로 즉시 이동</span></div><div class="line">    <span class="keyword">else</span>                   <span class="comment">// 1도 아니고 2도 아니면</span></div><div class="line">        <span class="keyword">goto</span> EXIT;         <span class="comment">// 레이블 EXIT로 즉시 이동</span></div><div class="line"></div><div class="line">ONE:    <span class="comment">// 레이블 ONE</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"1입니다.\n"</span>);</div><div class="line">    <span class="keyword">goto</span> EXIT; <span class="comment">// 레이블 EXIT로 즉시 이동</span></div><div class="line"></div><div class="line">TWO:    <span class="comment">// 레이블 TWO</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"2입니다.\n"</span>);</div><div class="line">    <span class="keyword">goto</span> EXIT; <span class="comment">// 레이블 EXIT로 즉시 이동</span></div><div class="line"></div><div class="line">EXIT:    <span class="comment">// 레이블 EXIT</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;continue&quot;&gt;&lt;a href=&quot;#continue&quot; class=&quot;headerlink&quot; title=&quot;continue&quot;&gt;&lt;/a&gt;continue&lt;/h3&gt;&lt;p&gt;반복문에서 명령을 계속 진행하지 않고 건너 뛸때 사용합니다.&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="continue" scheme="http://korcow.github.io/tags/continue/"/>
    
      <category term="break" scheme="http://korcow.github.io/tags/break/"/>
    
      <category term="goto" scheme="http://korcow.github.io/tags/goto/"/>
    
      <category term="label" scheme="http://korcow.github.io/tags/label/"/>
    
  </entry>
  
  <entry>
    <title>switch case</title>
    <link href="http://korcow.github.io/2017/11/23/c-switch-case/"/>
    <id>http://korcow.github.io/2017/11/23/c-switch-case/</id>
    <published>2017-11-23T07:48:43.308Z</published>
    <updated>2017-11-23T07:48:43.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h3><p>조건문의 또다른 형태입니다.<br>값에 따라 분기를 하는 구조입니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(value)&#123;</div><div class="line">    <span class="keyword">case</span> value1:</div><div class="line">    명령;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> value2:</div><div class="line">    명령;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    .. (생략) ..</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    명령;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // atoi()</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySub</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMulti</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myDiv</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> iNum1= atoi(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">int</span> iNum2= atoi(argv[<span class="number">3</span>]);</div><div class="line">    <span class="keyword">char</span> calcType = argv[<span class="number">2</span>][<span class="number">0</span>];</div><div class="line"></div><div class="line">    <span class="keyword">switch</span>(calcType)</div><div class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">            myAdd(iNum1, iNum2);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">            mySub(iNum1, iNum2);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:</div><div class="line">            myAdd(iNum1, iNum2);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:</div><div class="line">            myAdd(iNum1, iNum2);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"수식을 잘못 입력했습니다."</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iNum1 + iNum2);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySub</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iNum1 - iNum2);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMulti</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iNum1 * iNum2);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myDiv</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iNum1 / iNum2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;switch-case&quot;&gt;&lt;a href=&quot;#switch-case&quot; class=&quot;headerlink&quot; title=&quot;switch case&quot;&gt;&lt;/a&gt;switch case&lt;/h3&gt;&lt;p&gt;조건문의 또다른 형태입니다.&lt;br&gt;값에 따라 분기를 하는 구조
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="switch" scheme="http://korcow.github.io/tags/switch/"/>
    
  </entry>
  
  <entry>
    <title>인자로 입력 받기</title>
    <link href="http://korcow.github.io/2017/11/23/c-%EC%9D%B8%EC%9E%90%EB%A1%9C-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/11/23/c-인자로-입력-받기/</id>
    <published>2017-11-23T07:43:34.058Z</published>
    <updated>2017-11-23T07:43:34.058Z</updated>
    
    <content type="html"><![CDATA[<h3 id="인자로-입력받기"><a href="#인자로-입력받기" class="headerlink" title="인자로 입력받기"></a>인자로 입력받기</h3><p>리눅스 명령은 프로그램 실행시 옵션으로 인자를 입력받아 처리를 할 수 있게 만듭니다.<br>입력되는 인자에 따라 루틴을 바꾸어 준다든지, 인자를 매개변수로 사용할 수 있도록 해보겠습니다.</p><p>먼저 간단한 계산기를 만들어 보죠.<br>프로그램 이름은 mycalc로 할겁니다.<br>mycalc 인자1, 인자2, 인자3을 입력받을 겁니다.<br>인자1은 num1, 인자2는 연산자, 인자3은 num3로 구분을 할 겁니다.<br>인자의 구분은 스페이스로 할겁니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mycalc 10 + 20</div></pre></td></tr></table></figure><p>지금까지 메인 함수를 사용하면서 함수인자를 일부러 void로 사용하지 않았습니다.<br>함수를 배울때 인자를 입력받지 않을 때는 void를 넣는다고 했습니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>인자를 입력받기 위해서는 <code>(int argc, const char *argv[])</code>를 사용합니다.<br>자료형을 바꿀수 있지만 관례적으로 위와 같이 사용합니다.<br>argc 변수에는 인자의 갯수(스페이스로 구분)<br>*argv[]는 인자의 문자열이 들어갑니다. char로 선언했으니 모두 문자로 인식합니다.<br>숫자로 연산을 해야 한다면 문자를 숫자로 바꾸어야 합니다. argv[0]은 파일명입니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, argc);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argc; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"argv[%d] = %s\n"</span>, i, argv[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>먼저 위처럼 코딩후 실행을 해보세요. 인자를 여러개 입력해 보세요. 또 인자 없이도 실행해 보세요. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // atoi()</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySub</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMulti</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myDiv</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">        <span class="keyword">int</span> iNum1= atoi(argv[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">int</span> iNum2= atoi(argv[<span class="number">3</span>]);</div><div class="line">        <span class="keyword">char</span> calcType = argv[<span class="number">2</span>][<span class="number">0</span>];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (calcType == <span class="string">'+'</span>)&#123;</div><div class="line">            myAdd(iNum1, iNum2);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(calcType == <span class="string">'-'</span>)&#123;</div><div class="line">            mySub(iNum1, iNum2);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (calcType == <span class="string">'*'</span>)&#123;</div><div class="line">            myAdd(iNum1, iNum2);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (calcType == <span class="string">'/'</span>)&#123;</div><div class="line">            myAdd(iNum1, iNum2);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"수식을 잘못 입력했습니다."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iNum1 + iNum2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySub</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iNum1 - iNum2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMulti</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iNum1 * iNum2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myDiv</span><span class="params">(<span class="keyword">int</span> iNum1, <span class="keyword">int</span> iNum2)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iNum1 / iNum2);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 프로그램에서 함수를 사용하지 않고 if 문에서 바로 printf()만 사용해도 됩니다만 옵션에 따른 실행을 해야 하는 경우 함수로 처리하면 편하다는 예로 만들어 봤습니다.</p><ul><li>참고로 문자열을 입력하려면 ‘hello world !!!’ 이렇게 쓰면 됩니다.</li><li>문자열을 인자로 입력받아서 선문자로 감싸는 프로그램을 만들어 보세요.</li><li>입력받은 문자열 카운트해서 사용하면 됩니다. 영어만, 한글만, 한영혼합해서 카운트도 해보세요. 한글이 사용되면 카운트 하는 알고리즘을 바꾸어야 합니다. 한글이 있는지 없는지도 확인하는 함수도 필요하겠네요.<br><code>#include &lt;string.h&gt; // strlen()</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;인자로-입력받기&quot;&gt;&lt;a href=&quot;#인자로-입력받기&quot; class=&quot;headerlink&quot; title=&quot;인자로 입력받기&quot;&gt;&lt;/a&gt;인자로 입력받기&lt;/h3&gt;&lt;p&gt;리눅스 명령은 프로그램 실행시 옵션으로 인자를 입력받아 처리를 할 수 있게 만듭니다
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
  </entry>
  
  <entry>
    <title>malloc</title>
    <link href="http://korcow.github.io/2017/11/23/c-malloc/"/>
    <id>http://korcow.github.io/2017/11/23/c-malloc/</id>
    <published>2017-11-23T03:45:57.337Z</published>
    <updated>2017-11-23T03:45:57.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="메모리의-영역"><a href="#메모리의-영역" class="headerlink" title="메모리의 영역"></a>메모리의 영역</h3><p>메모리는 stack, heap, data, code 영역으로 나누어 집니다.<br>code : 이진 실행 파일이 들어감.<br>data : 초기화된 각종 변수들이 들어감<br>stack: 프로그램 실행시 data영역에 있는 값을 불러와서 처리하고 다시 data영역에 저장<br>heap : 필요에의해 메모리를 참조하고 사용함. malloc(), oop의 객체가 이곳을 사용함.</p><h3 id="메모리의-동적-할당"><a href="#메모리의-동적-할당" class="headerlink" title="메모리의 동적 할당"></a>메모리의 동적 할당</h3><p>지금까지 배열을 사용하면서 정적인 방식으로 메모리를 할당해 왔습니다.<br>프로그램을 컴파일하면 이진 파일이 생성됩니다.<br>이 이진파일을 실행하면 OS는 code영역에 쓰고 data영역에 각종변수를 할당합니다. 이때 변수의 크기만큼 메모리를 사용합니다. stack영역은 프로그램 처리시 사용하는 변수를 data영역에서 불러와서 처리하고 다시 data영역에 저장합니다. 이때 사용하는 stack, data, code의 영역은 크기가 실행과 동시에 할당되어 집니다. 프로그램이 종료 될때 까지 계속 확보 되어 사용되어 집니다.</p><p>변수를 선언할 때는 문제가 되지 않지만, 배열을 선언 할때 크기를 지정해 줍니다.<br>한학년에 10개의 반이 있고 한반에는 100명이 있다고 가정해 보겠습니다. 1학년 학생의 성적을 처리하기 위해 배열을 선언해서 처리 해야합니다. 이때 1000명의 데이터를 모두 불러와서 처리 해야 하는가?… 메모리가 충분히 여유가 있다면 그렇게 처리해도 됩니다. 불필요한 입출력을 줄일수 있으니 좋은 방법입니다. 하지만 메모리의 가격은 무척 높은 편입니다. 하드 디스크처럼 사용할 수 없다는데 문제가 있습니다. 한정되고 적은 메모리를 효율적으로 사용하기 위해서 메모리의 영역을 나누었고, 프로그램이 종료되면 메모리를 회수하는 기법을 사용합니다. 배열을 선언 할때도 최소한으로 선언을 해야 합니다.</p><p>메모리를 효율적으로 할당하고 회수하는 작업을 메모리의 동적 할당이라고 합니다.<br>c언어는 malloc()함수로 메모리를 할당하고 free() 함수로 회수를 합니다. 이때 사용하는 메모리 영역은 heap영역입니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iKor[<span class="number">100</span>] = &#123;<span class="number">0</span>,&#125;; <span class="comment">// 배열의 크기를 지정</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위에서 배열의 크기를 100으로 지정했습니다. 국어점수를 최대 100개까지 저장할 수 있다고 선언한겁니다. 하지만 현재 아무것도 저장되지 않았습니다. 100개의 낭비가 있는 겁니다.<br>100이라고 상수로 입력하지 않고 변수로 사용하면 어떨까요.?<br>또 자동으로 하나씩 증가하고, 줄어든다면 …</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iArrNum= <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> iKor[iArrNum] = &#123;<span class="number">0</span>,&#125;; <span class="comment">// 배열의 크기를 지정</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위와 같이 입력하고 컴파일 해보세요.<br>iKor을 초기화 하지 못해서 오류가 날겁니다.<br>배열은 data영역에 메모리를 확보하는데 반드시 상수값을 입력해야만 합니다.<br>프로그램 실행 중에는 메모리 할당 변경이 안됩니다.<br>위와 같은 방법을 사용할 수 없습니다.<br>동적으로 메모리를 사용해야 할 경우 heap영역에 할당해야 하고 heap영역을 사용할려면 포인터와 malloc()을 이용해야 합니다.</p><h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><p>인자로 전체크기를 받습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // malloc(), free()</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iArrNum= <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> *iKor = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * iArrNum); <span class="comment">// 포인터변수의 배열의 크기를 지정</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iArrNum; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iKor[i]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">free</span>(iKor); <span class="comment">// 메모리에서 해제</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위프로그램은 값을 초기화 하지 않았기 때문에 어떤 값이 나올지 모릅니다.<br>malloc() 함수를 이용해서 메모리를 확보하고<br>free() 함수를 이용해서 메모리를 해제했습니다.</p><h3 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h3><p>calloc()함수는 자동으로 값을 초기화 해줍니다.<br>인자로 배열의 크기와 자료형의 크기를 받습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // malloc(), free()</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iArrNum= <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> *iKor = (<span class="keyword">int</span> *)<span class="built_in">calloc</span>(iArrNum, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 포인터변수의 배열의 크기를 지정</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iArrNum; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iKor[i]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">free</span>(iKor); <span class="comment">// 메모리에서 해제</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a>realloc</h3><p>이미 할당한 메모리의 크기를 바꿀때 사용합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // malloc(), free()</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iArrNum= <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> *iKor = (<span class="keyword">int</span> *)<span class="built_in">calloc</span>(iArrNum, iArrNum * <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 포인터변수의 배열의 크기를 지정</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iArrNum; i++)&#123;</div><div class="line">        iKor[i] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iArrNum; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iKor[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 필요에 의해 메모리를 재할당함.</span></div><div class="line"></div><div class="line">    iArrNum= <span class="number">6</span>;</div><div class="line">    iKor = (<span class="keyword">int</span> *)<span class="built_in">realloc</span>(iKor, iArrNum * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    <span class="comment">// 포인터변수의 배열의 크기를 재지정</span></div><div class="line">    <span class="comment">// 인자는 바꿀 포인터, 전체크기</span></div><div class="line">    <span class="comment">// 값도 초기화 됨</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"크기를 다시 지정한 후 출력"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iArrNum; i++)&#123;</div><div class="line">        iKor[i] = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iArrNum; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iKor[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(iKor); <span class="comment">// 메모리에서 해제</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;메모리의-영역&quot;&gt;&lt;a href=&quot;#메모리의-영역&quot; class=&quot;headerlink&quot; title=&quot;메모리의 영역&quot;&gt;&lt;/a&gt;메모리의 영역&lt;/h3&gt;&lt;p&gt;메모리는 stack, heap, data, code 영역으로 나누어 집니다.&lt;br&gt;code
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="maloc" scheme="http://korcow.github.io/tags/maloc/"/>
    
  </entry>
  
  <entry>
    <title>화면에 글자 출력하기</title>
    <link href="http://korcow.github.io/2017/11/21/c-%ED%99%94%EB%A9%B4%EC%97%90-%EA%B8%80%EC%9E%90-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/11/21/c-화면에-글자-출력하기/</id>
    <published>2017-11-20T15:11:05.328Z</published>
    <updated>2017-11-20T15:11:05.328Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/SSu822Lgta8" frameborder="0" allowfullscreen></iframe></div><hr><h2 id="화면에-글자-출력하기"><a href="#화면에-글자-출력하기" class="headerlink" title="화면에 글자 출력하기"></a>화면에 글자 출력하기</h2><p>c언어는 함수로 시작해서 함수로 끝납니다. 모든 부품들이 함수로 만들어 져있습니다. </p><p>c언어에서 화면에 출력을 하는 함수는 다음과 같습니다. </p><ul><li>putchar() 영문 1문자를 출력(한글 1문자는 영어 3문자와 같음. ms-windows는 2문자)</li><li>puts() 문자열을 출력</li><li>printf() 문자열을 출력(출력포맷을 정할 수 있음)</li></ul><h3 id="1문자-출력"><a href="#1문자-출력" class="headerlink" title="1문자 출력"></a>1문자 출력</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명: 001-putchar-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'a'</span>); <span class="comment">// 한문자를 출력합니다. </span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1행은 선언문이라고 하는데 무언가를 화면에 출력할때, 입력받을때 반드시 사용해야합니다.<br>위와 같이 프로그램을 작성했으면 저장을 하고 실행이 되도록 컴파일을 합니다.<br><code>&lt;Esc&gt;:w&lt;Enter&gt;</code> 저장<br><code>&lt;Esc&gt;:q&lt;Enter&gt;</code> vim종료</p><h3 id="컴파일하고-실행하기"><a href="#컴파일하고-실행하기" class="headerlink" title="컴파일하고 실행하기"></a>컴파일하고 실행하기</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gcc 001-putchar-01.c -o 001-putchar-01.o   <span class="comment"># 컴파일</span></div><div class="line">$ ./001-putchar-01.o                         <span class="comment"># 실행</span></div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a%</div></pre></td></tr></table></figure><p>터미널에서 1행 처럼 컴파일 하고<br>2행 처럼 실행을 하는 겁니다.</p><p>우리가 원하는데로 a가 잘 출력 되었습니다만 마지막에 %가 붙었습니다. 실제로 %가 붙은건 아니고 제어문자와 겹쳐서 그렇게 보이는것 뿐입니다. 흔히 깨져 보인다고 하죠.</p><h3 id="출력하고-줄바꾸기"><a href="#출력하고-줄바꾸기" class="headerlink" title="출력하고 줄바꾸기"></a>출력하고 줄바꾸기</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//파일명 : 001-putchar-02.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'a'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>); <span class="comment">// 줄을 바꾸어주는 문자입니다.</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$gcc</span> 001-putchar-02.c -o 001-putchar-02.o</div><div class="line">$./001-putchar-02.o</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a</div></pre></td></tr></table></figure><p>이번에는 6행을 보면 <code>\n</code>을 추가했습니다. putchar는 1문자만 출력한다고 했는데. 두글자를 입력했습니다. <code>\n</code>은 c언어가 1문자로 인식합니다. 줄을 바꾸어 주는 역할을 합니다. 이런 문자가 몇가지 더있는데 이를 이스케이프문자 라고 합니다.</p><table><thead><tr><th>esc문자</th><th>설명</th></tr></thead><tbody><tr><td><code>\a</code></td><td>beep음</td></tr><tr><td><code>\b</code></td><td>백스페이스</td></tr><tr><td><code>\f</code></td><td>폼 피드</td></tr><tr><td><code>\n</code></td><td>줄바꿈</td></tr><tr><td><code>\r</code></td><td>리턴(커서를 맨앞으로 이동)</td></tr><tr><td><code>\t</code></td><td>수평탭</td></tr><tr><td><code>\v</code></td><td>수직탭</td></tr><tr><td><code>\\</code></td><td>\출력</td></tr><tr><td><code>\&#39;</code></td><td>작은따옴표(‘)</td></tr><tr><td><code>\&quot;</code></td><td>큰타옴표(“)</td></tr><tr><td><code>\?</code></td><td>물음표(?)</td></tr></tbody></table><h3 id="Hello-World-출력하기"><a href="#Hello-World-출력하기" class="headerlink" title="Hello World 출력하기"></a>Hello World 출력하기</h3><p>이번에는 putchar()를 가지고 Hello World를 출력해 볼까요.?<br>복사와 붙여넣기는 코딩의 필수<br>우리는 vim을 사용하니까 vim의 신공으로<br><code>i&#39;h&#39;&lt;Esc&gt;yy15p</code><br>커서를 맨앞에 놓고 <code>&lt;C-v&gt;15jIputchar(&lt;Esc&gt;</code><br>커서를 첫줄 p에 놓고 <code>&lt;S-v&gt;15j:s/$/);/g&lt;Enter&gt;</code></p><p>이런 신공이 불편하다면 <code>yy15p</code> 하고 문자를 수정<br>설마 블로그에서 복사를… ^^; 해도 됩니다. 코딩은 그렇게 편하게 하는 겁니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 001-putchar-03.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'H'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'e'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'o'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'W'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'o'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'r'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'l'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'d'</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hellow World</div></pre></td></tr></table></figure><p>스스로 컴파일하고 실행해 보세요.<br>vim에서 컴파일 하고 실행하기<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">w</span> 파일명.<span class="keyword">c</span></div><div class="line">:!gcc 파일명.<span class="keyword">c</span> -<span class="keyword">o</span> 파일명.<span class="keyword">o</span></div><div class="line">:!./파일명.<span class="keyword">o</span></div></pre></td></tr></table></figure></p><p>vim 세팅을 했다면 <code>&lt;F5&gt;</code> 누르면 자동으로 컴파일하고 실행하도록 했습니다.</p><h3 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h3><p>putchar()를 갖이고 문장을 입력하려면 무척 불편합니다. 그래서 문장을 출력하기 위해서 puts() 함수를 사용합니다. puts함수는 putchar() 함수로 만들어졌습니다. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 001-puts-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Hello World"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hellow World</div></pre></td></tr></table></figure><p>puts()는 명령이 끝나면 자동으로 줄을 바꾸어 줍니다. <code>\n</code>을 넣을 필요가 없습니다. 줄을 바꾸지 않고 싶을 때는 printf()를 사용합니다.</p><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><p>printf()는 출력형식을 사용자가 자유롭게 지정할 수 있습니다. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 001-printf-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"Hello World\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, <span class="number">65</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c"</span>, <span class="string">'A'</span>, <span class="string">'\n'</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="number">65</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%f"</span>, <span class="number">3.14</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"내이름은 %s이고 나이는 %d살 입니다.\n"</span>, <span class="string">"홍길동"</span>, <span class="number">16</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">A</div><div class="line">A</div><div class="line">65</div><div class="line">3.140000</div><div class="line">Hello World</div><div class="line">내이름은 홍길동이고 나이는 16살 입니다.</div></pre></td></tr></table></figure><p>위 프로그램에서 6행에 문자를 출력하는데 65란 숫자를 써도 문자가 출력되는 것을 볼 수 있습니다.<br>컴퓨터는 문자를 인식 하지 못합니다. 오직 0, 1의 2진수만 알죠.<br>ASCII 문자라는 것이 있습니다. 숫자를 문자로 표현 하는 약속이죠. 모호스 부호처럼요.<br>%c 는 숫자를 문자로 변경해서 출력해 주는 기능을 가지고 있습니다.<br>당연히 문자는 문자로 출력합니다. 오직 1문자만. 한글은 문자가 될수 없습니다. 한글은 3byte 초성,중성,종성으로 된 문자열 입니다.</p><table><thead><tr><th>출력형식 문자</th><th>설명</th></tr></thead><tbody><tr><td>%c</td><td>문자하나를 출력, 상수가 숫자일경우 ascii로 문자로 대체</td></tr><tr><td>%s</td><td>문자열을 출력</td></tr><tr><td>%Nf</td><td>10진 실수를 N안에 출력 예)10.2f 전체소수점 포함 10자리, 소수점이하 2자리</td></tr><tr><td>%Nd</td><td>10진 정수를 N안에 출력</td></tr></tbody></table><p>출력형식은 위에 있는것 말고도 조금 더있지만 자료형에서 다루겠습니다. </p><h3 id="박스-그리기"><a href="#박스-그리기" class="headerlink" title="박스 그리기"></a>박스 그리기</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : mybox.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"================"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"|              |"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"================"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">================</div><div class="line">|              |</div><div class="line">================</div></pre></td></tr></table></figure><p>선문자를 이용하면 더 예쁘게 그릴수 있습니다.<br>이걸 왜 만들었을 까요?<br>vim에서 <code>:r!./box.o</code> 해보세요.<br>printf까지 출력되도록 만들어도 보세요.<br>응용해서 자신의 명함도 만들어 보세요.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">회사명 : (주)대한민국     이름 : 홍길동</div><div class="line">                          직책 : 사원</div><div class="line">주소: 서울시 뭐뭐구 뭐뭐동</div><div class="line">Tel : 000.0000.0000  H.P 000.0000.0000</div></pre></td></tr></table></figure></p><p>어디에 사용할지 생각도 해보구요. 메일과 문서에도 사용할 수 있습니다.<br>텍스트 리더인 macos용 say나 google tts와 연동해서 사용할 수 있습니다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#macos</span></div><div class="line">$ 프로그램명 | say</div><div class="line">$ say <span class="string">"안녕 say 야!"</span></div><div class="line">$ man say</div></pre></td></tr></table></figure></p><p>google tts가 궁금하면 <a href="https://github.com/glutanimate/simple-google-tts" target="_blank" rel="external">구글 tts</a><br>linux에서는 fastival이 있는데 한글이 안됨.</p><h3 id="코미디언-이름-출력하기"><a href="#코미디언-이름-출력하기" class="headerlink" title="코미디언 이름 출력하기"></a>코미디언 이름 출력하기</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : mycomedyname.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"유재석, 강호동, 박명수, 신동엽, 박미선"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">유재석, 강호동, 박명수, 신동엽, 박미선</div></pre></td></tr></table></figure><p>이건 나중에 배열 배울때 써먹을 겁니다. 우선 연습 삼아 만들어 놓으세요. 아래 색상도<br>vim에 snippet에 등록해서 사용해도 되지만 우리는 c언어 연습중…</p><h3 id="색상-이름-출력하기"><a href="#색상-이름-출력하기" class="headerlink" title="색상 이름 출력하기"></a>색상 이름 출력하기</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : mycolorname.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"빨강, 주황, 노랑, 초록, 파랑, 남, 보라"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">빨강, 주황, 노랑, 초록, 파랑, 남, 보라</div></pre></td></tr></table></figure><p>컴퓨터를 사용하는 이유는 복사와 붙여넣기가 가능하기 때문입니다.<br>많이 할수록 컴퓨터를 잘 쓰는 겁니다. </p><hr><p>참고로 cowsay, figlet, boxes, fortune 프로그램을 설치해서 사용 해보세요.<br>지금배운 출력문에 살을 조금만 붙이면 만들 수 있습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Centos</span></div><div class="line"><span class="variable">$sudo</span> yum install cowsay</div><div class="line"><span class="variable">$sudo</span> yum install figlet</div><div class="line"><span class="variable">$sudo</span> yum install boxes</div><div class="line"><span class="variable">$sudo</span> yum install fortune</div><div class="line"></div><div class="line"><span class="comment"># macos</span></div><div class="line"><span class="variable">$brew</span> install cowsay</div><div class="line"><span class="variable">$brew</span> install figlet</div><div class="line"><span class="variable">$brew</span> install boxes</div><div class="line"><span class="variable">$brew</span> install forturne</div><div class="line"></div><div class="line"><span class="comment">#ubuntu</span></div><div class="line"><span class="variable">$sudo</span> apt-get install cowsay</div><div class="line"><span class="variable">$sudo</span> apt-get install figlet</div><div class="line"><span class="variable">$sudo</span> apt-get install boxes</div><div class="line"><span class="variable">$sudo</span> apt-get install fortune</div></pre></td></tr></table></figure><p>텍스트 파일을 하나 만들어서 hello world 저장하고, 크기를 확인해 보세요.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"hello world"</span> &gt; abc.txt</div><div class="line">$ ls -al abc.txt</div></pre></td></tr></table></figure></p><p>그리고 putchar(), puts(), printf()로 hello world를 출력하는 프로그램을 각각 만들어서 파일의 크기를 비교해 보세요.</p><blockquote><ul><li>텍스트 파일보다 실행파일이 크기가 큰 이유는 뭘까요. 또 컴파일 된 실행파일의 크기가 같은 이유는 뭘까요. 이유를 인터넷 검색해 보세요. </li><li>실행파일은 기본 출력 명령을 포함하고 있고 똑같은 hello world 11자+ 줄바꿈(1자) 총12자를 출력합니다. </li><li>영문1글자는 1바이트 총12자 12바이트 </li><li>또 100번씩 출력하게 만들어서 크기를 비교해 보세요. </li><li>복사 붙여 넣기 신공을 사용해서 200번 출력하게 만드세요. </li><li>실행파일은 기본 출력 버퍼 사이즈를 가집니다. 실행 파일내 출력버퍼가 다차면 일정 크기만큼 자동으로 버퍼를 확장합니다.</li><li>출력문을 여러번 사용해도 실행파일의 크기가 갑자기 커지지는 않는다는 것을 확인 했습니다. 그러나 프로그램의 규모가 크다면 메뉴나, 설명등의 출력은 data파일에 저장한후 불러오는 구조로 많이 만듭니다. </li><li>64비트운영체제는 4메가, 32비트는 2메가, 16비트는 1메가바이트,  처리 비트가 클수록 낭비되는 부분도 커집니다. </li><li>임베디드 개발이 아닌 이상은 모두 무시하고 printf() 쓰세요. 컴퓨터 성능과 자원은 남아 돕니다. </li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/SSu822Lgta8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="c" scheme="http://korcow.github.io/tags/c/"/>
    
      <category term="printf" scheme="http://korcow.github.io/tags/printf/"/>
    
      <category term="컴파일" scheme="http://korcow.github.io/tags/%EC%BB%B4%ED%8C%8C%EC%9D%BC/"/>
    
      <category term="이스케이프문자" scheme="http://korcow.github.io/tags/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84%EB%AC%B8%EC%9E%90/"/>
    
      <category term="puts" scheme="http://korcow.github.io/tags/puts/"/>
    
      <category term="putchar" scheme="http://korcow.github.io/tags/putchar/"/>
    
  </entry>
  
  <entry>
    <title>표준라이브러리</title>
    <link href="http://korcow.github.io/2017/11/20/c-%ED%91%9C%EC%A4%80%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/"/>
    <id>http://korcow.github.io/2017/11/20/c-표준라이브러리/</id>
    <published>2017-11-20T05:10:58.977Z</published>
    <updated>2017-11-20T05:10:58.977Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>표준라이브러리는 위키를 참조 하세요.<br>한글 번역이 읽을만 합니다.<br><a href="https://en.wikipedia.org/wiki/C_standard_library" target="_blank" rel="external">위키백과</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;br&gt;표준라이브러리는 위키를 참조 하세요.&lt;br&gt;한글 번역이 읽을만 합니다.&lt;br&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C_standard_library&quot; target=&quot;_blank&quot; rel=&quot;externa
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="표준라이브러리" scheme="http://korcow.github.io/tags/%ED%91%9C%EC%A4%80%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>배열과 포인터</title>
    <link href="http://korcow.github.io/2017/11/20/c-%EB%B0%B0%EC%97%B4%EA%B3%BC%ED%8F%AC%EC%9D%B8%ED%84%B0/"/>
    <id>http://korcow.github.io/2017/11/20/c-배열과포인터/</id>
    <published>2017-11-20T04:42:43.224Z</published>
    <updated>2017-11-20T04:42:43.224Z</updated>
    
    <content type="html"><![CDATA[<h3 id="배열과-포인터"><a href="#배열과-포인터" class="headerlink" title="배열과 포인터"></a>배열과 포인터</h3><p>배열은 변수를 편하게 사용하기 위해 만들어 졌습니다.<br>다시말해 값을 쉽게 저장하고, 수정하고, 읽어 오기 위해 만들어 진겁니다.<br>배열을 이용해 자료 구조를 만들고, 파일을 읽어서 배열에 저장하고, 다시 배열을 파일로 저장하는 것이 프로그래밍의 핵심입니다.<br>배열은 각각의 요소에 순번을 주어 인덱스라고 부릅니다. 인덱스는 0부터 시작합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iKor0 = <span class="number">85</span>;</div><div class="line">    <span class="keyword">int</span> iKor1 = <span class="number">90</span>;</div><div class="line">    <span class="keyword">int</span> iKor2 = <span class="number">80</span>;</div><div class="line">    <span class="keyword">int</span> iKor3 = <span class="number">70</span>;</div><div class="line">    <span class="keyword">int</span> iKor4 = <span class="number">95</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iKor0 = %d\n"</span>, iKor0);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iKor1 = %d\n"</span>, iKor1);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iKor2 = %d\n"</span>, iKor2);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iKor3 = %d\n"</span>, iKor3);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iKor4 = %d\n"</span>, iKor4);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위에서 5명의 국어 점수를 저장하기 위해 변수를 5개를 만들었습니다. 변수의 이름이 틀리니 출력하려면 위와 같이 printf문을 5번을 사용해야 합니다. 변수명 뒤를 변수로 만들어 for 문으로 돌리면 되겠다 생각한 사람도 있을 겁니다. 하지만 그렇게 사용할 수 없습니다. 동적으로 변수명을 사용 하려고 배열을 만든겁니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iKor[<span class="number">5</span>] = &#123;<span class="number">95</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">75</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iKor[0] = %d\n"</span>, iKor[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iKor[1] = %d\n"</span>, iKor[<span class="number">1</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iKor[2] = %d\n"</span>, iKor[<span class="number">2</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iKor[3] = %d\n"</span>, iKor[<span class="number">3</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iKor[4] = %d\n"</span>, iKor[<span class="number">4</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>for문을 사용해 볼까요?<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iKor[<span class="number">5</span>] = &#123;<span class="number">95</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">75</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"iKor[%d] = %d\n"</span>, i, iKor[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>위처럼 반복문을 사용하면 쉽게 배열을 출력할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int 4바이트 최대 표시 가능한 수 약 ± 21억</div><div class="line">100번지</div><div class="line">  0123</div><div class="line"> |----|</div><div class="line">2,147,483,647</div></pre></td></tr></table></figure><p>정수형 배열은 4바이트씩 저장됩니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iKor[<span class="number">5</span>] = &#123;<span class="number">95</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">75</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">        iKor[i] = iKor[i] + <span class="number">10</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"iKor[%d] = %d\n"</span>, i, iKor[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>또한 값을 쉽게 변경 할 수도 있습니다.</p><h3 id="2차원-배열"><a href="#2차원-배열" class="headerlink" title="2차원 배열"></a>2차원 배열</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iNo[<span class="number">5</span>]   = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line">    <span class="keyword">int</span> iKor[<span class="number">5</span>]  = &#123;<span class="number">95</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">75</span>&#125;;</div><div class="line">    <span class="keyword">int</span> iEng[<span class="number">5</span>]  = &#123;<span class="number">95</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">75</span>&#125;;</div><div class="line">    <span class="keyword">int</span> iMath[<span class="number">5</span>] = &#123;<span class="number">95</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">75</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"   &gt;&gt;&gt; 성적표 &lt;&lt;&lt;"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"===================="</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\t%d\t%d\t%d\t\n"</span>, iNo[i], iKor[i], iEng[i], iMath[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위와 같이 1차원 배열 4개를 이용해 성적을 저장하고, 출력할 수 있습니다.<br>이것을 2차원 배열로 저장 할 수 있습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iScore[<span class="number">4</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">                    ,&#123;<span class="number">95</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">85</span>&#125;</div><div class="line">                    ,&#123;<span class="number">75</span>, <span class="number">85</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">95</span>&#125;</div><div class="line">                    ,&#123;<span class="number">90</span>, <span class="number">90</span>, <span class="number">70</span>, <span class="number">85</span>, <span class="number">95</span>&#125;&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"   &gt;&gt;&gt; 성적표 &lt;&lt;&lt;"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"===================="</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; i; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t%d\t%d\t%d\t\n"</span>, iNo[i][j], iKor[i][j], iEng[i][j], iMath[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h3><p>c언어에서는 문자열 자료는 없습니다.<br>배열과 포인터를 이용해서 문자열처럼 사용합니다.</p><p>char 자료형은 문자 1자를 저장할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">char 1바이트 영어1문자 한글은 3바이트가 있어야 한글자 표시 가능.</div><div class="line">100번지</div><div class="line">  0123456789AB</div><div class="line">  |-----------|</div><div class="line">  HELLO WORLD␀</div></pre></td></tr></table></figure><p>char 자료형을 배열로 선언 한다면 문자열을 담을 수 있습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> arrStr[<span class="number">12</span>] = <span class="string">"Hello world"</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arrStr);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>배열의 크기를 지정할 때는 마지막에 종료문자<code>\0</code>가 항상 포함되기 때문 사용할 크기 +1을 해주어야 합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> arrStr[] = <span class="string">"Hello World"</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arrStr);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위와 같이 배열의 크기를 지정하지 않고 초기화 하면 자동으로 배열의 크기가 지정됩니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> *pChar = <span class="string">"Hello World"</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, pChar);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>아직 배우지 않았지만 포인터를 이용할 수도 있습니다. 포인터가 더 편합니다.</p><h3 id="배열에-문자열-바꾸기"><a href="#배열에-문자열-바꾸기" class="headerlink" title="배열에 문자열 바꾸기"></a>배열에 문자열 바꾸기</h3><p>위에서 문자배열을 선언과 동시에 초기화를 해주었습니다.<br>그럼 배열에 들어있는 값을 바꾸려면 어떻게 해야 할까요.<br>당연히 문자열을 바꾸는 strcpy()가 있습니다. 하지만 for 문으로 문자 하나씩 바꾸어 보겠습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> sChar[] = <span class="string">"Hello World"</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sChar);</div><div class="line">    sChar[<span class="number">0</span>] = <span class="string">'H'</span>;</div><div class="line">    sChar[<span class="number">1</span>] = <span class="string">'i'</span>;</div><div class="line">    sChar[<span class="number">2</span>] = <span class="string">' '</span>;</div><div class="line">    sChar[<span class="number">3</span>] = <span class="string">'H'</span>;</div><div class="line">    sChar[<span class="number">4</span>] = <span class="string">'e'</span>;</div><div class="line">    sChar[<span class="number">5</span>] = <span class="string">'l'</span>;</div><div class="line">    sChar[<span class="number">6</span>] = <span class="string">'l'</span>;</div><div class="line">    sChar[<span class="number">7</span>] = <span class="string">'o'</span>;</div><div class="line">    sChar[<span class="number">8</span>] = <span class="string">' '</span>;</div><div class="line">    sChar[<span class="number">9</span>] = <span class="string">' '</span>;</div><div class="line">    sChar[<span class="number">10</span>] = <span class="string">' '</span>;</div><div class="line">    sChar[<span class="number">11</span>] = <span class="string">'\0'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> sChar[] = <span class="string">"Hello World"</span>;</div><div class="line">    <span class="keyword">char</span> sTemp[] = <span class="string">"Hi Hello   "</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sChar);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(sChar); i++)&#123;</div><div class="line">        <span class="keyword">if</span> (i &lt; <span class="keyword">sizeof</span>(sTemp)) sChar[i] = sTemp[i];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="keyword">sizeof</span>(sCahr) sCahr[i] = <span class="string">'\0'</span>;</div><div class="line">        <span class="keyword">else</span> schar[i] = <span class="string">' '</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위와 같이 만들 수 도 있습니다. 주의 해야 할것은 문자열의 크기가 서로 같아야 합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; // strcpy()</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> sChar[] = <span class="string">"Hello World"</span>;</div><div class="line">    <span class="keyword">char</span> sTemp[] = <span class="string">"Hi Hello   "</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sChar);</div><div class="line">    <span class="built_in">strcpy</span>(sChar, sTemp);</div><div class="line">    <span class="built_in">strcpy</span>(sChar, <span class="string">"wow copy string"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위와 같이 간편하게 문자열 내장함수strcpy()를 사용 할 수 있습니다.</p><h3 id="배열에-여러개의-문자열-저장하기"><a href="#배열에-여러개의-문자열-저장하기" class="headerlink" title="배열에 여러개의 문자열 저장하기"></a>배열에 여러개의 문자열 저장하기</h3><p>1차원 배열로는 1개의 문자열만 저장 했습니다.<br>2차원 배열을 사용하면 여러개의 문자열을 저장 할 수 있습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> sNames[<span class="number">10</span>][<span class="number">20</span>] = &#123;</div><div class="line">                            &#123;<span class="string">"hong gil dong"</span>&#125;,&#123;<span class="string">"sung chun hyang"</span>&#125;,</div><div class="line">                          &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[<span class="number">1</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[<span class="number">2</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[<span class="number">3</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[<span class="number">4</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[<span class="number">5</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[<span class="number">6</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[<span class="number">7</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[<span class="number">8</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[<span class="number">9</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 예제는 2차원 배열로 문자열을 출력하는 프로그램입니다.<br>2차원 배열은 배열 요소를 <code>[행][열]</code>로 표시 합니다. 보기 좋게 할려구 초기화 할때 줄바꿈을 했습니다. 원래는<code>{ { }, { } }</code> 이렇게 구성 됩니다. 행을 콤마로 구분합니다.<br>위 예제는 <code>[10][20]</code> 로 선언 했으니 10행 20열이 되겠네요.<br>눈치 챘겠지만 행은 문자열 개수가 되고, 열은 문자열의 길이가 됩니다.<br>문자열 끝에 <code>\0</code>이 들어 가니까 19자 문자열, 10개가 저장되는 배열을 만든겁니다.<br>출력할 때는 행만 표시 하고 열은 생략 했습니다.<br>포인터를 설명해야 하는데 아직 안배웠으니 생략 하겠습니다.<br>그냥 행의 인덱스만 주면 모든 열을 출력해 주는구나 하고 생각하세요.<br>포인터란 녀석이 주소만 주면 <code>\0</code>가 나올때 까지 모두 가져오는 특성을 가지고 있답니다.<br>포인터를 사용하기 쉽게 배열로 만든겁니다.</p><p>이제 위 프로그램을 수정할 겁니다.</p><ol><li>먼저 printf문이 많이 거슬립니다. for문으로 바꿀겁니다.</li><li>배열을 입력하기가 귀찮아서 2개만 썼는데요. 문자열을 입력받아서 배열에 저장하게 할 겁니다. </li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> sNames[<span class="number">10</span>][<span class="number">20</span>] = &#123;</div><div class="line">                            &#123;<span class="string">"hong gil dong"</span>&#125;,&#123;<span class="string">"sung chun hyang"</span>&#125;,</div><div class="line">                          &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sNames[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>배열에 문자열을 입력하기 위해서는 조금 생각해 봐야 할 것이 있습니다.<br>문자열 배열이 하나만 있다면 문제가 되지 않겠지만 우리는 10개의 문자열 배열이 있습니다.<br>자동으로 index을 증가 시킬 수 있지만 10개를 모두 입력해야 하는 불편함이 생깁니다.<br>그래서 먼저 문자열을 확인 할 겁니다. 10개의 리스트가 나오겠죠. 입력이 안되어 있다면 공백으로 나올겁니다.<br>사용자에게 몇번 인덱스에 입력할 건지, 인덱스값을 입력하게 할 겁니다. 그리고 해당 인덱스 하나만 등록되게 할 겁니다.<br>여러개를 입력해야 한다면 위 프로그램을 다시 시행 하면 되겠죠.<br>정리를 해보겠습니다.</p><ol><li>메뉴를 보여 준다.<ul><li>문자열 보기, 문자열 등록</li></ul></li><li>문자열 보기를 선택하면 문자열 리스트를 인덱스번호와 함께 보여준다.</li><li>문자열 등록을 선택하면 2. 를 실행후 인덱스 번호를 물어보고, 문자열을 입력할 수 있게 한다.</li><li>입력된 인덱스 번호와 문자열을 저장한다.<br>각각 함수로 만들어서 불러다 사용할 겁니다. 프로그램이 조금 길어 질겁니다. 어렵게 생각하지 마세요. 메인 함수만 먼저 보세요. 그리고 각각의 함수를 보면 됩니다. 그리고 지금 만드는 함수는 기초 함수 입니다. 나만의 함수 모음으로 가지고 있으면 나중에 다시 만들 필요없이 호출해 사용하게 됩니다. </li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // exit(0), system()</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; // strcpy()</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrintMenu</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyStringList</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyStringInsert</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyClearStdin</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> sNames[<span class="number">10</span>][<span class="number">20</span>] = &#123;</div><div class="line">                        &#123;<span class="string">"hong gil dong"</span>&#125;,</div><div class="line">                        &#123;<span class="string">"sung chun hyang"</span>&#125;,</div><div class="line">                      &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    system(<span class="string">"clear"</span>);</div><div class="line">    <span class="keyword">int</span> iSelectMenu = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span> == <span class="number">1</span>)&#123;</div><div class="line"></div><div class="line">        MyPrintMenu();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;iSelectMenu);</div><div class="line"></div><div class="line">        MyClearStdin();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (iSelectMenu == <span class="number">1</span>)&#123;</div><div class="line">            MyStringList();</div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (iSelectMenu == <span class="number">2</span>)&#123;</div><div class="line">            MyStringInsert();</div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (iSelectMenu == <span class="number">3</span>)&#123;</div><div class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"잘못 입력했습니다."</span> );</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"아무키나 누르세요..."</span> );</div><div class="line">            MyClearStdin();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrintMenu</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,   <span class="string">"     &gt;&gt;&gt; 메뉴&lt;&lt;&lt;"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,   <span class="string">"====================="</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,   <span class="string">"1. 문자열 리스트 보기"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,   <span class="string">"2. 문자열 등록하기"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n\n"</span>, <span class="string">"3. 프로그램 종료"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,     <span class="string">"메뉴를 선택하세요 : "</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyStringList</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"&gt;&gt;&gt; 문자열 리스트 보기 &lt;&lt;&lt;"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"=========================="</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"인덱스번호[%d] : %s\n"</span>,i, sNames[i]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"아무키나 누르세요..."</span> );</div><div class="line">    MyClearStdin();</div><div class="line">    system(<span class="string">"clear"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyStringInsert</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iIndexNo = <span class="number">0</span>; <span class="comment">// 입력받은 인덱스 저장</span></div><div class="line">    <span class="keyword">char</span> sTemp[<span class="number">20</span>] = &#123;<span class="string">' '</span>,&#125;; <span class="comment">// 입력받은 문자열 저장</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"&gt;&gt;&gt; 문자열 등록하기 &lt;&lt;&lt;"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"======================="</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"인덱스번호 %d : %s\n"</span>,i, sNames[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"수정할 인덱스 번호는 : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;iIndexNo); <span class="comment">// 인덱스 입력받음</span></div><div class="line">    MyClearStdin();</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"문자열을 입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%[^\n]s"</span>, sTemp); <span class="comment">// 문자열 입력받음</span></div><div class="line">    MyClearStdin();</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(sNames[iIndexNo], sTemp); <span class="comment">// 입력받은 문자열을 복사</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"아무키나 누르세요..."</span> );</div><div class="line">    MyClearStdin();</div><div class="line">    system(<span class="string">"clear"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyClearStdin</span><span class="params">()</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> ch;</div><div class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF &amp;&amp; ch != <span class="string">'\n'</span>) &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>void MyStringInsert(void)</code> 함수에서 문자열 복사 함수 strcpy()를 사용했습니다.</p><p>갑자기 프로그램이 길어 졌죠?<br>프로그램을 읽는 요령은 전부 보는 것이 아니라 main함수만 먼저 보는 겁니다.<br>대문자로 시작되는 함수는 사용자 함수 입니다. 읽기 쉽게 항상 그옆에 주석을 달아 줍니다.</p><p>문자열 배열을 메인함수 밖으로 옮긴것을 확인 하세요. 다음에는 main함수 안에 넣고 수정을 할 겁니다.<br>밖으로 뺀 이유는 다른 함수에서도 접근이 가능하도록 메인함수 밖으로 뺀겁니다.<br>처음에 사용할 함수를 선언 했습니다.<br>메인 함수에서는 우리가 계획 했던 대로 메뉴를 보여주고, if문으로 각각의 처리 함수를 호출하도록 했습니다.<br>1번을 누르면 문자열을 보여주고, 2번을 누르면 입력할 수 있게 했습니다.<br>마지막엔 각각의 함수 본체입니다.</p><h3 id="변수의-범위"><a href="#변수의-범위" class="headerlink" title="변수의 범위"></a>변수의 범위</h3><p>변수에는 글로벌변수, 로컬변수, 포인터변수가 있습니다.<br>로컬변수: 지역변수라고도 합니다. 함수 내에서만 유효하고 함수가 종료되면 없어 집니다.<br>글로별 변수: 프로그램 전체 어디서나 사용이 가능합니다. 프로그램이 종료되면 없어집니다.<br>포인터 변수: 메모리 주소를 담을 수 있는 변수이며 메모리의 주소가 유효 하다면 범위 제한을 받지 않습니다. 포인터 변수는 사용 범위 제한을 받지 않지만 함수가 종료되면 사라집니다.</p><h3 id="포인터"><a href="#포인터" class="headerlink" title="포인터"></a>포인터</h3><p>포인터는 포인터 변수라고 합니다. 부르기 쉽게 포인터라고 줄여서 말합니다. 변수명 앞에 <code>*</code>을 붙여주면 포인터 변수가 됩니다.<br>포인터 변수는 메모리의 주소를 담는 변수 입니다.<br>포인터 변수는 글로벌 변수와 로컬변수의 장점을 가지고 있습니다.<br>어디서든 사용할 수 있고 함수가 종료되면 없어 집니다. 이런 장점 때문에 포인터 변수를 많이 사용합니다.</p><p>함수는 리턴값을 하나만 전달 할 수 있습니다. 여러개를 전달 할 수 없습니다.<br>그래서 변수를 글로벌 변수로 선언해서 함수 안에서 처리를 합니다.<br>글로벌 변수를 쓰지 못할 상황이라면 포인터를 사용할 수 있습니다.<br>함수의 인자로 포인터 변수를 넘겨 줄수 있고, 함수의 리턴값으로 포인터 변수를 사용할 수 있기 때문에 함수안과 밖에서 자유롭게 주소값이 가리키는 상대주소의 데이터를 사용하고 수정할 수 있습니다. c언어에만 있는 특별한 기능입니다. </p><blockquote><p>글로벌 변수는 작은 단위의 프로그램에서는 문제가 없지만 규모가 큰 프로그램에서는 사용을 자제하는 편입니다.<br>왜냐하면 함수안에 있는 변수는 함수가 종료되면 바로 없어 지지만 글로벌 변수는 프로그램을 종료 할 때까지 남아 있기 때문이고, 수백명의 프로그래머가 프로그램을 작성 하다보면 변경되서는 안될 값이 변경 될수 있기 때문입니다.<br>예를 들어서 물건의 값을 계산하는 프로그램을 만든다 가정해 보죠.<br>새우깡 100 원 수량 2개 합계금액 200원<br>합계금액을 저장해야 하는데, 합계금액이 글로벌 변수 입니다. 혼자서 프로그램을 사용한다면 문제가 없겠지만 편의 점에 있는 포스 프로그램이라고 생각해 보세요. 전국에서 동시에 합계금액을 공유해서 쓴다면 … 어떤 값이 들어 갈지 아무도 모르는 거죠. 그래서 환경변수 이외에는 글로벌 변수를 잘 쓰지 않습니다. 쓰지 말라는 것이 아니라 알고 쓰라는 겁니다.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> *pSum)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iNum = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> iNum2 = <span class="number">20</span>;</div><div class="line">    <span class="keyword">int</span> iSum = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// pSum을 선언 iSum의 주소를 pSum에 저장</span></div><div class="line">    <span class="keyword">int</span> *pSum = &amp;iSum;  <span class="comment">// 1: 선언과 정의 </span></div><div class="line"><span class="comment">// iSum 주소를 출력</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"iSum 주소 : %p \n"</span>, &amp;iSum);     </div><div class="line"><span class="comment">// :2 pSum이 가리키는 주소를 출력 </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"pSum이 가리키는 주소 : %p \n"</span>, pSum);   </div><div class="line"><span class="comment">// pSum 주소를 출력</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"pSum의 주소: %p \n"</span>, &amp;pSum); </div><div class="line"><span class="comment">// :3 pSum이 가리키는 주소의 값을 출력 </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"pSum이 가리키는 주소에 들어있는 값 : %d \n"</span>, *pSum);    </div><div class="line"></div><div class="line">    iSum = iNum + iNum2;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"프로그램에서 iSum 변수에 값을 저장 : %d\n"</span>, iSum);</div><div class="line"></div><div class="line">    myAdd(pSum); <span class="comment">// 2: 주소를 인자로 전달</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"함수에서 글로벌변수를 지정하지 않고 주소를 사용해 값을 저장 : %d\n"</span>, iSum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(<span class="keyword">int</span> *pointerVariable)</span></span>&#123; <span class="comment">// 인자를 주소로 받음.</span></div><div class="line">    <span class="keyword">int</span> iNum = <span class="number">40</span>;</div><div class="line">    <span class="keyword">int</span> iNum2 = <span class="number">50</span>;</div><div class="line">    *pointerVariable = iNum + iNum2; <span class="comment">//:4 주소에 값을 저장 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">iSum 주소 : 0x7ffeec95c774</div><div class="line">pSum이 가리키는 주소 : 0x7ffeec95c774</div><div class="line">pSum의 주소: 0x7ffeec95c768</div><div class="line">pSum이 가리키는 주소에 들어있는 값 : 0</div><div class="line">프로그램에서 iSum 변수에 값을 저장 : 30</div><div class="line">함수에서 글로벌변수를 지정하지 않고 주소를 사용해 값을 저장 : 90</div></pre></td></tr></table></figure><p>복잡하게 생각하지 마세요.</p><ul><li>포인터변수를 선언 할때는 변수명 앞에 <code>*</code>붙여서 선언 합니다.<br>  포인터 변수는 주소를 저장하는 변수 이기 때문에 iSum변수의 주소를 대입했습니다. 대입할 때는 주소를 값을 계산해주는 <code>&amp;</code>를 변수명 앞에 붙였습니다. 이렇게 하면 주소가 포인터변수에 저장됩니다.</li><li>*pSum 변수는 이제 어디서든지 사용할 수 있습니다.</li><li>pSum이라고 사용하면 주소값을 사용하고</li><li>*pointerVariable이라고 사용하면 주소가 가리키는 주소의 값을 사용합니다.</li><li>실제 같은 말이 반복되기 때문에 헛갈립니다. <ul><li>:1 선언하고</li><li>:2 주소값을 사용하고</li><li>:3 주소가 가리키는 값을 사용합니다.</li><li>:4 주소값만으로 어디서든지 주소가 가리키는 값을 사용가능.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">long 8바이트 최대 표시 가능한 수 약 ± 9백2십경</div><div class="line">100번지</div><div class="line">  01234567</div><div class="line"> |--------|</div><div class="line">9,223,372,036,854,775,807</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;배열과-포인터&quot;&gt;&lt;a href=&quot;#배열과-포인터&quot; class=&quot;headerlink&quot; title=&quot;배열과 포인터&quot;&gt;&lt;/a&gt;배열과 포인터&lt;/h3&gt;&lt;p&gt;배열은 변수를 편하게 사용하기 위해 만들어 졌습니다.&lt;br&gt;다시말해 값을 쉽게 저장하고, 
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="배열" scheme="http://korcow.github.io/tags/%EB%B0%B0%EC%97%B4/"/>
    
      <category term="포인터" scheme="http://korcow.github.io/tags/%ED%8F%AC%EC%9D%B8%ED%84%B0/"/>
    
      <category term="문자열" scheme="http://korcow.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>목차</title>
    <link href="http://korcow.github.io/2017/11/20/%EC%A0%84%EA%B8%B0%EC%A0%84%EC%9E%90-%EB%AA%A9%EC%B0%A8/"/>
    <id>http://korcow.github.io/2017/11/20/전기전자-목차/</id>
    <published>2017-11-19T23:26:41.946Z</published>
    <updated>2017-11-19T23:26:41.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h3><p>양과 단위<br>저압, 전류, 저항<br>옴의 법칙, 에너지와 전력<br>직렬회로<br>병렬회로<br>직렬-병렬 회로<br>교류전류와 전압<br>캐피시터<br>RC회로<br>인턱터<br>RL 회로<br>RLC 회로와 공진<br>변압기<br>다이오드<br>트랜지스터<br>증폭기</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h3&gt;&lt;p&gt;양과 단위&lt;br&gt;저압, 전류, 저항&lt;br&gt;옴의 법칙, 에너지와 전력&lt;br&gt;직렬회로&lt;br&gt;병렬회로&lt;br&gt;직렬-병렬 회로&lt;br&gt;교
      
    
    </summary>
    
      <category term="전기전자" scheme="http://korcow.github.io/categories/%EC%A0%84%EA%B8%B0%EC%A0%84%EC%9E%90/"/>
    
    
      <category term="목차" scheme="http://korcow.github.io/tags/%EB%AA%A9%EC%B0%A8/"/>
    
  </entry>
  
  <entry>
    <title>키보드로 입력받기</title>
    <link href="http://korcow.github.io/2017/11/19/c-%ED%82%A4%EB%B3%B4%EB%93%9C%EB%A1%9C-%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/11/19/c-키보드로-입력받기/</id>
    <published>2017-11-19T14:07:23.944Z</published>
    <updated>2017-11-19T14:07:23.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="getchar"><a href="#getchar" class="headerlink" title="getchar()"></a>getchar()</h3><p>1문자를 입력 받을 수 있습니다. 엔터를 누를때까지 입력을 받습니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 006-getchar-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> chAlpha = getchar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, chAlpha);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>위 프로그램은 1문자를 입력받아서 출력하는 프로그램입니다.<br>1문자만 입력받는 다면 문제가 없습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 006-getchar-02.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> chAlpha1 = getchar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, chAlpha1);</div><div class="line">    <span class="keyword">char</span> chAlpha2 = getchar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, chAlpha2);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 프로그램은 2문자를 입력을 받을 겁니다. 의도는 1번째 문자 입력받고 출력 2번째 문자 입력받고 출력 할 겁니다.<br><figure class="highlight plain"><figcaption><span>결과</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">a</div></pre></td></tr></table></figure></p><p>의도와 다르게 a입력하고 엔터을 쳤는데 그냥 끝나 버립니다.<br>이유는 엔터도 문자로 인식 해버렸기 때문입니다.<br>getchar() 함수는 i/o 버퍼라는 것을 사용합니다.<br>키보드로 문자를 입력 받을때 i/o버퍼에 문자를 담습니다.<br>getchar()함수는 제일 먼저 i/o 버퍼에 문자가 있는지 확인하고 문자가 없으면 입력을 대기하고 문자가 있으면 버퍼에서 문자를 가져옵니다.<br>a만 나온 이유는 키보드를 입력했을때 a와 엔터가 버퍼에 있었기 때문에 a 한문자 엔터 한문자를 가져와 출력했기 때문에 a만 입력받아 출력한것 처럼 보인 겁니다. 다시 확인 해보면 2줄이 개행 된것을 확인 할 수 있습니다.<br>위와 같이 1문자를 입력받고 사용하고, 또 한문자를 입력 받고자 하면 사용후 한번더 getchar()를 하면 엔터를 꺼내옵니다. 사용하지 않으면 그냥 없어져 버립니다.<br>windows에서 fflush(stdin)을 사용하는데 비표준입니다. fflush(stdout)은 표준.<br>입력버퍼를 지워야 할 일이 있다면<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_stdin</span><span class="params">()</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> ch;</div><div class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF &amp;&amp; ch != <span class="string">'\n'</span>) &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>위와 같이 함수로 만들어 호출하세요.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 006-getchar-03.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> chAlpha1 = getchar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, chAlpha1);</div><div class="line">    getchar();<span class="comment">// i/o버퍼에서 엔터를 꺼내옴.</span></div><div class="line">    <span class="keyword">char</span> chAlpha2 = getchar();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, chAlpha2);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 파일명 : 006-getchar-04.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_stdin</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> chStr[<span class="number">10</span>] = &#123;<span class="string">' '</span>,&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        chStr[i] = getchar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clear_stdin();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, chStr[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        chStr[i] = getchar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clear_stdin();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, chStr[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_stdin</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> ch;</div><div class="line"><span class="keyword">while</span> ((ch = getchar()) != EOF &amp;&amp; ch != <span class="string">'\n'</span>) &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h3><p>문자열을 입력받습니다. 보안상 사용 금지.<br>overflow가 발행할 수 있음.<br>warning: this program uses gets(), which is unsafe.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-gets-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> cTemp[<span class="number">5</span>];</div><div class="line">    gets(cTemp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, cTemp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h3><p>문자열을 입력 받습니다. gets함수의 overflow 문제를 보완</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-fgets-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> cTemp[<span class="number">5</span>];</div><div class="line">    fgets(cTemp, <span class="keyword">sizeof</span>(cTemp), <span class="built_in">stdin</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, cTemp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h3><p>형식에 따라 문자열을 입력받습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-scanf-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> sName[<span class="number">10</span>];</div><div class="line">    <span class="keyword">int</span> iNum;</div><div class="line">    <span class="keyword">double</span> dHeight;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"나이를 입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;iNum); <span class="comment">// 정수를 입력받음</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"이름을 입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sName);  <span class="comment">// 문자열을 입력받음</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"키를 입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;dHeight);  <span class="comment">// 실수를 입력받음</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"나이는 %d 이고 이름은 %s 입니다.\n"</span>, iNum, sName);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"키는 %.1f\n"</span>, dHeight);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-scanf-02.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> sTemp[<span class="number">1000</span>];</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"문장을  입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sTemp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"입력한 문장은:\n%s\n"</span>, sTemp);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"문장을  입력하세요. : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sTemp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"입력한 문장은:\n%s\n"</span>, sTemp);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>scanf()도 getchar()와 같이 버퍼에서 데이터를 읽어 오기 때문에 getchar()와 동일한 문제가 발생 되며 getchar()와 동일하게  버퍼 문제를 처리 할수 있습니다. 또한 <code>%[^\n]s</code> 포멧으로 공백으로 분리하지 않도록 할 수 도 있습니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-scanf-03.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iKor;</div><div class="line">    <span class="keyword">int</span> iEng;</div><div class="line">    <span class="keyword">int</span> iMath;</div><div class="line">    <span class="keyword">int</span> iSum;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"국어, 영어, 수학 점수를 순서대로 입력해 주세요. :"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;iKor, &amp;iEng, &amp;iMath);</div><div class="line"></div><div class="line">    iSum = iKor + iEng + iMath;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"국어: %d\n"</span>, iKor);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"영어: %d\n"</span>, iEng);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"수학: %d\n"</span>, iMath);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"총점: %d\n"</span>, iSum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>입력을 위와 같이 받게 되면 스페이스와 엔터가 입력 구분자가 됩니다.<br>구분된 값을 입력 받을 때는 명확하게 엔터로 입력받을수 있게 하는 것이 좋습니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-scanf-04.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> iKor;</div><div class="line">    <span class="keyword">int</span> iEng;</div><div class="line">    <span class="keyword">int</span> iMath;</div><div class="line">    <span class="keyword">int</span> iSum;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"국어 :"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;iKor);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"영어 :"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;iEng);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"수학 :"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;iMath);</div><div class="line"></div><div class="line">    iSum = iKor + iEng + iMath;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"==================\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"국어: %d\n"</span>, iKor);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"영어: %d\n"</span>, iEng);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"수학: %d\n"</span>, iMath);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"총점: %d\n"</span>, iSum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="getch-windows에만-있습니다"><a href="#getch-windows에만-있습니다" class="headerlink" title="getch() *windows에만 있습니다."></a>getch() *windows에만 있습니다.</h3><p>getchar()동일하게 1문자를 입력받지만 입력버퍼를 사용하지 않습니다. 엔터를 입력할때까지 입력받는 것이 아니라 키보드를 누르는 순간 처리를 합니다.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-getch-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> cTemp;</div><div class="line"></div><div class="line">    cTemp = getch();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, cTemp);</div><div class="line">    cTemp = getch();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, cTemp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>getchar()와 같은 버퍼문제가 발생하지 않는다.</p><h3 id="getche"><a href="#getche" class="headerlink" title="getche()"></a>getche()</h3><p><conio.h>에 들어 있습니다. windows에만 있는 함수 입니다.<br>Xnix는 만들어 사용해야 합니다.<br>문자를 입력받되 출력을 하지 않습니다.(비밀번호)</conio.h></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-getche-01.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> cTemp;</div><div class="line"></div><div class="line">    cTemp = getche();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, cTemp);</div><div class="line">    cTemp = getche();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, cTemp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 006-getche-02.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">char</span> sId[<span class="number">8</span>] = &#123;<span class="string">' '</span>,&#125;;</div><div class="line">    <span class="keyword">char</span> sPw[<span class="number">8</span>] = &#123;<span class="string">' '</span>,&#125;;</div><div class="line">    <span class="keyword">char</span> ch = <span class="string">' '</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"아이디 : "</span>);</div><div class="line">    <span class="keyword">while</span> ( (ch = getch()) !=<span class="string">'\n'</span>)&#123;</div><div class="line">        ch = getch()</div><div class="line">        sId[i] = ch;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"비밀번호 : "</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( (ch = getche()) !=<span class="string">'\n'</span>)&#123;</div><div class="line">        ch = getche()</div><div class="line">        sId[i] = ch;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sId);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sPw);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="getch-getche-만들기"><a href="#getch-getche-만들기" class="headerlink" title="getch, getche 만들기"></a>getch, getche 만들기</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;termios.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">old</span>, <span class="title">new</span>;</span></div><div class="line"> </div><div class="line"><span class="comment">/* Initialize new terminal i/o settings */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initTermios</span><span class="params">(<span class="keyword">int</span> echo)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  tcgetattr(<span class="number">0</span>, &amp;old); <span class="comment">//grab old terminal i/o settings</span></div><div class="line">  <span class="keyword">new</span> = old; <span class="comment">//make new settings same as old settings</span></div><div class="line">  <span class="keyword">new</span>.c_lflag &amp;= ~ICANON; <span class="comment">//disable buffered i/o</span></div><div class="line">  <span class="keyword">new</span>.c_lflag &amp;= echo ? ECHO : ~ECHO; <span class="comment">//set echo mode</span></div><div class="line">  tcsetattr(<span class="number">0</span>, TCSANOW, &amp;<span class="keyword">new</span>); <span class="comment">//apply terminal io settings</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/* Restore old terminal i/o settings */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetTermios</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  tcsetattr(<span class="number">0</span>, TCSANOW, &amp;old);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/* Read 1 character - echo defines echo mode */</span></div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">getch_</span><span class="params">(<span class="keyword">int</span> echo)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">char</span> ch;</div><div class="line">  initTermios(echo);</div><div class="line">  ch = getchar();</div><div class="line">  resetTermios();</div><div class="line">  <span class="keyword">return</span> ch;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment">Read 1 character without echo </span></div><div class="line"><span class="comment">getch() function definition.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">getch</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> getch_(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment">Read 1 character with echo </span></div><div class="line"><span class="comment">getche() function definition.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">getche</span><span class="params">(<span class="keyword">void</span>)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> getch_(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span> c;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"(getche example) Please enter a character: "</span>);</div><div class="line">  c = getche();</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nYou entered: %c\n"</span>, c);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"(getch example) Please enter a character: "</span>);</div><div class="line">  c = getch();</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nYou entered: %c\n"</span>, c);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="clrscr-for-GCC-Linux"><a href="#clrscr-for-GCC-Linux" class="headerlink" title="clrscr() for GCC Linux:"></a>clrscr() for GCC Linux:</h3><p>We can implement clrscr() by using clear command of the linux terminal, It is used to Clear Output Screen.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//clrscr() function definition</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clrscr</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    system(<span class="string">"clear"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Consider the example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="comment">//clrscr() function definition</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clrscr</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    system(<span class="string">"clear"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    clrscr();   <span class="comment">//clear output screen</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World!!!"</span>); <span class="comment">//print message</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="gotoxy-for-GCC-Linux"><a href="#gotoxy-for-GCC-Linux" class="headerlink" title="gotoxy() for GCC Linux:"></a>gotoxy() for GCC Linux:</h3><p>gotoxy() move the cursor at specified location in the output screen.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//gotoxy() function definition</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gotoxy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span>    </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c[%d;%df"</span>,<span class="number">0x1B</span>,y,x);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Consider the example:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="comment">//gotoxy() function definition</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gotoxy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span>    </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c[%d;%df"</span>,<span class="number">0x1B</span>,y,x);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">10</span>, y=<span class="number">20</span>;</div><div class="line">    gotoxy(x,y); <span class="comment">//move cursor position</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World!!!"</span>); <span class="comment">//print message</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;getchar&quot;&gt;&lt;a href=&quot;#getchar&quot; class=&quot;headerlink&quot; title=&quot;getchar()&quot;&gt;&lt;/a&gt;getchar()&lt;/h3&gt;&lt;p&gt;1문자를 입력 받을 수 있습니다. 엔터를 누를때까지 입력을 받습니다.&lt;br&gt;&lt;fig
      
    
    </summary>
    
      <category term="C언어기초" scheme="http://korcow.github.io/categories/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/"/>
    
    
      <category term="getchar" scheme="http://korcow.github.io/tags/getchar/"/>
    
      <category term="gets" scheme="http://korcow.github.io/tags/gets/"/>
    
      <category term="scanf" scheme="http://korcow.github.io/tags/scanf/"/>
    
      <category term="getch" scheme="http://korcow.github.io/tags/getch/"/>
    
  </entry>
  
  <entry>
    <title>계산하기</title>
    <link href="http://korcow.github.io/2017/11/18/python-%EA%B3%84%EC%82%B0%ED%95%98%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/11/18/python-계산하기/</id>
    <published>2017-11-18T04:11:50.063Z</published>
    <updated>2017-11-18T04:11:50.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="계산하기"><a href="#계산하기" class="headerlink" title="계산하기"></a>계산하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span> + <span class="number">2</span></div><div class="line"><span class="number">5</span> - <span class="number">2</span></div><div class="line"><span class="number">5</span> * <span class="number">2</span></div><div class="line"><span class="number">10</span> / <span class="number">2</span></div><div class="line"><span class="number">2</span> ** <span class="number">4</span></div><div class="line"><span class="number">10</span> % <span class="number">2</span></div><div class="line"><span class="number">10</span> // <span class="number">2</span></div></pre></td></tr></table></figure><ul><li>일반적으로 파이썬은 계산후 결과를 변수에 담지 않으면 바로 사라집니다.</li><li>print() 함수로 출력하지 않은 interpretor 화면에 보이는 결과는 메모리에 출력된 결과 입니다.</li><li>파이썬에서 <code>/</code>는 기본적으로 실수로 표기 됩니다.</li></ul><h3 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h3><table><thead><tr><th style="text-align:center">산술연산자</th><th>설 명</th><th style="text-align:center">비교연산자</th><th>설명</th></tr></thead><tbody><tr><td style="text-align:center"><code>+</code></td><td>덧셈</td><td style="text-align:center"><code>&gt;</code></td><td>크다</td></tr><tr><td style="text-align:center"><code>-</code></td><td>뺄셈</td><td style="text-align:center"><code>&lt;</code></td><td>작다</td></tr><tr><td style="text-align:center"><code>/</code></td><td>나눗셈</td><td style="text-align:center"><code>==</code></td><td>같다</td></tr><tr><td style="text-align:center"><code>*</code></td><td>곱셈</td><td style="text-align:center"><code>&gt;=</code></td><td>크거나같다</td></tr><tr><td style="text-align:center"><code>**</code></td><td>거듭제곱</td><td style="text-align:center"><code>&lt;=</code></td><td>작거나같다</td></tr><tr><td style="text-align:center"><code>%</code></td><td>나머지</td><td style="text-align:center"><code>!==</code></td><td>같지않다</td></tr><tr><td style="text-align:center"><code>//</code></td><td>몫</td><td style="text-align:center"><code>!</code></td><td>거짓</td></tr></tbody></table><h3 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h3><ul><li><p>정수형</p><ul><li>정수형은 기본적으로 8byte 크기를 갖습니다. 값이 크면 자동으로 크기를 키웁니다. 최대값의 크기를 생각하지 않고 사용해도 됩니다.<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">myInt = <span class="number">10</span></div><div class="line">type(myInt)</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.maxsize</div><div class="line">myInt = sys.maxsize + <span class="number">9223372036854775808</span></div><div class="line">myInt</div><div class="line"><span class="number">2</span>**<span class="number">128</span></div><div class="line"><span class="number">2</span>**<span class="number">256</span></div></pre></td></tr></table></figure></li></ul></li><li><p>실수형</p><ul><li><p>실수형도 정수형처럼 필요하다면 자동으로 크기를 키우기 때문에 자유롭게 사용하면 됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">myReal = <span class="number">0.3</span></div><div class="line">myReal = myReal + <span class="number">0.3</span> + <span class="number">0.3</span> + <span class="number">0.1</span></div><div class="line">myReal</div></pre></td></tr></table></figure></li></ul></li><li><p>문자열형</p><ul><li>문자열은 내부적으로 배열로 구성됩니다.</li><li><p>슬라이싱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">myString = <span class="string">"hello world"</span></div><div class="line">myString[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">myString[<span class="number">3</span>:<span class="number">7</span>]</div></pre></td></tr></table></figure></li></ul></li><li><p>list</p><ul><li>배열 []</li></ul></li><li>tuple<ul><li>튜플 () : 배열과 같지만 요소의 삭제, 수정이 불가능하다. 추가는 가능</li></ul></li><li>dictionary<ul><li>사전 {}</li></ul></li><li>set<ul><li>set([])</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;계산하기&quot;&gt;&lt;a href=&quot;#계산하기&quot; class=&quot;headerlink&quot; title=&quot;계산하기&quot;&gt;&lt;/a&gt;계산하기&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="python" scheme="http://korcow.github.io/categories/python/"/>
    
    
      <category term="계산하기" scheme="http://korcow.github.io/tags/%EA%B3%84%EC%82%B0%ED%95%98%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>실행하기</title>
    <link href="http://korcow.github.io/2017/11/18/python-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0/"/>
    <id>http://korcow.github.io/2017/11/18/python-실행하기/</id>
    <published>2017-11-18T01:41:08.427Z</published>
    <updated>2017-11-18T01:41:08.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="실행하기"><a href="#실행하기" class="headerlink" title="실행하기"></a>실행하기</h3><p>파이썬을 실행하는 방법은 2가지 가 있습니다.<br>터미널에서 python3 하면 python intepretor가 실행됩니다.<br><code>&gt;&gt;&gt;</code> 이렇게 프롬프트가 나오면 이곳에 명령어를 입력하면 됩니다.<br>모든 인터프리터는 이렇게 프롬프트가 나오고 명령을 입력하면 한줄씩 번역하고 실행하게 됩니다. REPL(Read Eval Print Loop) 이라고 부릅니다. bash shell은 <code>$</code>  이렇게 프롬프트가 나오는 것과 동일합니다.<br>xNix를 사용해 보지 않은 사람은 생소하고 불편할 겁니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 1 + 1</div><div class="line">2</div><div class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</div><div class="line">Hello World</div></pre></td></tr></table></figure><p>위와 같이 1 + 1을 입력하고 엔터를 치면 바로 결과를 보여 줍니다.<br><code>print(&quot;Hello World&quot;)</code> 라고 입력하고 엔터를 치면 Hello World를 출력해 줍니다.<br>또 한 가지 방법은 IDLE이라는 내장 IDE를 사용할 수 있습니다.<br>윈도우즈에서는 문제가 없지만 mac에서는 한글 입력이 안됩니다. Tcl/Tk를 다운받아 설치하면 문제 없이 사용할 수 있지만 그렇게 까지 하면서 쓸 필요 없습니다. idle은 속도도 느리고 불편합니다. 그냥 REPL(ipython)을 사용하거나 vim 에디터가 더 편합니다. 꼭 idle을 사용하겠다 하는 사람은 처음 나온 주의 url을 복사해 링크를 따라가면 설치 파일을 받을 수 있습니다. macos버젼에 맞는 ActiveTcl버전을 다운받아 설치 하면 됩니다. 다른 버전을 받으면 안됩니다.</p><h3 id="종료하기"><a href="#종료하기" class="headerlink" title="종료하기"></a>종료하기</h3><p>종료는 Ctrl + D 키를 누르면 REPL을 종료합니다.</p><h3 id="vim에서-파이썬-사용하기"><a href="#vim에서-파이썬-사용하기" class="headerlink" title="vim에서 파이썬 사용하기"></a>vim에서 파이썬 사용하기</h3><p>vim에서 파이썬을 사용하는 방법은 무척 쉽습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi helloworld.py</div></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span>(<span class="string">"hello world"</span>)</div><div class="line"><span class="keyword">print</span>(<span class="string">"안녕하세요."</span>)</div><div class="line"><span class="keyword">print</span>(<span class="number">1</span> + <span class="number">1</span>)</div><div class="line">:<span class="keyword">w</span></div><div class="line">:!python3 %</div></pre></td></tr></table></figure><p>위와 같이 입력하고 실행 하면 됩니다.</p><p>한글도 잘 되고 vim보다 더 좋은 에디터는 없답니다. ^^;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;실행하기&quot;&gt;&lt;a href=&quot;#실행하기&quot; class=&quot;headerlink&quot; title=&quot;실행하기&quot;&gt;&lt;/a&gt;실행하기&lt;/h3&gt;&lt;p&gt;파이썬을 실행하는 방법은 2가지 가 있습니다.&lt;br&gt;터미널에서 python3 하면 python intepreto
      
    
    </summary>
    
      <category term="python" scheme="http://korcow.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://korcow.github.io/tags/python/"/>
    
  </entry>
  
</feed>
